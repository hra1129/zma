        -:    0:Source:../zma.cpp
        -:    0:Programs:106
        -:    1:ï»¿// --------------------------------------------------------------------
        -:    2://	Z80 Macro Assembler ZMA
        -:    3:// ====================================================================
        -:    4://	2019/05/02	t.hara
        -:    5:// --------------------------------------------------------------------
        -:    6:
        -:    7:#include <iostream>
        -:    8:#include <vector>
        -:    9:#include <string>
        -:   10:#include <algorithm>
        -:   11:#include "zma_text.hpp"
        -:   12:
        -:   13:static const char* p_version = "v1.0.16-beta";
        -:   14:
        -:   15:// --------------------------------------------------------------------
        3:   16:static void usage( const char* p_name ) {
        3:   17:	std::cerr << "Usage> " << p_name << " [-options] <input.asm> <output.bin>\n";
        3:   18:	std::cerr << "This is Z80/R800 Macro Assembler.\n";
        3:   19:	std::cerr << "[-options]\n";
        3:   20:	std::cerr << "  -HELP, -H ........... Display this message.\n";
        3:   21:	std::cerr << "  -I{path} ............ Add {path} to the include path.\n";
        3:   22:	std::cerr << "  -D{name}={value} .... Define symbol. ex) -DSWITCH=1 -DNAME='GAME'\n";
        3:   23:	std::cerr << "  -DEFS ............... Change the DEFS instruction to an area allocation instruction.\n";
        3:   24:	std::cerr << "  -HEX ................ Output file is a HEX file.\n";
        3:   25:	std::cerr << "  -EALL ............... Detailed error display.\n";
        3:   26:}
        -:   27:
        -:   28:// --------------------------------------------------------------------
        2:   29:static void option_d( CZMA_INFORMATION &info, std::string s_argument ){
        -:   30:	std::string s_name;
        -:   31:	std::string s_value;
        -:   32:	CVALUE value;
        -:   33:	size_t i;
        -:   34:
       30:   35:	for( i = 2; i < s_argument.size(); i++ ){
       16:   36:		if( s_argument[ i ] == '=' ){
        -:   37:			break;
        -:   38:		}
       28:   39:		s_name = s_name + s_argument[ i ];
        -:   40:	}
        2:   41:	i++;
       14:   42:	for( ; i < s_argument.size(); i++ ){
       12:   43:		s_value = s_value + s_argument[ i ];
        -:   44:	}
        4:   45:	if( s_name == "" || s_value == "" ){
    #####:   46:		std::cerr << "Invalid command line option [" << s_argument << "].\n";
        -:   47:		return;
        -:   48:	}
        4:   49:	if( s_value.size() > 0 && s_value[ 0 ] == '\'' ){
    #####:   50:		if( s_value[ s_value.size() - 1 ] != '\'' ){
    #####:   51:			std::cerr << "Invalid command line option [" << s_argument << "].\n";
        -:   52:			return;
        -:   53:		}
    #####:   54:		s_value = s_value.substr( 1, s_value.size() - 2 );
    #####:   55:		value.value_type = CVALUE_TYPE::CV_STRING;
        -:   56:		value.s = s_value;
    #####:   57:		info.log << "  String : " << s_name << " = \"" << value.s << "\"\n";
        -:   58:	}
        -:   59:	else{
        2:   60:		value.value_type = CVALUE_TYPE::CV_INTEGER;
        -:   61:		try{
        1:   62:			value.i = std::stoi( s_value );
        -:   63:		}
        2:   64:		catch( ... ){
        1:   65:			value.i = 0;
        -:   66:		}
        4:   67:		info.log << "  Integer: " << s_name << " = " << value.i << "\n";
        -:   68:	}
        2:   69:	info.dict[ s_name ] = value;
        -:   70:}
        -:   71:
        -:   72:// --------------------------------------------------------------------
       79:   73:static std::vector<std::string> get_command_line_options( int argc, char *argv[], CZMA_INFORMATION &info ){
        -:   74:	int i;
        -:   75:	std::string s_argument;
        -:   76:	std::vector<std::string> sa_options;
        -:   77:
      393:   78:	for( i = 1; i < argc; i++ ){
      159:   79:		s_argument = argv[ i ];
      159:   80:		if( s_argument[ 0 ] == '-' || s_argument[ 0 ] == '/' ){
        7:   81:			s_argument[ 0 ] = '-';
        -:   82:			std::transform( s_argument.begin(), s_argument.end(), s_argument.begin(), toupper );
       13:   83:			if( s_argument == "-H" || s_argument == "-HELP" ){
        2:   84:				usage( argv[ 0 ] );
        2:   85:				exit( 1 );
        -:   86:			}
        5:   87:			else if( s_argument == "-DEFS" ){
        1:   88:				info.defs_is_space = true;
        -:   89:			}
        4:   90:			else if( s_argument[ 1 ] == 'I' ){
        3:   91:				info.add_include_path( s_argument.substr( 2 ).c_str() );
        -:   92:			}
        3:   93:			else if( s_argument[ 1 ] == 'D' ){
        4:   94:				option_d( info, s_argument );
        -:   95:			}
        1:   96:			else if( s_argument == "-HEX" ){
        1:   97:				info.output_type = CZMA_INFORMATION::OUTPUT_TYPE::CZMA_INTELHEX;
        -:   98:			}
    #####:   99:			else if( s_argument == "-EALL" ){
    #####:  100:				info.all_error_enable = true;
        -:  101:			}
        -:  102:		}
        -:  103:		else{
      152:  104:			sa_options.push_back( s_argument );
        -:  105:		}
        -:  106:	}
        -:  107:
       77:  108:	if( info.defs_is_space ){
        1:  109:		info.log << "  DEFS is DEFINE SPACE.\n";
        -:  110:	}
        -:  111:	else{
       76:  112:		info.log << "  DEFS is DEFINE STRING (default).\n";
        -:  113:	}
        -:  114:
       77:  115:	if( info.output_type == CZMA_INFORMATION::OUTPUT_TYPE::CZMA_BINARY ){
       76:  116:		info.log << "  OUTPUT TYPE: BINARY\n\n";
        -:  117:	}
        -:  118:	else{
        1:  119:		info.log << "  OUTPUT TYPE: INTEL HEX\n\n";
        -:  120:	}
       77:  121:	return sa_options;
        -:  122:}
        -:  123:
        -:  124:// --------------------------------------------------------------------
       79:  125:int main( int argc, char *argv[] ) {
       79:  126:    std::cout << "Z80 Macro Assembler ZMA " << p_version << "\n";
       79:  127:	std::cout << "=====================================================\n";
       79:  128:	std::cout << "Programmed by t.hara\n";
        -:  129:
      156:  130:	CZMA_TEXT src;
      156:  131:	CZMA_INFORMATION info;
       77:  132:	std::vector< std::string > sa_options;
        -:  133:
       79:  134:	info.log.open( "zma.log", std::ios::out );
       79:  135:	info.log << "Z80 Macro Assembler ZMA " << p_version << "\n";
       79:  136:	info.log << "=====================================================\n";
       79:  137:	info.log << "Programmed by t.hara\n\n";
        -:  138:
      156:  139:	sa_options = get_command_line_options( argc, argv, info );
      154:  140:	if( sa_options.size() < 2 ) {
        1:  141:		usage( argv[0] );
        -:  142:		return 1;
        -:  143:	}
        -:  144:
       76:  145:	info.log << "<< code >>\n";
       76:  146:	info.log << "LINE# |OFFSET|ADDR|MNEMONIC\n";
       76:  147:	info.log << "======+======+====+==================================\n";
       76:  148:	info.add_include_path( "./" );
       76:  149:	info.add_include_path( argv[0], "include/" );
      152:  150:	src.load( info, sa_options[0].c_str() );
        -:  151:
        -:  152:	int return_code = 0;
       76:  153:	if( src.all_process( info ) ) {
        -:  154:		return_code = 0;
       39:  155:		std::cout << "Success.\n";
        -:  156:	}
        -:  157:	else {
        -:  158:		return_code = 1;
       37:  159:		std::cout << "Failed.\n";
        -:  160:	}
      152:  161:	if( !src.save( info, sa_options[1].c_str() ) ){
        -:  162:		return_code = 1;
    #####:  163:		std::cout << "Save error.\n";
        -:  164:	}
        -:  165:	return return_code;
      158:  166:}
