        -:    0:Source:../zma.cpp
        -:    0:Programs:103
        -:    1:﻿// --------------------------------------------------------------------
        -:    2://	Z80 Macro Assembler ZMA
        -:    3:// ====================================================================
        -:    4://	2019/05/02	t.hara
        -:    5:// --------------------------------------------------------------------
        -:    6:
        -:    7:#include <iostream>
        -:    8:#include <vector>
        -:    9:#include <string>
        -:   10:#include <algorithm>
        -:   11:#include "zma_text.hpp"
        -:   12:
        -:   13:static const char* p_version = "v1.0.16-alpha";
        -:   14:
        -:   15:// --------------------------------------------------------------------
    #####:   16:static void usage( const char* p_name ) {
    #####:   17:	std::cerr << "Usage> " << p_name << " [-options] <input.asm> <output.bin>\n";
    #####:   18:	std::cerr << "This is Z80/R800 Macro Assembler.\n";
    #####:   19:	std::cerr << "[-options]\n";
    #####:   20:	std::cerr << "  -HELP, -H ... Display this message.\n";
    #####:   21:	std::cerr << "  -I{path} .... Add {path} to the include path.\n";
    #####:   22:	std::cerr << "  -DEFS ....... Change the DEFS instruction to an area allocation instruction.\n";
    #####:   23:}
        -:   24:
        -:   25:// --------------------------------------------------------------------
        6:   26:static std::vector<std::string> get_command_line_options( int argc, char *argv[], CZMA_INFORMATION &info ){
        -:   27:	int i;
        -:   28:	std::string s_argument;
        -:   29:	std::vector<std::string> sa_options;
        -:   30:
       30:   31:	for( i = 1; i < argc; i++ ){
       12:   32:		s_argument = argv[ i ];
       12:   33:		if( s_argument[ 0 ] == '-' || s_argument[ 0 ] == '/' ){
    #####:   34:			s_argument[ 0 ] = '-';
        -:   35:			std::transform( s_argument.begin(), s_argument.end(), s_argument.begin(), toupper );
    #####:   36:			if( s_argument == "-H" || s_argument == "-HELP" ){
    #####:   37:				usage( argv[ 0 ] );
    #####:   38:				exit( 1 );
        -:   39:			}
    #####:   40:			else if( s_argument == "-DEFS" ){
    #####:   41:				info.defs_is_space = true;
        -:   42:			}
    #####:   43:			else if( s_argument[ 1 ] == 'I' ){
    #####:   44:				info.add_include_path( s_argument.substr( 2 ).c_str() );
        -:   45:			}
        -:   46:			else if( s_argument[ 1 ] == 'D' ){
        -:   47:				//	★ここに -Dxxx=xxxx な記述の解釈を追加する
        -:   48:			}
        -:   49:		}
        -:   50:		else{
       12:   51:			sa_options.push_back( s_argument );
        -:   52:		}
        -:   53:	}
        6:   54:	return sa_options;
        -:   55:}
        -:   56:
        -:   57:// --------------------------------------------------------------------
        6:   58:int main( int argc, char *argv[] ) {
        6:   59:    std::cout << "Z80 Macro Assembler ZMA " << p_version << "\n";
        6:   60:	std::cout << "=====================================================\n";
        6:   61:	std::cout << "Programmed by t.hara\n";
        -:   62:
       12:   63:	CZMA_TEXT src;
       12:   64:	CZMA_INFORMATION info;
        6:   65:	std::vector< std::string > sa_options;
        -:   66:
       12:   67:	sa_options = get_command_line_options( argc, argv, info );
       12:   68:	if( sa_options.size() < 2 ) {
    #####:   69:		usage( argv[0] );
        -:   70:		return 1;
        -:   71:	}
        -:   72:
        6:   73:	info.log.open( "zma.log", std::ios::out );
        6:   74:	info.log << "Z80 Macro Assembler ZMA " << p_version << "\n";
        6:   75:	info.log << "=====================================================\n";
        6:   76:	info.log << "Programmed by t.hara\n\n";
        6:   77:	if( info.defs_is_space ){
    #####:   78:		info.log << "  DEFS is DEFINE SPACE.\n\n";
        -:   79:	}
        -:   80:	else{
        6:   81:		info.log << "  DEFS is DEFINE STRING (default).\n\n";
        -:   82:	}
        6:   83:	info.log << "<< code >>\n";
        6:   84:	info.log << "LINE# |OFFSET|ADDR|MNEMONIC\n";
        6:   85:	info.log << "======+======+====+==================================\n";
        6:   86:	info.add_include_path( "./" );
        6:   87:	info.add_include_path( argv[0], "include/" );
       12:   88:	src.load( info, sa_options[0].c_str() );
        -:   89:
        -:   90:	int return_code = 0;
        6:   91:	if( src.all_process( info ) ) {
        -:   92:		return_code = 0;
        6:   93:		std::cout << "Success.\n";
        -:   94:	}
        -:   95:	else {
        -:   96:		return_code = 1;
    #####:   97:		std::cout << "Failed.\n";
        -:   98:	}
       12:   99:	if( !src.save( info, sa_options[1].c_str() ) ){
        -:  100:		return_code = 1;
    #####:  101:		std::cout << "Save error.\n";
        -:  102:	}
        -:  103:	return return_code;
       12:  104:}
