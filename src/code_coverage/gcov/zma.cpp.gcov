        -:    0:Source:../zma.cpp
        -:    0:Programs:106
        -:    1:ï»¿// --------------------------------------------------------------------
        -:    2://	Z80 Macro Assembler ZMA
        -:    3:// ====================================================================
        -:    4://	2019/05/02	t.hara
        -:    5:// --------------------------------------------------------------------
        -:    6:
        -:    7:#include <iostream>
        -:    8:#include <vector>
        -:    9:#include <string>
        -:   10:#include <algorithm>
        -:   11:#include "zma_text.hpp"
        -:   12:
        -:   13:static const char* p_version = "v1.0.16-alpha";
        -:   14:
        -:   15:// --------------------------------------------------------------------
        3:   16:static void usage( const char* p_name ) {
        3:   17:	std::cerr << "Usage> " << p_name << " [-options] <input.asm> <output.bin>\n";
        3:   18:	std::cerr << "This is Z80/R800 Macro Assembler.\n";
        3:   19:	std::cerr << "[-options]\n";
        3:   20:	std::cerr << "  -HELP, -H ........... Display this message.\n";
        3:   21:	std::cerr << "  -I{path} ............ Add {path} to the include path.\n";
        3:   22:	std::cerr << "  -D{name}={value} .... Define symbol. ex) -DSWITCH=1 -DNAME='GAME'\n";
        3:   23:	std::cerr << "  -DEFS ............... Change the DEFS instruction to an area allocation instruction.\n";
        3:   24:	std::cerr << "  -HEX ................ Output file is a HEX file.\n";
        3:   25:}
        -:   26:
        -:   27:// --------------------------------------------------------------------
        2:   28:static void option_d( CZMA_INFORMATION &info, std::string s_argument ){
        -:   29:	std::string s_name;
        -:   30:	std::string s_value;
        -:   31:	CVALUE value;
        -:   32:	size_t i;
        -:   33:
       30:   34:	for( i = 2; i < s_argument.size(); i++ ){
       16:   35:		if( s_argument[ i ] == '=' ){
        -:   36:			break;
        -:   37:		}
       28:   38:		s_name = s_name + s_argument[ i ];
        -:   39:	}
        2:   40:	i++;
       14:   41:	for( ; i < s_argument.size(); i++ ){
       12:   42:		s_value = s_value + s_argument[ i ];
        -:   43:	}
        4:   44:	if( s_name == "" || s_value == "" ){
    #####:   45:		std::cerr << "Invalid command line option [" << s_argument << "].\n";
        -:   46:		return;
        -:   47:	}
        4:   48:	if( s_value.size() > 0 && s_value[ 0 ] == '\'' ){
    #####:   49:		if( s_value[ s_value.size() - 1 ] != '\'' ){
    #####:   50:			std::cerr << "Invalid command line option [" << s_argument << "].\n";
        -:   51:			return;
        -:   52:		}
    #####:   53:		s_value = s_value.substr( 1, s_value.size() - 2 );
    #####:   54:		value.value_type = CVALUE_TYPE::CV_STRING;
        -:   55:		value.s = s_value;
    #####:   56:		info.log << "  String : " << s_name << " = \"" << value.s << "\"\n";
        -:   57:	}
        -:   58:	else{
        2:   59:		value.value_type = CVALUE_TYPE::CV_INTEGER;
        -:   60:		try{
        1:   61:			value.i = std::stoi( s_value );
        -:   62:		}
        2:   63:		catch( ... ){
        1:   64:			value.i = 0;
        -:   65:		}
        4:   66:		info.log << "  Integer: " << s_name << " = " << value.i << "\n";
        -:   67:	}
        2:   68:	info.dict[ s_name ] = value;
        -:   69:}
        -:   70:
        -:   71:// --------------------------------------------------------------------
       77:   72:static std::vector<std::string> get_command_line_options( int argc, char *argv[], CZMA_INFORMATION &info ){
        -:   73:	int i;
        -:   74:	std::string s_argument;
        -:   75:	std::vector<std::string> sa_options;
        -:   76:
      383:   77:	for( i = 1; i < argc; i++ ){
      155:   78:		s_argument = argv[ i ];
      155:   79:		if( s_argument[ 0 ] == '-' || s_argument[ 0 ] == '/' ){
        7:   80:			s_argument[ 0 ] = '-';
        -:   81:			std::transform( s_argument.begin(), s_argument.end(), s_argument.begin(), toupper );
       13:   82:			if( s_argument == "-H" || s_argument == "-HELP" ){
        2:   83:				usage( argv[ 0 ] );
        2:   84:				exit( 1 );
        -:   85:			}
        5:   86:			else if( s_argument == "-DEFS" ){
        1:   87:				info.defs_is_space = true;
        -:   88:			}
        4:   89:			else if( s_argument[ 1 ] == 'I' ){
        3:   90:				info.add_include_path( s_argument.substr( 2 ).c_str() );
        -:   91:			}
        3:   92:			else if( s_argument[ 1 ] == 'D' ){
        4:   93:				option_d( info, s_argument );
        -:   94:			}
        1:   95:			else if( s_argument == "-HEX" ){
        1:   96:				info.output_type = CZMA_INFORMATION::OUTPUT_TYPE::CZMA_INTELHEX;
        -:   97:			}
        -:   98:		}
        -:   99:		else{
      148:  100:			sa_options.push_back( s_argument );
        -:  101:		}
        -:  102:	}
        -:  103:
       75:  104:	if( info.defs_is_space ){
        1:  105:		info.log << "  DEFS is DEFINE SPACE.\n";
        -:  106:	}
        -:  107:	else{
       74:  108:		info.log << "  DEFS is DEFINE STRING (default).\n";
        -:  109:	}
        -:  110:
       75:  111:	if( info.output_type == CZMA_INFORMATION::OUTPUT_TYPE::CZMA_BINARY ){
       74:  112:		info.log << "  OUTPUT TYPE: BINARY\n\n";
        -:  113:	}
        -:  114:	else{
        1:  115:		info.log << "  OUTPUT TYPE: INTEL HEX\n\n";
        -:  116:	}
       75:  117:	return sa_options;
        -:  118:}
        -:  119:
        -:  120:// --------------------------------------------------------------------
       77:  121:int main( int argc, char *argv[] ) {
       77:  122:    std::cout << "Z80 Macro Assembler ZMA " << p_version << "\n";
       77:  123:	std::cout << "=====================================================\n";
       77:  124:	std::cout << "Programmed by t.hara\n";
        -:  125:
      152:  126:	CZMA_TEXT src;
      152:  127:	CZMA_INFORMATION info;
       75:  128:	std::vector< std::string > sa_options;
        -:  129:
       77:  130:	info.log.open( "zma.log", std::ios::out );
       77:  131:	info.log << "Z80 Macro Assembler ZMA " << p_version << "\n";
       77:  132:	info.log << "=====================================================\n";
       77:  133:	info.log << "Programmed by t.hara\n\n";
        -:  134:
      152:  135:	sa_options = get_command_line_options( argc, argv, info );
      150:  136:	if( sa_options.size() < 2 ) {
        1:  137:		usage( argv[0] );
        -:  138:		return 1;
        -:  139:	}
        -:  140:
       74:  141:	info.log << "<< code >>\n";
       74:  142:	info.log << "LINE# |OFFSET|ADDR|MNEMONIC\n";
       74:  143:	info.log << "======+======+====+==================================\n";
       74:  144:	info.add_include_path( "./" );
       74:  145:	info.add_include_path( argv[0], "include/" );
      148:  146:	src.load( info, sa_options[0].c_str() );
        -:  147:
        -:  148:	int return_code = 0;
       74:  149:	if( src.all_process( info ) ) {
        -:  150:		return_code = 0;
       38:  151:		std::cout << "Success.\n";
        -:  152:	}
        -:  153:	else {
        -:  154:		return_code = 1;
       36:  155:		std::cout << "Failed.\n";
        -:  156:	}
      148:  157:	if( !src.save( info, sa_options[1].c_str() ) ){
        -:  158:		return_code = 1;
    #####:  159:		std::cout << "Save error.\n";
        -:  160:	}
        -:  161:	return return_code;
      154:  162:}
