        -:    0:Source:../zma_information.hpp
        -:    0:Programs:4
        -:    1:// --------------------------------------------------------------------
        -:    2://	Z80 Macro Assembler dictionary
        -:    3:// ====================================================================
        -:    4://	2019/05/05	t.hara
        -:    5:// --------------------------------------------------------------------
        -:    6:
        -:    7:#pragma once
        -:    8:
        -:    9:#include <string>
        -:   10:#include <map>
        -:   11:#include <vector>
        -:   12:#include <fstream>
        -:   13:#include <iomanip>
        -:   14:
      304:   15:class CVALUE {
        -:   16:public:
        -:   17:	enum {
        -:   18:		CV_UNKNOWN,
        -:   19:		CV_INTEGER,
        -:   20:		CV_STRING,
        -:   21:	} type;
        -:   22:
        -:   23:	int			i;
        -:   24:	std::string	s;
        -:   25:
    89579:   26:	CVALUE(): type( CV_UNKNOWN ), i( 0 ), s( "" ) {
    89579:   27:	}
        -:   28:};
        -:   29:
      175:   30:class CZMA_MACRO_ARG {
        -:   31:public:
        -:   32:	std::string						name;
        -:   33:	bool							is_through;
        -:   34:
       86:   35:	CZMA_MACRO_ARG(): name( "" ), is_through( false ) {
       86:   36:	}
        -:   37:};
        -:   38:
       33:   39:class CZMA_MACRO {
        -:   40:public:
        -:   41:	std::vector< CZMA_MACRO_ARG >	parameter_name_list;
        -:   42:	std::vector<class CZMA_PARSE*>	m_text;
        -:   43:};
        -:   44:
        -:   45:class CZMA_REPEAT_T {
        -:   46:public:
        -:   47:	std::string						counter_symbol;
        -:   48:	int								counter_end;
        -:   49:	bool							is_counter_end_fixed;
        -:   50:	std::string						scope_name;
        -:   51:	std::vector<class CZMA_PARSE*>	m_text;
        -:   52:
       22:   53:	CZMA_REPEAT_T(): counter_symbol( "" ), counter_end( 0 ), is_counter_end_fixed( false ), scope_name( "" ) {
       22:   54:	}
        -:   55:};
        -:   56:
       58:   57:class CZMA_IF_SUB_T {
        -:   58:public:
        -:   59:	bool							is_condition_fixed = false;
        -:   60:	bool							is_condition = false;
        -:   61:	class CZMA_PARSE_IF				*p_if = nullptr;
        -:   62:	class CZMA_TEXT					*p_text = nullptr;
        -:   63:};
        -:   64:
       31:   65:class CZMA_IF_T {
        -:   66:public:
        -:   67:	std::vector<CZMA_IF_SUB_T*>		m_sub;
        -:   68:};
        -:   69:
        -:   70:class CZMA_INFORMATION {
        -:   71:public:
        -:   72:	std::map< std::string, CVALUE >	dict;
        -:   73:	std::map< std::string, int >	sss_or_ddd_id { { "B", 0 }, { "C", 1 }, { "D", 2 }, { "E", 3 }, { "H", 4 }, { "L", 5 }, { "A", 7 }, };
        -:   74:	std::map< std::string, int >	ix_hl{ { "IXH", 4 }, { "IXL", 5 }, };
        -:   75:	std::map< std::string, int >	iy_hl{ { "IYH", 4 }, { "IYL", 5 }, };
        -:   76:	std::map< std::string, int >	rp_id { { "BC", 0 }, { "DE", 1 }, { "HL", 2 }, { "SP", 3 }, };
        -:   77:	std::map< std::string, int >	ix_rp_id{ { "BC", 0 }, { "DE", 1 }, { "IX", 2 }, { "SP", 3 }, };
        -:   78:	std::map< std::string, int >	iy_rp_id{ { "BC", 0 }, { "DE", 1 }, { "IY", 2 }, { "SP", 3 }, };
        -:   79:	std::map< std::string, int >	rp_with_af_id{ { "BC", 0 }, { "DE", 1 }, { "HL", 2 }, {"AF", 3 }, };
        -:   80:	std::map< std::string, int >	ccc_id{ { "NZ", 0 }, { "Z", 1 }, { "NC", 2 }, { "C", 3 }, { "PO", 4 }, { "PE", 5 }, { "P", 6 }, { "M", 7 }, };
        -:   81:	std::map< std::string, int >	cc2_id{ { "NZ", 0 }, { "Z", 1 }, { "NC", 2 }, { "C", 3 }, };
        -:   82:	std::vector< std::string >		scope;
        -:   83:	std::ofstream					log;
        -:   84:	std::vector< std::string >		include_path;
        -:   85:
        -:   86:	unsigned int auto_label_index;
        -:   87:
        -:   88:	typedef enum {
        -:   89:		CZMA_INFO_UNKNOWN,
        -:   90:		CZMA_INFO_MACRO_BLOCK,
        -:   91:		CZMA_INFO_REPEAT_BLOCK,
        -:   92:		CZMA_INFO_IF_BLOCK,
        -:   93:	} BLOCK_TYPE_T;
        -:   94:	std::map< std::string, BLOCK_TYPE_T >	block_begin_table{ { "REPEAT", { CZMA_INFO_REPEAT_BLOCK } },
        -:   95:													{ "ELSEIF", CZMA_INFO_IF_BLOCK }, { "ELSE", CZMA_INFO_IF_BLOCK }, { "IF", { CZMA_INFO_IF_BLOCK } } };
        -:   96:	std::map< std::string, BLOCK_TYPE_T >	block_end_table{ { "ENDM", CZMA_INFO_MACRO_BLOCK }, { "ENDR", CZMA_INFO_REPEAT_BLOCK },
        -:   97:													{ "ELSEIF", CZMA_INFO_IF_BLOCK }, { "ELSE", CZMA_INFO_IF_BLOCK }, { "ENDIF", CZMA_INFO_IF_BLOCK }  };
        -:   98:	bool is_updated;
        -:   99:	bool is_block_processing;
        -:  100:	BLOCK_TYPE_T block_type;
        -:  101:	std::vector<class CZMA_PARSE*>			*p_text;
        -:  102:
        -:  103:	CZMA_MACRO* p_macro;
        -:  104:	std::map< std::string, CZMA_MACRO* >	macro_list;
        -:  105:	std::map< std::string, std::string >	parameter_list;
        -:  106:
        -:  107:	CZMA_REPEAT_T*							p_repeat;
        -:  108:
        -:  109:	CZMA_IF_T*								p_if;
        -:  110:
        -:  111:	CZMA_INFORMATION(): is_updated( false ), is_block_processing( false ), block_type( CZMA_INFO_UNKNOWN  ), auto_label_index( 0 ), p_text( nullptr ), p_macro( nullptr ), p_if( nullptr ), p_repeat( nullptr ) {
        -:  112:	}
        -:  113:
      348:  114:	unsigned int get_auto_label_index( void ) {
      348:  115:		return auto_label_index++;
        -:  116:	}
        -:  117:
      243:  118:	std::string get_scope_path( void ) const {
      243:  119:		std::string r = "";
      566:  120:		for( std::string s : scope ) {
      323:  121:			r = r + s + ":";
        -:  122:		}
      243:  123:		return r;
        -:  124:	}
        -:  125:
      397:  126:	bool get_label_value( CVALUE& result, std::string word ) {
        -:  127:		int i, l;
      794:  128:		std::string s;
        -:  129:
      714:  130:		for( l = scope.size(); l >= 0; l-- ) {
      464:  131:			s = "";
      669:  132:			for( i = 0; i < l; i++ ) {
      205:  133:				s = s + scope[i] + ":";
        -:  134:			}
      464:  135:			s = s + word;
      464:  136:			if( this->dict.count( s ) ) {
      147:  137:				result = this->dict[s];
      147:  138:				return true;
        -:  139:			}
        -:  140:		}
      250:  141:		result.type = CVALUE::CV_UNKNOWN;
      250:  142:		return false;
        -:  143:	}
        -:  144:
     4414:  145:	bool is_sss_or_ddd( std::string word ) const {
     4414:  146:		int d = sss_or_ddd_id.count( word );
     4414:  147:		return d;
        -:  148:	}
        -:  149:
     1583:  150:	bool is_ix_hl( std::string word ) const {
     1583:  151:		int d = ix_hl.count( word );
     1583:  152:		return d;
        -:  153:	}
        -:  154:
     1027:  155:	bool is_iy_hl( std::string word ) const {
     1027:  156:		int d = iy_hl.count( word );
     1027:  157:		return d;
        -:  158:	}
        -:  159:
      945:  160:	bool is_rp( std::string word ) const {
      945:  161:		return rp_id.count( word );
        -:  162:	}
        -:  163:
       24:  164:	bool is_ix_rp( std::string word ) const{
       24:  165:		return ix_rp_id.count( word );
        -:  166:	}
        -:  167:
       24:  168:	bool is_iy_rp( std::string word ) const{
       24:  169:		return iy_rp_id.count( word );
        -:  170:	}
        -:  171:
       36:  172:	bool is_rp_with_af( std::string word ) const {
       36:  173:		return rp_with_af_id.count( word );
        -:  174:	}
        -:  175:
       81:  176:	bool is_ccc( std::string word ) const {
       81:  177:		return ccc_id.count( word );
        -:  178:	}
        -:  179:
       15:  180:	bool is_cc2( std::string word ) const {
       15:  181:		return cc2_id.count( word );
        -:  182:	}
        -:  183:
        -:  184:	void add_include_path( const char* p_path, const char *p_sub_path = "" ) {
        -:  185:		std::string s = p_path;
        -:  186:
        -:  187:		for( int i = s.size() - 1; i >= 0; i-- ) {
        -:  188:			if( s[i] == '/' || s[i] == '\\' ) {
        -:  189:				s = s.substr( 0, i );
        -:  190:				break;
        -:  191:			}
        -:  192:		}
        -:  193:		include_path.push_back( s + "/" + p_sub_path );
        -:  194:	}
       56:  195:	void write( void ) {
       56:  196:		log << "<< label >>" << std::endl;
      109:  197:		for( auto item : dict ) { 
       53:  198:			if( item.second.type == item.second.CV_INTEGER ) {
       50:  199:				log << item.first << " " << std::dec << item.second.i << " ( 0x" << std::hex << item.second.i << " )" << std::endl;
        -:  200:			}
        3:  201:			else if( item.second.type == item.second.CV_STRING ) {
        1:  202:				log << item.first << " \"" << item.second.s << "\"" << std::endl;
        -:  203:			}
        -:  204:			else {
        2:  205:				log << item.first << " ????" << std::endl;
        -:  206:			}
        -:  207:		}
        -:  208:
      112:  209:		std::ofstream sym_file;
       56:  210:		sym_file.open( "zma.sym", std::ios::out );
       56:  211:		if( !sym_file ){
    #####:  212:			return;
        -:  213:		}
      106:  214:		for( auto item : dict ){
       53:  215:			if( item.second.type != item.second.CV_INTEGER ){
        3:  216:				continue;
        -:  217:			}
       50:  218:			sym_file << item.first << " equ 0" << std::hex << item.second.i << "h" << std::endl;
        -:  219:		}
       56:  220:		sym_file.close();
        -:  221:	}
        -:  222:};
