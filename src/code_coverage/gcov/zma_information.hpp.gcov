        -:    0:Source:../zma_information.hpp
        -:    0:Programs:103
        -:    1:// --------------------------------------------------------------------
        -:    2://	Z80 Macro Assembler dictionary
        -:    3:// ====================================================================
        -:    4://	2019/05/05	t.hara
        -:    5:// --------------------------------------------------------------------
        -:    6:
        -:    7:#pragma once
        -:    8:
        -:    9:#include <string>
        -:   10:#include <map>
        -:   11:#include <vector>
        -:   12:#include <fstream>
        -:   13:#include <iomanip>
        -:   14:
        -:   15:// --------------------------------------------------------------------
        -:   16:enum class CVALUE_TYPE {
        -:   17:	CV_UNKNOWN = 0x100,
        -:   18:	CV_UNKNOWN_INTEGER = 0x101,
        -:   19:	CV_UNKNOWN_STRING = 0x102,
        -:   20:	CV_INTEGER = 0x1,
        -:   21:	CV_STRING = 0x2,
        -:   22:};
        -:   23:
        -:   24:// --------------------------------------------------------------------
    94500:   25:class CVALUE {
        -:   26:public:
        -:   27:	CVALUE_TYPE value_type;
        -:   28:
        -:   29:	int			i;
        -:   30:	std::string	s;
        -:   31:
        -:   32:	// --------------------------------------------------------------------
    99702:   33:	CVALUE(): value_type( CVALUE_TYPE::CV_UNKNOWN ), i( 0 ), s( "" ) {
        -:   34:	}
        -:   35:
        -:   36:	// --------------------------------------------------------------------
        -:   37:	bool is_unknown( void ) const{
     4041:   38:		return ( ( (int)value_type & 0x100 ) == 0x100 );
        -:   39:	}
        -:   40:
        -:   41:	// --------------------------------------------------------------------
        -:   42:	bool is_integer( void ) const{
    73742:   43:		return ( ( (int)value_type & 0xFF ) == 0x1 );
        -:   44:	}
        -:   45:
        -:   46:	// --------------------------------------------------------------------
        -:   47:	bool is_string( void ) const{
    #####:   48:		return ( ( (int)value_type & 0xFF ) == 0x2 );
        -:   49:	}
        -:   50:
        -:   51:	// --------------------------------------------------------------------
        -:   52:	void inherit( CVALUE_TYPE base, CVALUE_TYPE inherit_a, CVALUE_TYPE inherit_b ){
       24:   53:		value_type = (CVALUE_TYPE)( (int)base | ( ( (int)inherit_a | (int)inherit_b ) & 0x100 ) );
        -:   54:	}
        -:   55:};
        -:   56:
        -:   57:// --------------------------------------------------------------------
    #####:   58:class CZMA_MACRO_ARG {
        -:   59:public:
        -:   60:	std::string						name;
        -:   61:	bool							is_through;
        -:   62:
        -:   63:	// --------------------------------------------------------------------
    #####:   64:	CZMA_MACRO_ARG(): name( "" ), is_through( false ) {
        -:   65:	}
        -:   66:};
        -:   67:
        -:   68:// --------------------------------------------------------------------
        -:   69:class CZMA_MACRO {
        -:   70:public:
        -:   71:	std::vector< CZMA_MACRO_ARG >	parameter_name_list;
        -:   72:	std::vector<class CZMA_PARSE*>	m_text;
        -:   73:};
        -:   74:
        -:   75:// --------------------------------------------------------------------
        -:   76:class CZMA_REPEAT_T {
        -:   77:public:
        -:   78:	std::string						counter_symbol;
        -:   79:	int								counter_end;
        -:   80:	bool							is_counter_end_fixed;
        -:   81:	std::string						scope_name;
        -:   82:	std::vector<class CZMA_PARSE*>	m_text;
        -:   83:
        -:   84:	// --------------------------------------------------------------------
    #####:   85:	CZMA_REPEAT_T(): counter_symbol( "" ), counter_end( 0 ), is_counter_end_fixed( false ), scope_name( "" ) {
    #####:   86:	}
        -:   87:};
        -:   88:
        -:   89:// --------------------------------------------------------------------
    #####:   90:class CZMA_IF_SUB_T {
        -:   91:public:
        -:   92:	bool							is_condition_fixed = false;
        -:   93:	bool							is_condition = false;
        -:   94:	class CZMA_PARSE_IF				*p_if = nullptr;
        -:   95:	class CZMA_TEXT					*p_text = nullptr;
        -:   96:};
        -:   97:
        -:   98:// --------------------------------------------------------------------
        -:   99:class CZMA_IF_T {
        -:  100:public:
        -:  101:	std::vector<CZMA_IF_SUB_T*>		m_sub;
        -:  102:};
        -:  103:
        -:  104:// --------------------------------------------------------------------
        4:  105:class CZMA_CHAR_SET {
        -:  106:public:
        -:  107:	std::vector< unsigned char >	ascii_to_map;
        -:  108:};
        -:  109:
        -:  110:// --------------------------------------------------------------------
       18:  111:class CZMA_INFORMATION {
        -:  112:public:
        -:  113:	std::map< std::string, CVALUE >	dict;
        -:  114:	std::map< std::string, int >	sss_or_ddd_id { { "B", 0 }, { "C", 1 }, { "D", 2 }, { "E", 3 }, { "H", 4 }, { "L", 5 }, { "A", 7 }, };
        -:  115:	std::map< std::string, int >	ix_hl{ { "IXH", 4 }, { "IXL", 5 }, };
        -:  116:	std::map< std::string, int >	iy_hl{ { "IYH", 4 }, { "IYL", 5 }, };
        -:  117:	std::map< std::string, int >	rp_id { { "BC", 0 }, { "DE", 1 }, { "HL", 2 }, { "SP", 3 }, };
        -:  118:	std::map< std::string, int >	ix_rp_id{ { "BC", 0 }, { "DE", 1 }, { "IX", 2 }, { "SP", 3 }, };
        -:  119:	std::map< std::string, int >	iy_rp_id{ { "BC", 0 }, { "DE", 1 }, { "IY", 2 }, { "SP", 3 }, };
        -:  120:	std::map< std::string, int >	rp_with_af_id{ { "BC", 0 }, { "DE", 1 }, { "HL", 2 }, {"AF", 3 }, };
        -:  121:	std::map< std::string, int >	ccc_id{ { "NZ", 0 }, { "Z", 1 }, { "NC", 2 }, { "C", 3 }, { "PO", 4 }, { "PE", 5 }, { "P", 6 }, { "M", 7 }, };
        -:  122:	std::map< std::string, int >	cc2_id{ { "NZ", 0 }, { "Z", 1 }, { "NC", 2 }, { "C", 3 }, };
        -:  123:	std::vector< std::string >		scope;
        -:  124:	std::ofstream					log;
        -:  125:	std::vector< std::string >		include_path;
        -:  126:
        -:  127:	unsigned int auto_label_index;
        -:  128:
        -:  129:	bool		defs_is_space;	//	false: DEFS‹^Ž—–½—ß‚Í•¶Žš—ñ”z’u(default), true: DEFS‹^Ž—–½—ß‚Í—ÌˆæŠm•Û
        -:  130:
        -:  131:	enum class BLOCK_TYPE_T {
        -:  132:		CZMA_INFO_UNKNOWN,
        -:  133:		CZMA_INFO_MACRO_BLOCK,
        -:  134:		CZMA_INFO_REPEAT_BLOCK,
        -:  135:		CZMA_INFO_IF_BLOCK,
        -:  136:	};
        -:  137:	std::map< std::string, BLOCK_TYPE_T >	block_begin_table{ { "REPEAT", { BLOCK_TYPE_T::CZMA_INFO_REPEAT_BLOCK } },
        -:  138:													{ "ELSEIF", BLOCK_TYPE_T::CZMA_INFO_IF_BLOCK }, { "ELSE", BLOCK_TYPE_T::CZMA_INFO_IF_BLOCK }, { "IF", { BLOCK_TYPE_T::CZMA_INFO_IF_BLOCK } } };
        -:  139:	std::map< std::string, BLOCK_TYPE_T >	block_end_table{ { "ENDM", BLOCK_TYPE_T::CZMA_INFO_MACRO_BLOCK }, { "ENDR", BLOCK_TYPE_T::CZMA_INFO_REPEAT_BLOCK },
        -:  140:													{ "ELSEIF", BLOCK_TYPE_T::CZMA_INFO_IF_BLOCK }, { "ELSE", BLOCK_TYPE_T::CZMA_INFO_IF_BLOCK }, { "ENDIF", BLOCK_TYPE_T::CZMA_INFO_IF_BLOCK }  };
        -:  141:	bool is_updated;
        -:  142:	bool is_block_processing;
        -:  143:	BLOCK_TYPE_T block_type;
        -:  144:	std::vector<class CZMA_PARSE*>			*p_text;
        -:  145:
        -:  146:	CZMA_MACRO* p_macro;
        -:  147:	std::map< std::string, CZMA_MACRO* >	macro_list;
        -:  148:	std::map< std::string, std::string >	parameter_list;
        -:  149:
        -:  150:	CZMA_REPEAT_T*							p_repeat;
        -:  151:
        -:  152:	CZMA_IF_T*								p_if;
        -:  153:
        -:  154:	std::map< std::string, CZMA_CHAR_SET >	char_set_list;
        -:  155:	CZMA_CHAR_SET*							p_char_set;
        -:  156:	std::string								s_char_set;
        -:  157:
        -:  158:	// --------------------------------------------------------------------
      168:  159:	CZMA_INFORMATION(): is_updated( false ), is_block_processing( false ), block_type( BLOCK_TYPE_T::CZMA_INFO_UNKNOWN  ), auto_label_index( 0 ), p_text( nullptr ), p_macro( nullptr ), p_if( nullptr ), p_repeat( nullptr ), p_char_set( nullptr ), defs_is_space(false) {
        6:  160:	}
        -:  161:
        -:  162:	// --------------------------------------------------------------------
        -:  163:	unsigned int get_auto_label_index( void ) {
    #####:  164:		return auto_label_index++;
        -:  165:	}
        -:  166:
        -:  167:	// --------------------------------------------------------------------
       50:  168:	std::string get_scope_path( void ) const {
       50:  169:		std::string r = "";
       50:  170:		for( std::string s : scope ) {
    #####:  171:			r = r + s + ":";
        -:  172:		}
       50:  173:		return r;
        -:  174:	}
        -:  175:
        -:  176:	// --------------------------------------------------------------------
       53:  177:	bool get_label_value( CVALUE& result, std::string word ) {
        -:  178:		int i, l;
        -:  179:		std::string s;
        -:  180:
      114:  181:		for( l = (int)scope.size(); l >= 0; l-- ) {
        -:  182:			s = "";
       53:  183:			for( i = 0; i < l; i++ ) {
    #####:  184:				s = s + scope[i] + ":";
        -:  185:			}
      106:  186:			s = s + word;
        -:  187:			if( this->dict.count( s ) ) {
       45:  188:				result = this->dict[s];
        -:  189:				return true;
        -:  190:			}
        -:  191:		}
        8:  192:		result.value_type = CVALUE_TYPE::CV_UNKNOWN;
        8:  193:		return false;
        -:  194:	}
        -:  195:
        -:  196:	// --------------------------------------------------------------------
        -:  197:	bool is_sss_or_ddd( std::string word ) const {
     2995:  198:		int d = (int)sss_or_ddd_id.count( word );
        -:  199:		return d;
        -:  200:	}
        -:  201:
        -:  202:	// --------------------------------------------------------------------
        -:  203:	bool is_ix_hl( std::string word ) const {
      733:  204:		int d = (int)ix_hl.count( word );
        -:  205:		return d;
        -:  206:	}
        -:  207:
        -:  208:	// --------------------------------------------------------------------
        -:  209:	bool is_iy_hl( std::string word ) const {
      429:  210:		int d = (int)iy_hl.count( word );
        -:  211:		return d;
        -:  212:	}
        -:  213:
        -:  214:	// --------------------------------------------------------------------
        -:  215:	bool is_rp( std::string word ) const {
      357:  216:		return (int)rp_id.count( word );
        -:  217:	}
        -:  218:
        -:  219:	// --------------------------------------------------------------------
        -:  220:	bool is_ix_rp( std::string word ) const{
       12:  221:		return (int)ix_rp_id.count( word );
        -:  222:	}
        -:  223:
        -:  224:	// --------------------------------------------------------------------
        -:  225:	bool is_iy_rp( std::string word ) const{
       12:  226:		return (int)iy_rp_id.count( word );
        -:  227:	}
        -:  228:
        -:  229:	// --------------------------------------------------------------------
        -:  230:	bool is_rp_with_af( std::string word ) const {
       36:  231:		return (int)rp_with_af_id.count( word );
        -:  232:	}
        -:  233:
        -:  234:	// --------------------------------------------------------------------
        -:  235:	bool is_ccc( std::string word ) const {
       72:  236:		return (int)ccc_id.count( word );
        -:  237:	}
        -:  238:
        -:  239:	// --------------------------------------------------------------------
        -:  240:	bool is_cc2( std::string word ) const {
       12:  241:		return (int)cc2_id.count( word );
        -:  242:	}
        -:  243:
        -:  244:	// --------------------------------------------------------------------
       12:  245:	void add_include_path( const char* p_path, const char *p_sub_path = "" ) {
       12:  246:		std::string s = p_path;
        -:  247:
       30:  248:		for( int i = (int)s.size() - 1; i >= 0; i-- ) {
       60:  249:			if( s[i] == '/' || s[i] == '\\' ) {
       36:  250:				s = s.substr( 0, i );
       12:  251:				break;
        -:  252:			}
        -:  253:		}
       36:  254:		include_path.push_back( s + "/" + p_sub_path );
       12:  255:	}
        -:  256:
        -:  257:	// --------------------------------------------------------------------
       16:  258:	std::string dot( std::string s, int max_length ){
       16:  259:		int length = max_length - s.size();
       16:  260:		std::string s_result = " ";
      124:  261:		for( int i = 0; i < length; i++ ){
      108:  262:			s_result = s_result + ".";
        -:  263:		}
       16:  264:		return s_result;
        -:  265:	}
        -:  266:
        -:  267:	// --------------------------------------------------------------------
        6:  268:	void write( void ) {
        -:  269:		std::string s;
        6:  270:		log << "<< label >>" << std::endl;
        -:  271:		size_t max_label_length = 0;
       54:  272:		for( auto item : dict ){
       16:  273:			if( item.first.size() > max_label_length ){
        -:  274:				max_label_length = item.first.size();
        -:  275:			}
        -:  276:		}
        6:  277:		max_label_length += 3;
       54:  278:		for( auto item : dict ) { 
       64:  279:			s = dot( item.first, max_label_length );
       16:  280:			if( item.second.value_type == CVALUE_TYPE::CV_INTEGER ) {
       32:  281:				log << item.first << s << " " << std::dec << item.second.i << " ( 0x" << std::hex << item.second.i << " )" << std::endl;
        -:  282:			}
    #####:  283:			else if( item.second.value_type == CVALUE_TYPE::CV_STRING ) {
        -:  284:				log << item.first << s << " \"" << item.second.s << "\"" << std::endl;
        -:  285:			}
        -:  286:			else {
        -:  287:				log << item.first << s << " ????" << std::endl;
        -:  288:			}
        -:  289:		}
        -:  290:
       12:  291:		std::ofstream sym_file;
        6:  292:		sym_file.open( "zma.sym", std::ios::out );
        6:  293:		if( !sym_file ){
    #####:  294:			return;
        -:  295:		}
       54:  296:		for( auto item : dict ){
       16:  297:			if( item.second.value_type != CVALUE_TYPE::CV_INTEGER ){
    #####:  298:				continue;
        -:  299:			}
       16:  300:			sym_file << item.first << " equ 0" << std::hex << item.second.i << "h" << std::endl;
        -:  301:		}
        6:  302:		sym_file.close();
        -:  303:	}
        -:  304:};
