        -:    0:Source:../zma_information.hpp
        -:    0:Programs:106
        -:    1:// --------------------------------------------------------------------
        -:    2://	Z80 Macro Assembler dictionary
        -:    3:// ====================================================================
        -:    4://	2019/05/05	t.hara
        -:    5:// --------------------------------------------------------------------
        -:    6:
        -:    7:#pragma once
        -:    8:
        -:    9:#include "zma_error.hpp"
        -:   10:#include "zma_hexfile.hpp"
        -:   11:#include <string>
        -:   12:#include <map>
        -:   13:#include <vector>
        -:   14:#include <fstream>
        -:   15:#include <sstream>
        -:   16:#include <iomanip>
        -:   17:
        -:   18:// --------------------------------------------------------------------
        -:   19:enum class CVALUE_TYPE {
        -:   20:	CV_UNKNOWN = 0x100,
        -:   21:	CV_UNKNOWN_INTEGER = 0x101,
        -:   22:	CV_UNKNOWN_STRING = 0x102,
        -:   23:	CV_INTEGER = 0x1,
        -:   24:	CV_STRING = 0x2,
        -:   25:};
        -:   26:
        -:   27:// --------------------------------------------------------------------
   125948:   28:class CVALUE {
        -:   29:public:
        -:   30:	CVALUE_TYPE value_type;
        -:   31:
        -:   32:	int			i;
        -:   33:	std::string	s;
        -:   34:
        -:   35:	// --------------------------------------------------------------------
   138366:   36:	CVALUE(): value_type( CVALUE_TYPE::CV_UNKNOWN ), i( 0 ), s( "" ) {
        -:   37:	}
        -:   38:
        -:   39:	// --------------------------------------------------------------------
        -:   40:	bool is_unknown( void ) const{
     5083:   41:		return ( ( (int)value_type & 0x100 ) == 0x100 );
        -:   42:	}
        -:   43:
        -:   44:	// --------------------------------------------------------------------
        -:   45:	bool is_integer( void ) const{
    93257:   46:		return ( ( (int)value_type & 0xFF ) == 0x1 );
        -:   47:	}
        -:   48:
        -:   49:	// --------------------------------------------------------------------
        -:   50:	bool is_string( void ) const{
      149:   51:		return ( ( (int)value_type & 0xFF ) == 0x2 );
        -:   52:	}
        -:   53:
        -:   54:	// --------------------------------------------------------------------
        -:   55:	void inherit( CVALUE_TYPE base, CVALUE_TYPE inherit_a, CVALUE_TYPE inherit_b ){
      409:   56:		value_type = (CVALUE_TYPE)( (int)base | ( ( (int)inherit_a | (int)inherit_b ) & 0x100 ) );
        -:   57:	}
        -:   58:};
        -:   59:
        -:   60:// --------------------------------------------------------------------
      206:   61:class CZMA_MACRO_ARG {
        -:   62:public:
        -:   63:	std::string						name;
        -:   64:	bool							is_through;
        -:   65:
        -:   66:	// --------------------------------------------------------------------
       93:   67:	CZMA_MACRO_ARG(): name( "" ), is_through( false ) {
        -:   68:	}
        -:   69:};
        -:   70:
        -:   71:// --------------------------------------------------------------------
        -:   72:class CZMA_MACRO {
        -:   73:public:
        -:   74:	std::vector< CZMA_MACRO_ARG >	parameter_name_list;
        -:   75:	std::vector<class CZMA_PARSE*>	m_text;
        -:   76:};
        -:   77:
        -:   78:// --------------------------------------------------------------------
        -:   79:class CZMA_REPEAT_T {
        -:   80:public:
        -:   81:	std::string						counter_symbol;
        -:   82:	int								counter_end;
        -:   83:	bool							is_counter_end_fixed;
        -:   84:	std::string						scope_name;
        -:   85:	std::vector<class CZMA_PARSE*>	m_text;
        -:   86:
        -:   87:	// --------------------------------------------------------------------
       22:   88:	CZMA_REPEAT_T(): counter_symbol( "" ), counter_end( 0 ), is_counter_end_fixed( false ), scope_name( "" ) {
        -:   89:	}
        -:   90:};
        -:   91:
        -:   92:// --------------------------------------------------------------------
        4:   93:class CZMA_CHAR_SET {
        -:   94:public:
        -:   95:	std::vector< unsigned char >	ascii_to_map;
        -:   96:};
        -:   97:
        -:   98:// --------------------------------------------------------------------
      225:   99:class CZMA_INFORMATION {
        -:  100:public:
        -:  101:	std::map< std::string, CVALUE >	dict;
        -:  102:	std::map< std::string, CVALUE >	*p_sub_dict;
        -:  103:	std::map< std::string, int >	sss_or_ddd_id { { "B", 0 }, { "C", 1 }, { "D", 2 }, { "E", 3 }, { "H", 4 }, { "L", 5 }, { "A", 7 }, };
        -:  104:	std::map< std::string, int >	ix_hl{ { "IXH", 4 }, { "IXL", 5 }, };
        -:  105:	std::map< std::string, int >	iy_hl{ { "IYH", 4 }, { "IYL", 5 }, };
        -:  106:	std::map< std::string, int >	rp_id { { "BC", 0 }, { "DE", 1 }, { "HL", 2 }, { "SP", 3 }, };
        -:  107:	std::map< std::string, int >	ix_rp_id{ { "BC", 0 }, { "DE", 1 }, { "IX", 2 }, { "SP", 3 }, };
        -:  108:	std::map< std::string, int >	iy_rp_id{ { "BC", 0 }, { "DE", 1 }, { "IY", 2 }, { "SP", 3 }, };
        -:  109:	std::map< std::string, int >	rp_with_af_id{ { "BC", 0 }, { "DE", 1 }, { "HL", 2 }, {"AF", 3 }, };
        -:  110:	std::map< std::string, int >	ccc_id{ { "NZ", 0 }, { "Z", 1 }, { "NC", 2 }, { "C", 3 }, { "PO", 4 }, { "PE", 5 }, { "P", 6 }, { "M", 7 }, };
        -:  111:	std::map< std::string, int >	cc2_id{ { "NZ", 0 }, { "Z", 1 }, { "NC", 2 }, { "C", 3 }, };
        -:  112:	std::vector< std::string >		scope;
        -:  113:	std::vector< std::string >		include_path;
        -:  114:
        -:  115:	unsigned int auto_label_index;
        -:  116:
        -:  117:	bool		defs_is_space;	//	false: DEFS‹^Ž—–½—ß‚Í•¶Žš—ñ”z’u(default), true: DEFS‹^Ž—–½—ß‚Í—ÌˆæŠm•Û
        -:  118:
        -:  119:	enum class OUTPUT_TYPE{
        -:  120:		CZMA_BINARY,
        -:  121:		CZMA_INTELHEX,
        -:  122:	};
        -:  123:	OUTPUT_TYPE	output_type;
        -:  124:	CZMA_HEXFILE_WRITER hexfile;
        -:  125:
        -:  126:	enum class BLOCK_TYPE_T {
        -:  127:		CZMA_INFO_UNKNOWN,
        -:  128:		CZMA_INFO_MACRO_BLOCK,
        -:  129:		CZMA_INFO_REPEAT_BLOCK,
        -:  130:		CZMA_INFO_IF_BLOCK,
        -:  131:	};
        -:  132:	std::map< std::string, BLOCK_TYPE_T >	block_begin_table{ { "REPEAT", { BLOCK_TYPE_T::CZMA_INFO_REPEAT_BLOCK } } };
        -:  133:	std::map< std::string, BLOCK_TYPE_T >	block_end_table{ { "ENDM", BLOCK_TYPE_T::CZMA_INFO_MACRO_BLOCK }, { "ENDR", BLOCK_TYPE_T::CZMA_INFO_REPEAT_BLOCK } };
        -:  134:	bool is_updated;
        -:  135:	bool is_block_processing;
        -:  136:	BLOCK_TYPE_T block_type;
        -:  137:	std::vector<class CZMA_PARSE*>			*p_text;
        -:  138:
        -:  139:	CZMA_MACRO* p_macro;
        -:  140:	std::map< std::string, CZMA_MACRO* >	macro_list;
        -:  141:	std::map< std::string, std::string >	parameter_list;
        -:  142:
        -:  143:	CZMA_REPEAT_T*							p_repeat;
        -:  144:
        -:  145:	std::map< std::string, CZMA_CHAR_SET >	char_set_list;
        -:  146:	CZMA_CHAR_SET*							p_char_set;
        -:  147:	std::string								s_char_set;
        -:  148:
        -:  149:	CZMA_ERROR								error;
        -:  150:	std::ofstream							log;
        -:  151:
        -:  152:	// --------------------------------------------------------------------
       77:  153:	CZMA_INFORMATION(): is_updated( false ), is_block_processing( false ), 
        -:  154:			block_type( BLOCK_TYPE_T::CZMA_INFO_UNKNOWN  ), auto_label_index( 0 ), 
        -:  155:			p_text( nullptr ), p_macro( nullptr ), 
        -:  156:			p_sub_dict( nullptr ),
        -:  157:			p_repeat( nullptr ), p_char_set( nullptr ), defs_is_space(false),
     2233:  158:			output_type( OUTPUT_TYPE::CZMA_BINARY ) {
       77:  159:	}
        -:  160:
        -:  161:	// --------------------------------------------------------------------
      219:  162:	void clear( void ){
      219:  163:		scope.clear();
      219:  164:		p_char_set = nullptr;
      219:  165:		s_char_set = "DEFAULT";
      219:  166:		is_updated = false;
      219:  167:		is_block_processing = false;
      219:  168:		auto_label_index = 0;
      219:  169:	}
        -:  170:
        -:  171:	// --------------------------------------------------------------------
        -:  172:	unsigned int get_auto_label_index( void ) {
      223:  173:		return auto_label_index++;
        -:  174:	}
        -:  175:
        -:  176:	// --------------------------------------------------------------------
        -:  177:	std::string get_scope_path( void );
        -:  178:
        -:  179:	// --------------------------------------------------------------------
        -:  180:	bool get_label_value( CVALUE &result, std::string word );
        -:  181:
        -:  182:	// --------------------------------------------------------------------
        -:  183:	bool is_sss_or_ddd( std::string word ) const {
     5471:  184:		int d = (int)sss_or_ddd_id.count( word );
        -:  185:		return d;
        -:  186:	}
        -:  187:
        -:  188:	// --------------------------------------------------------------------
        -:  189:	bool is_ix_hl( std::string word ) const {
     1900:  190:		int d = (int)ix_hl.count( word );
        -:  191:		return d;
        -:  192:	}
        -:  193:
        -:  194:	// --------------------------------------------------------------------
        -:  195:	bool is_iy_hl( std::string word ) const {
     1284:  196:		int d = (int)iy_hl.count( word );
        -:  197:		return d;
        -:  198:	}
        -:  199:
        -:  200:	// --------------------------------------------------------------------
        -:  201:	bool is_rp( std::string word ) const {
      984:  202:		return (int)rp_id.count( word );
        -:  203:	}
        -:  204:
        -:  205:	// --------------------------------------------------------------------
        -:  206:	bool is_ix_rp( std::string word ) const{
       24:  207:		return (int)ix_rp_id.count( word );
        -:  208:	}
        -:  209:
        -:  210:	// --------------------------------------------------------------------
        -:  211:	bool is_iy_rp( std::string word ) const{
       24:  212:		return (int)iy_rp_id.count( word );
        -:  213:	}
        -:  214:
        -:  215:	// --------------------------------------------------------------------
        -:  216:	bool is_rp_with_af( std::string word ) const {
       36:  217:		return (int)rp_with_af_id.count( word );
        -:  218:	}
        -:  219:
        -:  220:	// --------------------------------------------------------------------
        -:  221:	bool is_ccc( std::string word ) const {
       81:  222:		return (int)ccc_id.count( word );
        -:  223:	}
        -:  224:
        -:  225:	// --------------------------------------------------------------------
        -:  226:	bool is_cc2( std::string word ) const {
       27:  227:		return (int)cc2_id.count( word );
        -:  228:	}
        -:  229:
        -:  230:	// --------------------------------------------------------------------
        -:  231:	void add_include_path( const char *p_path, const char *p_sub_path = "" );
        -:  232:
        -:  233:	// --------------------------------------------------------------------
        -:  234:	std::string dot( std::string s, int max_length );
        -:  235:
        -:  236:	// --------------------------------------------------------------------
        -:  237:	void write( void );
        -:  238:};
