        -:    0:Source:../sub/zma_parse_process_bit.cpp
        -:    0:Programs:106
        -:    1:// --------------------------------------------------------------------
        -:    2://	Z80 Macro Assembler parse
        -:    3:// ====================================================================
        -:    4://	2019/05/04	t.hara
        -:    5:// --------------------------------------------------------------------
        -:    6:
        -:    7:#include "zma_parse.hpp"
        -:    8:#include "zma_text.hpp"
        -:    9:#include "zma_parse_process.hpp"
        -:   10:#include <string>
        -:   11:#include <cctype>
        -:   12:#include <iostream>
        -:   13:#include <fstream>
        -:   14:#include <sstream>
        -:   15:#include <algorithm>
        -:   16:
        -:   17:#include "zma_parse_process_bit.hpp"
        -:   18:
        -:   19:// --------------------------------------------------------------------
      486:   20:bool CZMA_PARSE_BIT::process( CZMA_INFORMATION& info, CZMA_PARSE* p_last_line ) {
        -:   21:
      486:   22:	update_flags( &info, p_last_line );
      486:   23:	if( this->opecode_bit_source8( info, 0x40, true ) ) {
        -:   24:		//	log
      483:   25:		if( !this->is_analyze_phase ) {
      322:   26:			log.write_line_infomation( this->line_no, this->code_address, this->file_address, get_line() );
      322:   27:			if( data.size() == 2 && (data[1] & 0x07) != 0x06 ) {
      336:   28:				log.write_cycle_information( 10, 2 );			//	BIT b,r
        -:   29:			}
       49:   30:			else if( data.size() == 2 ) {
       32:   31:				log.write_cycle_information( 14, 5 );			//	BIT b,[HL]
        -:   32:			}
        -:   33:			else {
       66:   34:				log.write_cycle_information( 22, 7 );			//	BIT b,[IX+o]
        -:   35:			}
      161:   36:			log.write_dump( this->code_address, this->file_address, this->data );
      161:   37:			log.write_separator();
        -:   38:		}
        -:   39:		return check_all_fixed();
        -:   40:	}
       15:   41:	put_error( CZMA_ERROR::get( CZMA_ERROR_CODE::ILLEGAL_OPERAND ) );
        3:   42:	return false;
      158:   43:}
        -:   44:
