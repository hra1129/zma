        -:    0:Source:../sub/zma_parse_process_include.cpp
        -:    0:Programs:103
        -:    1:// --------------------------------------------------------------------
        -:    2://	Z80 Macro Assembler parse
        -:    3:// ====================================================================
        -:    4://	2019/05/04	t.hara
        -:    5:// --------------------------------------------------------------------
        -:    6:
        -:    7:#include "zma_parse.hpp"
        -:    8:#include "zma_text.hpp"
        -:    9:#include "zma_parse_process.hpp"
        -:   10:#include <string>
        -:   11:#include <cctype>
        -:   12:#include <iostream>
        -:   13:#include <fstream>
        -:   14:#include <sstream>
        -:   15:#include <algorithm>
        -:   16:
        -:   17:// --------------------------------------------------------------------
       19:   18:bool CZMA_PARSE_INCLUDE::write_output_and_log( CZMA_INFORMATION& info, std::ofstream* f ) {
        -:   19:
       43:   20:	for( auto line : log ) {
       24:   21:		info.log << line << " begin" << std::endl;
        -:   22:	}
       19:   23:	bool result = this->text.write( info, f );
       43:   24:	for( auto line : log ) {
       24:   25:		info.log << line << " end" << std::endl;
        -:   26:	}
       19:   27:	return result;
        -:   28:}
        -:   29:
        -:   30:// --------------------------------------------------------------------
       62:   31:bool CZMA_PARSE_INCLUDE::process( CZMA_INFORMATION& info, CZMA_PARSE* p_last_line ) {
        -:   32:	std::string s;
        -:   33:	int i;
        -:   34:	unsigned int success_count;
        -:   35:	CVALUE path;
      124:   36:	std::ifstream f;
        -:   37:	bool is_open;
        -:   38:
       62:   39:	update_flags( &info, p_last_line );
      124:   40:	if( words.size() < 2 ) {
        6:   41:		put_error( "Must be set include file name." );
        3:   42:		return false;
        -:   43:	}
       59:   44:	i = this->expression( info, 1, path, false );
       59:   45:	if( i == 0 ) {
        6:   46:		put_error( "Invalid expression." );
        3:   47:		return false;
        -:   48:	}
       56:   49:	if( path.value_type != CVALUE_TYPE::CV_STRING ) {
        6:   50:		put_error( "Invalid parameter." );
        3:   51:		return false;
        -:   52:	}
      106:   53:	if( i < (int)words.size() ) {
        6:   54:		put_error( "INCLUDE command has only one parameter." );
        3:   55:		return false;
        -:   56:	}
       50:   57:	if( !this->is_loaded ) {
        -:   58:		is_open = false;
       28:   59:		for( auto include_path : info.include_path ) {
       75:   60:			s = include_path + "/" + path.s;
       25:   61:			f.open( s.c_str() );
       25:   62:			if( f ) {
       14:   63:				f.close();
       14:   64:				this->s_file_name = s;
       28:   65:				if( this->text.load( info, this->s_file_name.c_str() ) ) {
       14:   66:					this->is_loaded = true;
        -:   67:					is_open = true;
        -:   68:					break;
        -:   69:				}
        -:   70:			}
        -:   71:		}
        -:   72:		if( !is_open ) {
       12:   73:			put_error( std::string( "Cannot open the file '" ) + path.s + "'." );
        3:   74:			return false;
        -:   75:		}
       14:   76:		info.is_updated = true;
        -:   77:	}
        -:   78:	//	log
       47:   79:	if( !this->is_analyze_phase ) {
       28:   80:		log.write_line_infomation( this->line_no, this->code_address, this->file_address, get_line() );
        -:   81:	}
       47:   82:	if( p_last_line->is_fixed_file_address() && p_last_line->is_fixed_code_size() ) {
       45:   83:		this->file_address = p_last_line->get_file_address() + p_last_line->get_code_size();
        -:   84:	}
       47:   85:	p_last_line = this->text.process( info, success_count, p_last_line, !this->is_analyze_phase );
       47:   86:	if( p_last_line->is_fixed_next_code_address() ) {
       43:   87:		this->next_code_address = p_last_line->get_next_code_address();
       43:   88:		this->code_size = p_last_line->get_file_address() + p_last_line->get_code_size() - this->file_address;
        -:   89:	}
       47:   90:	if( !this->is_data_fixed ) {
      288:   91:		for( auto p : text.m_text ) {
      241:   92:			this->is_data_fixed = this->is_data_fixed && p->check_data_fixed();
        -:   93:		}
       47:   94:		if( this->is_data_fixed ) {
    #####:   95:			info.is_updated = true;
        -:   96:		}
        -:   97:	}
       47:   98:	if( this->code_size == -1 ) {
       27:   99:		for( auto p : text.m_text ) {
       23:  100:			if( this->code_size != -1 && p->is_fixed_code_size() ) {
    #####:  101:				this->code_size = this->code_size + p->get_code_size();
        -:  102:			}
        -:  103:			else {
       23:  104:				this->code_size = -1;
        -:  105:			}
        -:  106:		}
        4:  107:		if( this->code_size != -1 ) {
    #####:  108:			info.is_updated = true;
        -:  109:		}
        -:  110:	}
       94:  111:	if( success_count < this->text.m_text.size() ) {
        -:  112:		return false;
        -:  113:	}
        -:  114:	return check_all_fixed();
      138:  115:}
