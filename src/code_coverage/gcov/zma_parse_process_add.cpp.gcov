        -:    0:Source:../sub/zma_parse_process_add.cpp
        -:    0:Programs:104
        -:    1:// --------------------------------------------------------------------
        -:    2://	Z80 Macro Assembler parse
        -:    3:// ====================================================================
        -:    4://	2019/05/04	t.hara
        -:    5:// --------------------------------------------------------------------
        -:    6:
        -:    7:#include "zma_parse.hpp"
        -:    8:#include "zma_text.hpp"
        -:    9:#include "zma_parse_process.hpp"
        -:   10:#include <string>
        -:   11:#include <cctype>
        -:   12:#include <iostream>
        -:   13:#include <fstream>
        -:   14:#include <sstream>
        -:   15:#include <algorithm>
        -:   16:
        -:   17:// --------------------------------------------------------------------
       81:   18:bool CZMA_PARSE_ADD::process( CZMA_INFORMATION& info, CZMA_PARSE* p_last_line ) {
        -:   19:
       81:   20:	update_flags( &info, p_last_line );
       81:   21:	if( this->opecode_a_source8( info, 0x80 ) ) {
        -:   22:		//	log
       33:   23:		if( !this->is_analyze_phase ) {
       22:   24:			log.write_line_infomation( this->line_no, this->code_address, this->file_address, get_line() );
       11:   25:			if( words[3].size() > 1 ) {
        8:   26:				log.write_cycle_information( 10, 2 );			//	ADD A, IXh
        -:   27:			}
        -:   28:			else {
       14:   29:				log.write_cycle_information( 5, 1 );			//	ADD A, r
        -:   30:			}
       11:   31:			log.write_dump( this->code_address, this->file_address, this->data );
       11:   32:			log.write_separator();
        -:   33:		}
        -:   34:		return check_all_fixed();
        -:   35:	}
       48:   36:	if( this->opecode_a_memory_hl( info, 0x86 ) ) {
        -:   37:		//	log
        9:   38:		if( !this->is_analyze_phase ) {
        6:   39:			log.write_line_infomation( this->line_no, this->code_address, this->file_address, get_line() );
        6:   40:			if( words[4] == "HL" ) {
        2:   41:				log.write_cycle_information( 8, 4 );			//	ADD A, [HL]
        -:   42:			}
        -:   43:			else {
        4:   44:				log.write_cycle_information( 21, 7 );			//	ADD A, [IX+o]
        -:   45:			}
        3:   46:			log.write_dump( this->code_address, this->file_address, this->data );
        3:   47:			log.write_separator();
        -:   48:		}
        -:   49:		return check_all_fixed();
        -:   50:	}
       39:   51:	if( this->opecode_a_n8( info, 0xC6 ) ) {
        -:   52:		//	log
        3:   53:		if( !this->is_analyze_phase ) {
        2:   54:			log.write_line_infomation( this->line_no, this->code_address, this->file_address, get_line() );
        2:   55:			log.write_cycle_information( 8, 2 );			//	ADD A, n
        1:   56:			log.write_dump( this->code_address, this->file_address, this->data );
        1:   57:			log.write_separator();
        -:   58:		}
        -:   59:		return check_all_fixed();
        -:   60:	}
       36:   61:	if( this->opecode_hl_source16( info, 0x09 ) ) {
        -:   62:		//	log
       36:   63:		if( !this->is_analyze_phase ) {
       24:   64:			log.write_line_infomation( this->line_no, this->code_address, this->file_address, get_line() );
       24:   65:			if( words[1] == "HL" ) {
        8:   66:				log.write_cycle_information( 12, 1 );			//	ADD HL, rr
        -:   67:			}
        -:   68:			else {
       16:   69:				log.write_cycle_information( 17, 2 );			//	ADD IX, rr
        -:   70:			}
       12:   71:			log.write_dump( this->code_address, this->file_address, this->data );
       12:   72:			log.write_separator();
        -:   73:		}
        -:   74:		return check_all_fixed();
        -:   75:	}
    #####:   76:	put_error( CZMA_ERROR::get( CZMA_ERROR_CODE::ILLEGAL_OPERAND ) );
    #####:   77:	return false;
       12:   78:}
        -:   79:
