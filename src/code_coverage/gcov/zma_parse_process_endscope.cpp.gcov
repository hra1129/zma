        -:    0:Source:../sub/zma_parse_process_endscope.cpp
        -:    0:Programs:106
        -:    1:// --------------------------------------------------------------------
        -:    2://	Z80 Macro Assembler parse
        -:    3:// ====================================================================
        -:    4://	2019/05/04	t.hara
        -:    5:// --------------------------------------------------------------------
        -:    6:
        -:    7:#include "zma_parse.hpp"
        -:    8:#include "zma_text.hpp"
        -:    9:#include "zma_parse_process.hpp"
        -:   10:#include <string>
        -:   11:#include <cctype>
        -:   12:#include <iostream>
        -:   13:#include <fstream>
        -:   14:#include <sstream>
        -:   15:#include <algorithm>
        -:   16:
        -:   17:#include "zma_parse_process_endscope.hpp"
        -:   18:
        -:   19:// --------------------------------------------------------------------
       42:   20:bool CZMA_PARSE_ENDSCOPE::process( CZMA_INFORMATION& info, CZMA_PARSE* p_last_line ) {
        -:   21:	std::string s, s_scope;
        -:   22:
       42:   23:	update_flags( &info, p_last_line );
       84:   24:	if( words.size() > 1 ) {
       15:   25:		put_error( CZMA_ERROR::get( CZMA_ERROR_CODE::TOO_MANY_PARAMETERS ) );
        3:   26:		return false;
        -:   27:	}
       39:   28:	this->is_data_fixed = true;
        -:   29:	this->set_code_size( &info, 0 );
       78:   30:	if( info.scope.size() < 1 ) {
       15:   31:		put_error( CZMA_ERROR::get( CZMA_ERROR_CODE::INVALID_COMMAND ) );
        3:   32:		return false;
        -:   33:	}
       72:   34:	if( info.scope[ info.scope.size() - 1 ][0] == '@' ) {
       15:   35:		put_error( CZMA_ERROR::get( CZMA_ERROR_CODE::INVALID_COMMAND ) );
        3:   36:		return false;
        -:   37:	}
       66:   38:	s_scope = info.get_scope_path();
        -:   39:	info.scope.pop_back();
        -:   40:
        -:   41:	//	log
       33:   42:	if( !is_analyze_phase ) {
       22:   43:		log.write_line_infomation( this->line_no, this->code_address, this->file_address, get_line() );
       22:   44:		log.write_message( "Exit scope: " + s_scope );
       11:   45:		log.write_separator();
        -:   46:	}
        -:   47:	return check_all_fixed();
      170:   48:}
        -:   49:
