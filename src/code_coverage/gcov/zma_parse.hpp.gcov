        -:    0:Source:../zma_parse.hpp
        -:    0:Programs:105
        -:    1:// --------------------------------------------------------------------
        -:    2://	Z80 Macro Assembler parse
        -:    3:// ====================================================================
        -:    4://	2019/05/04	t.hara
        -:    5:// --------------------------------------------------------------------
        -:    6:
        -:    7:#pragma once
        -:    8:
        -:    9:#include <string>
        -:   10:#include <vector>
        -:   11:#include <map>
        -:   12:#include "zma_information.hpp"
        -:   13:#include "zma_logger.hpp"
        -:   14:#include "zma_error.hpp"
        -:   15:
        -:   16:class CZMA_PARSE {
        -:   17:protected:
        -:   18:	std::vector<unsigned char> data;
        -:   19:	int	code_address;
        -:   20:	int	file_address;
        -:   21:	int	code_size;
        -:   22:	int next_code_address;
        -:   23:	bool is_data_fixed;
        -:   24:	bool is_label_search_state;
        -:   25:	const char* p_file_name;
        -:   26:	int line_no;
        -:   27:	bool is_analyze_phase;
        -:   28:	static int number_of_error;
        -:   29:	int number_of_error_for_this;
        -:   30:	std::string last_error;
        -:   31:	CZMA_LOG log;
        -:   32:
        -:   33:	bool is_structure_error;
        -:   34:	std::string structure_error;
        -:   35:
        -:   36:	static std::string delete_head_space( std::string s );
        -:   37:
        -:   38:	virtual bool update_flags( CZMA_INFORMATION *p_info, const CZMA_PARSE* p_last_line );
        -:   39:	bool check_location_hl( int index );
        -:   40:	int check_location_ix( int index );
        -:   41:	int check_location_iy( int index );
        -:   42:	int relative_address( CZMA_INFORMATION &info, int index );
        -:   43:	std::string get_word( int index );
        -:   44:	void log_data_dump( void );
        -:   45:
        -:   46:	// --------------------------------------------------------------------
        -:   47:	bool operator_single( CZMA_INFORMATION& info, int &index, CVALUE&result, bool do_char_map );
        -:   48:	bool operator_mul_div( CZMA_INFORMATION& info, int& index, CVALUE& result, bool do_char_map );
        -:   49:	bool operator_add_sub( CZMA_INFORMATION& info, int& index, CVALUE& result, bool do_char_map );
        -:   50:	bool operator_shift( CZMA_INFORMATION& info, int& index, CVALUE& result, bool do_char_map );
        -:   51:	bool operator_compare( CZMA_INFORMATION& info, int& index, CVALUE& result, bool do_char_map );
        -:   52:	bool operator_equal( CZMA_INFORMATION& info, int& index, CVALUE& result, bool do_char_map );
        -:   53:	bool operator_bit_and( CZMA_INFORMATION& info, int& index, CVALUE& result, bool do_char_map );
        -:   54:	bool operator_bit_xor( CZMA_INFORMATION& info, int& index, CVALUE& result, bool do_char_map );
        -:   55:	bool operator_bit_or( CZMA_INFORMATION& info, int& index, CVALUE& result, bool do_char_map );
        -:   56:	bool operator_logical_and( CZMA_INFORMATION& info, int& index, CVALUE& result, bool do_char_map );
        -:   57:	bool operator_logical_or( CZMA_INFORMATION& info, int& index, CVALUE& result, bool do_char_map );
        -:   58:
        -:   59:	// --------------------------------------------------------------------
        -:   60:	//	命令の引数を解釈する関数
        -:   61:	//
        -:   62:	//	返値:
        -:   63:	//		true ..... 所定の引数並びにマッチ 又は すでにオペコード生成済み
        -:   64:	//		false .... 所定の引数並びにマッチしない
        -:   65:	//	備考:
        -:   66:	//		返値はオペコードを生成し終えたかどうかの判定結果ではないことに注意。
        -:   67:	//		オペコードを生成し終えたかどうかは、is_data_fixed を参照。
        -:   68:	//		オペコードを生成し終えている場合は、引数並びをチェックせずに true を返す。
        -:   69:	// --------------------------------------------------------------------
        -:   70:	bool opecode( CZMA_INFORMATION& info, unsigned char op1, int op2 = -1 );
        -:   71:	bool opecode_a_i_r( CZMA_INFORMATION& info );
        -:   72:	bool opecode_destination8_source8( CZMA_INFORMATION& info, unsigned char op1 );
        -:   73:	bool opecode_a_source8( CZMA_INFORMATION& info, unsigned char op1 );
        -:   74:	bool opecode_destination8_c( CZMA_INFORMATION& info, unsigned char op1, unsigned char op1c, unsigned char op2 );
        -:   75:	bool opecode_c_source8( CZMA_INFORMATION& info, unsigned char op1, unsigned char op1c, unsigned char op2 );
        -:   76:	bool opecode_bit_source8( CZMA_INFORMATION& info, unsigned char op1, bool no_3operand = false );
        -:   77:	bool opecode_hl_source16( CZMA_INFORMATION& info, unsigned char op1 );
        -:   78:	bool opecode_hl_source16_witnout_ix( CZMA_INFORMATION& info, unsigned char op1, unsigned char op2 );
        -:   79:	bool opecode_destination8_memory_hl( CZMA_INFORMATION& info, unsigned char op1 );
        -:   80:	bool opecode_a_memory_hl( CZMA_INFORMATION& info, unsigned char op1 );
        -:   81:	bool opecode_memory_hl( CZMA_INFORMATION& info, unsigned char op1 );
        -:   82:	bool opecode_destination8_n8( CZMA_INFORMATION& info, unsigned char op1 );
        -:   83:	bool opecode_a_n8( CZMA_INFORMATION& info, unsigned char op1 );
        -:   84:	bool opecode_n8( CZMA_INFORMATION &info, unsigned char op1 );
        -:   85:	bool opecode_register16( CZMA_INFORMATION& info, unsigned char op1 );
        -:   86:	bool opecode_destination16_n16( CZMA_INFORMATION& info, unsigned char op1 );
        -:   87:	bool opecode_destination16_memory16( CZMA_INFORMATION& info, unsigned char op1, unsigned char op1c );
        -:   88:	bool opecode_memory_hl_source8( CZMA_INFORMATION& info, unsigned char op1 );
        -:   89:	bool opecode_memory_hl_n8( CZMA_INFORMATION& info, unsigned char op1 );
        -:   90:	bool opecode_memory_bc_a( CZMA_INFORMATION& info, unsigned char op1 );
        -:   91:	bool opecode_memory16_source16( CZMA_INFORMATION& info, unsigned char op1, unsigned char op1c, unsigned char op2 );
        -:   92:	bool opecode_a_memory_bc( CZMA_INFORMATION& info, unsigned char op1 );
        -:   93:	bool opecode_sp_hl( CZMA_INFORMATION& info, unsigned char op1 );
        -:   94:	bool opecode_register16_with_af( CZMA_INFORMATION& info, unsigned char op1 );
        -:   95:	bool opecode_source8( CZMA_INFORMATION& info, unsigned char op1, int op2 = -1 );
        -:   96:	bool opecode_destination8( CZMA_INFORMATION& info, unsigned char op1, int op2 = -1 );
        -:   97:	bool opecode_condition_address( CZMA_INFORMATION& info, unsigned char op1, unsigned char op1c );
        -:   98:	bool opecode_condition_offset( CZMA_INFORMATION& info, unsigned char op1, unsigned char op1c );
        -:   99:	bool opecode_condition( CZMA_INFORMATION& info, unsigned char op1, unsigned char op1c );
        -:  100:	bool opecode_mulub( CZMA_INFORMATION& info, unsigned char op1, int op2 );
        -:  101:	bool opecode_muluw( CZMA_INFORMATION& info );
        -:  102:
        -:  103:public:
        -:  104:	std::string get_line( void );
        -:  105:	void put_error( std::string message );
        -:  106:	void put_message( std::string message );
        -:  107:	void put_structure_error( std::string message );
        -:  108:	std::vector<std::string> words;
        -:  109:	int expression( CZMA_INFORMATION& info, int index, CVALUE& result, bool do_char_map = true );
        -:  110:	std::string escape( const std::string &s );
        -:  111:
        -:  112:	static std::vector<std::string> get_word_split( std::string s );
        -:  113:
        -:  114:	// ----------------------------------------------------------------
        -:  115:	//	Constructor
        -:  116:	// ----------------------------------------------------------------
        -:  117:	CZMA_PARSE( std::vector<std::string> words, const char* p_file_name, int line_no );
        -:  118:	static CZMA_PARSE* create( CZMA_INFORMATION &info, std::vector<std::string> &words, const char* p_file_name, int line_no );
        -:  119:
        -:  120:	// ----------------------------------------------------------------
        -:  121:	//	Destructor
        -:  122:	// ----------------------------------------------------------------
    15558:  123:	~CZMA_PARSE() {
     7779:  124:	}
        -:  125:
        -:  126:	// ----------------------------------------------------------------
        -:  127:	//	Process method
        -:  128:	// ----------------------------------------------------------------
        -:  129:	virtual bool process( CZMA_INFORMATION &info, CZMA_PARSE* p_last_line = NULL ) = 0;
        -:  130:
        -:  131:	// ----------------------------------------------------------------
        -:  132:	bool check_all_fixed() const {
    25923:  133:		return is_fixed_code_address() && is_fixed_file_address () && is_fixed_code_size() && check_data_fixed();
        -:  134:	}
        -:  135:
        -:  136:	// ----------------------------------------------------------------
        -:  137:	bool check_data_fixed() const {
        -:  138:		return is_data_fixed;
        -:  139:	}
        -:  140:
        -:  141:	// ----------------------------------------------------------------
        -:  142:	//	Set method
        -:  143:	// ----------------------------------------------------------------
        -:  144:	void set_label_search_state( bool state ) {
        -:  145:		this->is_label_search_state = state;
        -:  146:	}
        -:  147:
        -:  148:	// --------------------------------------------------------------------
        -:  149:	void set_code_address( CZMA_INFORMATION* p_info, unsigned int new_code_address ) {
    26244:  150:		if( this->code_address == -1 ) {
     8393:  151:			p_info->is_updated = true;
        -:  152:		}
    26244:  153:		this->code_address = new_code_address;
        -:  154:	}
        -:  155:
        -:  156:	// ----------------------------------------------------------------
        -:  157:	void set_file_address( CZMA_INFORMATION* p_info, unsigned int new_file_address ) {
    26156:  158:		if( this->file_address == -1 ) {
     8347:  159:			p_info->is_updated = true;
        -:  160:		}
    26156:  161:		this->file_address = new_file_address;
        -:  162:	}
        -:  163:
        -:  164:	// ----------------------------------------------------------------
        -:  165:	void set_code_size( CZMA_INFORMATION* p_info, unsigned int new_code_size ) {
    17119:  166:		if( this->code_size != (int)new_code_size ) {
     8385:  167:			p_info->is_updated = true;
     8385:  168:			this->code_size = new_code_size;
        -:  169:		}
    17125:  170:		if( this->is_fixed_code_address() ) {
    16356:  171:			if( this->next_code_address == -1 ) {
     7946:  172:				p_info->is_updated = true;
        -:  173:			}
    16356:  174:			this->next_code_address = this->code_address + new_code_size;
        -:  175:		}
        -:  176:	}
        -:  177:
        -:  178:	// --------------------------------------------------------------------
        -:  179:	void set_output_mode( void ) {
     8624:  180:		this->is_analyze_phase = false;
        -:  181:	}
        -:  182:
        -:  183:	// --------------------------------------------------------------------
        -:  184:	const char *get_file_name( void ) {
        -:  185:		return p_file_name;
        -:  186:	}
        -:  187:
        -:  188:	// ----------------------------------------------------------------
        -:  189:	//	Get method
        -:  190:	// ----------------------------------------------------------------
        -:  191:	bool is_fixed_code_address() const {
        -:  192:		return (code_address != -1);
        -:  193:	}
        -:  194:
        -:  195:	// ----------------------------------------------------------------
        -:  196:	bool is_fixed_next_code_address() const {
        -:  197:		return (next_code_address != -1);
        -:  198:	}
        -:  199:
        -:  200:	// ----------------------------------------------------------------
        -:  201:	bool is_fixed_file_address() const {
        -:  202:		return (file_address != -1);
        -:  203:	}
        -:  204:
        -:  205:	// ----------------------------------------------------------------
        -:  206:	bool is_fixed_code_size() const {
        -:  207:		return (code_size != -1);
        -:  208:	}
        -:  209:
        -:  210:	// ----------------------------------------------------------------
        -:  211:	int get_code_address() const {
        -:  212:		return code_address;
        -:  213:	}
        -:  214:
        -:  215:	// ----------------------------------------------------------------
        -:  216:	int get_next_code_address() const {
        -:  217:		return next_code_address;
        -:  218:	}
        -:  219:
        -:  220:	// ----------------------------------------------------------------
        -:  221:	int get_file_address() const {
        -:  222:		return file_address;
        -:  223:	}
        -:  224:
        -:  225:	// ----------------------------------------------------------------
        -:  226:	int get_code_size() const {
        -:  227:		return code_size;
        -:  228:	}
        -:  229:
        -:  230:	// ----------------------------------------------------------------
        -:  231:	int get_line_no() const {
        -:  232:		return line_no;
        -:  233:	}
        -:  234:
        -:  235:	// ----------------------------------------------------------------
        -:  236:	static int get_number_of_errors() {
       94:  237:		return number_of_error;
        -:  238:	}
        -:  239:
        -:  240:	// ----------------------------------------------------------------
        -:  241:	virtual bool write_output_and_log( CZMA_INFORMATION& info, std::ofstream *f );
        -:  242:
        -:  243:	// ----------------------------------------------------------------
    27130:  244:	virtual bool is_parse_error( void ) {
    27130:  245:		return false;
        -:  246:	}
        -:  247:};
