        -:    0:Source:../sub/zma_parse_process_defs.cpp
        -:    0:Programs:103
        -:    1:// --------------------------------------------------------------------
        -:    2://	Z80 Macro Assembler parse
        -:    3:// ====================================================================
        -:    4://	2019/05/04	t.hara
        -:    5:// --------------------------------------------------------------------
        -:    6:
        -:    7:#include "zma_parse.hpp"
        -:    8:#include "zma_text.hpp"
        -:    9:#include "zma_parse_process.hpp"
        -:   10:#include <string>
        -:   11:#include <cctype>
        -:   12:#include <iostream>
        -:   13:#include <fstream>
        -:   14:#include <sstream>
        -:   15:#include <algorithm>
        -:   16:
        -:   17:// --------------------------------------------------------------------
       32:   18:bool CZMA_PARSE_DEFS::process( CZMA_INFORMATION& info, CZMA_PARSE* p_last_line ) {
        -:   19:	CVALUE v;
        -:   20:	int index;
        -:   21:
       32:   22:	update_flags( &info, p_last_line );
       32:   23:	index = this->expression( info, 1, v );
       32:   24:	if( index == 0 ) {
    #####:   25:		put_error( "Illegal expression." );
    #####:   26:		return false;
        -:   27:	}
       64:   28:	if( index < ( int) words.size() ) {
    #####:   29:		put_error( "Illegal parameter." );
    #####:   30:		return false;
        -:   31:	}
       64:   32:	if( v.is_unknown() ){
    #####:   33:		put_error( "Illegal parameter." );
    #####:   34:		return false;
        -:   35:	}
       32:   36:	if( v.is_integer() ) {
    #####:   37:		v.value_type = CVALUE_TYPE::CV_STRING;
    #####:   38:		v.s = std::to_string( v.i );
        -:   39:	}
       32:   40:	this->set_code_size( &info, (unsigned int)v.s.size() );
       32:   41:	if( !this->is_data_fixed ) {
       62:   42:		for( auto c : v.s ) {
      104:   43:			data.push_back( c );
        -:   44:		}
       10:   45:		this->is_data_fixed = true;
        -:   46:	}
        -:   47:	//	log
       32:   48:	if( !this->is_analyze_phase ) {
       20:   49:		log.write_line_infomation( this->line_no, this->code_address, this->file_address, get_line() );
       10:   50:		log.write_dump( this->code_address, this->file_address, this->data );
       10:   51:		log.write_separator();
        -:   52:	}
        -:   53:	return check_all_fixed();
       12:   54:}
        -:   55:
