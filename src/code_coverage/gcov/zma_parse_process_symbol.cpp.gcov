        -:    0:Source:../sub/zma_parse_process_symbol.cpp
        -:    0:Programs:106
        -:    1:// --------------------------------------------------------------------
        -:    2://	Z80 Macro Assembler parse
        -:    3:// ====================================================================
        -:    4://	2019/05/04	t.hara
        -:    5:// --------------------------------------------------------------------
        -:    6:
        -:    7:#include "zma_parse.hpp"
        -:    8:#include "zma_text.hpp"
        -:    9:#include "zma_parse_process.hpp"
        -:   10:#include <string>
        -:   11:#include <cctype>
        -:   12:#include <iostream>
        -:   13:#include <fstream>
        -:   14:#include <sstream>
        -:   15:#include <algorithm>
        -:   16:
        -:   17:#include "zma_parse_process_symbol.hpp"
        -:   18:
        -:   19:// --------------------------------------------------------------------
       54:   20:bool CZMA_PARSE_SYMBOL::process( CZMA_INFORMATION& info, CZMA_PARSE* p_last_line ) {
        -:   21:	std::string label;
        -:   22:	CVALUE v;
        -:   23:
       54:   24:	this->set_code_size( &info, 0 );
       54:   25:	update_flags( &info, p_last_line );
        -:   26:	//	log
      162:   27:	label = info.get_scope_path() + words[0];
       54:   28:	if( !this->is_analyze_phase ) {
       36:   29:		std::stringstream s;
       36:   30:		log.write_line_infomation( this->line_no, -1, -1, get_line() );
        -:   31:		if( !info.dict.count( label ) ){
        2:   32:			s << "Symbol [" << label << "] = UNKNOWN";
        -:   33:		}
        -:   34:		else {
       16:   35:			v = info.dict[label];
       32:   36:			if( v.is_integer() ) {
       13:   37:				if( v.is_unknown() ){
        1:   38:					s << "Integer symbol [" << label << "] = UNKNOWN";
        -:   39:				}
        -:   40:				else {
       24:   41:					s << "Integer symbol [" << label << "] = " << v.i << " (0x" << std::hex << v.i << ")";
        -:   42:				}
        -:   43:			}
        3:   44:			else if( v.is_string() ) {
        3:   45:				if( v.is_unknown() ){
    #####:   46:					s << "String symbol [" << label << "] = UNKNOWN";
        -:   47:				}
        -:   48:				else{
        3:   49:					s << "String symbol [" << label << "] = \"" << v.s << "\"";
        -:   50:				}
        -:   51:			}
        -:   52:			else {
    #####:   53:				s << "Symbol [" << label << "] = UNKNOWN";
        -:   54:			}
        -:   55:		}
       36:   56:		log.write_message( s.str() );
       18:   57:		log.write_separator();
        -:   58:	}
       54:   59:	if( this->is_data_fixed ) {
        -:   60:		if( check_all_fixed() && info.dict.count( label ) ){
        -:   61:			return true;
        -:   62:		}
        -:   63:	}
       60:   64:	if( words[0][0] == '\"' ) {
       15:   65:		put_error( CZMA_ERROR::get( CZMA_ERROR_CODE::INVALID_COMMAND ) );
        3:   66:		return false;
        -:   67:	}
       27:   68:	if( this->expression( info, 2, v ) ) {
       24:   69:		if( v.value_type == CVALUE_TYPE::CV_UNKNOWN ) {
    #####:   70:			put_error( CZMA_ERROR::get( CZMA_ERROR_CODE::ILLEGAL_EXPRESSION ) );
    #####:   71:			return false;
        -:   72:		}
       30:   73:		if( info.dict.count( label ) && !info.dict[ label ].is_unknown() ) {
       40:   74:			put_error( CZMA_ERROR::get( CZMA_ERROR_CODE::MULTIPLE_DEFINITION ) );
        8:   75:			return false;
        -:   76:		}
        -:   77:		else {
       32:   78:			if( !v.is_unknown() ){
       13:   79:				this->is_data_fixed = true;
        -:   80:			}
        4:   81:			if( !info.dict.count( label ) || info.dict[ label ].value_type != v.value_type ){
       14:   82:				info.is_updated = true;
        -:   83:			}
       16:   84:			info.dict[label] = v;
        -:   85:		}
        -:   86:	}
        -:   87:	else {
       15:   88:		put_error( CZMA_ERROR::get( CZMA_ERROR_CODE::LABEL_IS_INDETERMINATE ), info.all_error_enable, info.error_disable );
        3:   89:		info.error_disable = true;
        3:   90:		return false;
        -:   91:	}
        -:   92:	return check_all_fixed();
      158:   93:}
