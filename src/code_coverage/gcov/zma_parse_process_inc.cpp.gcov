        -:    0:Source:../sub/zma_parse_process_inc.cpp
        -:    0:Programs:103
        -:    1:// --------------------------------------------------------------------
        -:    2://	Z80 Macro Assembler parse
        -:    3:// ====================================================================
        -:    4://	2019/05/04	t.hara
        -:    5:// --------------------------------------------------------------------
        -:    6:
        -:    7:#include "zma_parse.hpp"
        -:    8:#include "zma_text.hpp"
        -:    9:#include "zma_parse_process.hpp"
        -:   10:#include <string>
        -:   11:#include <cctype>
        -:   12:#include <iostream>
        -:   13:#include <fstream>
        -:   14:#include <sstream>
        -:   15:#include <algorithm>
        -:   16:
        -:   17:// --------------------------------------------------------------------
       66:   18:bool CZMA_PARSE_INC::process( CZMA_INFORMATION& info, CZMA_PARSE* p_last_line ) {
        -:   19:
       66:   20:	update_flags( &info, p_last_line );
       66:   21:	if( this->opecode_destination8( info, 0x04 ) ) {
        -:   22:		//	log
       33:   23:		if( !this->is_analyze_phase ) {
       22:   24:			log.write_line_infomation( this->line_no, this->code_address, this->file_address, get_line() );
       22:   25:			if( data.size() == 2 ) {
        8:   26:				log.write_cycle_information( 10, 2 );		//	INC IXh
        -:   27:			}
        -:   28:			else {
       14:   29:				log.write_cycle_information( 5, 1 );		//	INC r
        -:   30:			}
       11:   31:			log.write_dump( this->code_address, this->file_address, this->data );
       11:   32:			log.write_separator();
        -:   33:		}
        -:   34:		return check_all_fixed();
        -:   35:	}
       33:   36:	if( this->opecode_register16( info, 0x03 ) ) {
        -:   37:		//	log
       18:   38:		if( !this->is_analyze_phase ) {
       12:   39:			log.write_line_infomation( this->line_no, this->code_address, this->file_address, get_line() );
       17:   40:			if( words[1] == "IX" || words[1] == "IY" ) {
        6:   41:				log.write_cycle_information( 12, 1 );		//	INC IX
        -:   42:			}
        -:   43:			else {
       12:   44:				log.write_cycle_information( 7, 1 );		//	INC rr
        -:   45:			}
        6:   46:			log.write_dump( this->code_address, this->file_address, this->data );
        6:   47:			log.write_separator();
        -:   48:		}
        -:   49:		return check_all_fixed();
        -:   50:	}
       15:   51:	if( this->opecode_memory_hl( info, 0x34 ) ) {
        -:   52:		//	log
       15:   53:		if( !this->is_analyze_phase ) {
       10:   54:			log.write_line_infomation( this->line_no, this->code_address, this->file_address, get_line() );
       10:   55:			if( words[2] == "HL" ) {
        2:   56:				log.write_cycle_information( 12, 7 );		//	INC [HL]
        -:   57:			}
        -:   58:			else {
        8:   59:				log.write_cycle_information( 25, 10 );		//	INC [IX+o]
        -:   60:			}
        5:   61:			log.write_dump( this->code_address, this->file_address, this->data );
        5:   62:			log.write_separator();
        -:   63:		}
        -:   64:		return check_all_fixed();
        -:   65:	}
    #####:   66:	put_error( "Illegal operand" );
    #####:   67:	return false;
       12:   68:}
        -:   69:
