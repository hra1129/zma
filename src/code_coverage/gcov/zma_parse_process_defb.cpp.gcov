        -:    0:Source:../sub/zma_parse_process_defb.cpp
        -:    0:Programs:106
        -:    1:// --------------------------------------------------------------------
        -:    2://	Z80 Macro Assembler parse
        -:    3:// ====================================================================
        -:    4://	2019/05/04	t.hara
        -:    5:// --------------------------------------------------------------------
        -:    6:
        -:    7:#include "zma_parse.hpp"
        -:    8:#include "zma_text.hpp"
        -:    9:#include "zma_parse_process.hpp"
        -:   10:#include <string>
        -:   11:#include <cctype>
        -:   12:#include <iostream>
        -:   13:#include <fstream>
        -:   14:#include <sstream>
        -:   15:#include <algorithm>
        -:   16:
        -:   17:#include "zma_parse_process_defb.hpp"
        -:   18:
        -:   19:// --------------------------------------------------------------------
     7150:   20:bool CZMA_PARSE_DEFB::process( CZMA_INFORMATION &info, CZMA_PARSE *p_last_line ){
        -:   21:	int i, count;
        -:   22:	CVALUE v;
        -:   23:
     7150:   24:	update_flags( &info, p_last_line );
     7150:   25:	if( !this->is_fixed_code_size() ){
        -:   26:		count = 0;
        -:   27:		i = 1;
        -:   28:		for( ;; ){
    14156:   29:			i = this->expression( info, i, v );
    16556:   30:			if( v.is_integer() ){
        -:   31:				//	数値の場合は、値の確定の有無にかかわらず 1byte
     8264:   32:				count++;
        -:   33:			}
       14:   34:			else if( v.is_string() ){
        4:   35:				if( v.is_unknown() ){
        -:   36:					//	文字列の場合は、値が確定していないとサイズが不明
        -:   37:					count = -1;
        -:   38:					break;
        -:   39:				}
        -:   40:				//	文字列の場合は、値が確定していると文字長がそのままサイズ
        4:   41:				count += v.s.size();
        -:   42:			}
        -:   43:			else{
        -:   44:				//	型もわからない場合は、サイズが不明
        -:   45:				count = -1;
        -:   46:				break;
        -:   47:			}
    16536:   48:			if( i >= (int)words.size() ){
        -:   49:				break;
        -:   50:			}
    11800:   51:			if( words[ i ] != "," ){
      110:   52:				put_error( CZMA_ERROR::get( CZMA_ERROR_CODE::ILLEGAL_PARAMETER ) );
        -:   53:				count = -1;
        -:   54:				break;
        -:   55:			}
     5878:   56:			i++;
        -:   57:		}
     2378:   58:		if( count >= 0 ){
     2368:   59:			this->set_code_size( &info, count );
        -:   60:		}
        -:   61:	}
     7150:   62:	if( !this->is_data_fixed ){
        -:   63:		i = 1;
        -:   64:		for( ;; ){
     8293:   65:			i = this->expression( info, i, v );
     8293:   66:			if( i == 0 ){
      120:   67:				put_error( CZMA_ERROR::get( CZMA_ERROR_CODE::CANNOT_EVALUATE_THE_EXPRESSION ) );
        -:   68:				data.clear();
       24:   69:				return false;
        -:   70:			}
    22427:   71:			if( i < (int)words.size() && words[ i ] != "," ){
       20:   72:				put_error( CZMA_ERROR::get( CZMA_ERROR_CODE::ILLEGAL_EXPRESSION ) );
        -:   73:				data.clear();
        4:   74:				return false;
        -:   75:			}
     8265:   76:			i++;
    16530:   77:			if( v.is_unknown() ){
       75:   78:				put_error( CZMA_ERROR::get( CZMA_ERROR_CODE::ILLEGAL_EXPRESSION ) );
        -:   79:				data.clear();
       15:   80:				return false;
        -:   81:			}
     8250:   82:			else if( v.is_integer() ) {
    16492:   83:				data.push_back( v.i & 255 );
        -:   84:			}
        -:   85:			else {
        -:   86:				//	v.is_string()
       38:   87:				for( char &c : v.s ){
       68:   88:					data.push_back( (unsigned char) c );
        -:   89:				}
        -:   90:			}
    16500:   91:			if( i >= (int)words.size() ){
        -:   92:				break;
        -:   93:			}
        -:   94:		}
     2368:   95:		this->is_data_fixed = true;
        -:   96:	}
        -:   97:	//	log
     7107:   98:	if( !this->is_analyze_phase ){
     4732:   99:		log.write_line_infomation( this->line_no, this->code_address, this->file_address, get_line() );
     2366:  100:		log.write_dump( this->code_address, this->file_address, this->data );
     2366:  101:		log.write_separator();
        -:  102:	}
        -:  103:	return check_all_fixed();
      172:  104:}
        -:  105:
