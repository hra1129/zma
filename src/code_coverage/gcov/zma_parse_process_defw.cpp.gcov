        -:    0:Source:../sub/zma_parse_process_defw.cpp
        -:    0:Programs:106
        -:    1:// --------------------------------------------------------------------
        -:    2://	Z80 Macro Assembler parse
        -:    3:// ====================================================================
        -:    4://	2019/05/04	t.hara
        -:    5:// --------------------------------------------------------------------
        -:    6:
        -:    7:#include "zma_parse.hpp"
        -:    8:#include "zma_text.hpp"
        -:    9:#include "zma_parse_process.hpp"
        -:   10:#include <string>
        -:   11:#include <cctype>
        -:   12:#include <iostream>
        -:   13:#include <fstream>
        -:   14:#include <sstream>
        -:   15:#include <algorithm>
        -:   16:
        -:   17:// --------------------------------------------------------------------
      720:   18:bool CZMA_PARSE_DEFW::process( CZMA_INFORMATION& info, CZMA_PARSE* p_last_line ) {
        -:   19:	int i, count;
        -:   20:	CVALUE v;
        -:   21:
      720:   22:	update_flags( &info, p_last_line );
      720:   23:	if( !this->is_fixed_code_size() ) {
        -:   24:		count = 1;
     1296:   25:		for( i = 1; i < ( int) words.size(); i++ ) {
      548:   26:			if( words[i] == "," ) {
       19:   27:				count++;
        -:   28:			}
        -:   29:		}
      237:   30:		this->set_code_size( &info, count * 2 );
        -:   31:	}
      720:   32:	if( !this->is_data_fixed ) {
        -:   33:		i = 1;
      791:   34:		for( count = 0; (count * 2) < this->get_code_size(); count++ ) {
      297:   35:			i = this->expression( info, i, v );
      297:   36:			if( i == 0 ) {
       95:   37:				put_error( CZMA_ERROR::get( CZMA_ERROR_CODE::CANNOT_EVALUATE_THE_EXPRESSION ) );
        -:   38:				data.clear();
       19:   39:				return false;
        -:   40:			}
      556:   41:			if( !v.is_integer() || v.is_unknown() ){
       60:   42:				put_error( CZMA_ERROR::get( CZMA_ERROR_CODE::ILLEGAL_EXPRESSION ) );
        -:   43:				data.clear();
       10:   44:				return false;
        -:   45:			}
      612:   46:			if( i < (int)words.size() && words[i] != "," ) {
       20:   47:				put_error( CZMA_ERROR::get( CZMA_ERROR_CODE::ILLEGAL_EXPRESSION ) );
        -:   48:				data.clear();
        4:   49:				return false;
        -:   50:			}
      264:   51:			i++;
      528:   52:			data.push_back( v.i & 255 );
      528:   53:			data.push_back( (v.i >> 8) & 255 );
        -:   54:		}
      230:   55:		this->is_data_fixed = true;
        -:   56:	}
        -:   57:	//	log
      687:   58:	if( !this->is_analyze_phase ) {
      460:   59:		log.write_line_infomation( this->line_no, this->code_address, this->file_address, get_line() );
      230:   60:		log.write_dump( this->code_address, this->file_address, this->data );
      230:   61:		log.write_separator();
        -:   62:	}
        -:   63:	return check_all_fixed();
      154:   64:}
        -:   65:
