        -:    0:Source:../zma_parse_process.cpp
        -:    0:Programs:106
        -:    1:// --------------------------------------------------------------------
        -:    2://	Z80 Macro Assembler parse
        -:    3:// ====================================================================
        -:    4://	2019/05/04	t.hara
        -:    5:// --------------------------------------------------------------------
        -:    6:
        -:    7:#include "zma_parse.hpp"
        -:    8:#include "zma_text.hpp"
        -:    9:#include "zma_parse_process.hpp"
        -:   10:#include <string>
        -:   11:#include <cctype>
        -:   12:#include <iostream>
        -:   13:#include <fstream>
        -:   14:#include <sstream>
        -:   15:#include <algorithm>
        -:   16:
        -:   17:#include "zma_parse_process_align.hpp"
        -:   18:#include "zma_parse_process_add_include_path.hpp"
        -:   19:#include "zma_parse_process_blank.hpp"
        -:   20:#include "zma_parse_process_space.hpp"
        -:   21:#include "zma_parse_process_user_error.hpp"
        -:   22:#include "zma_parse_process_user_message.hpp"
        -:   23:#include "zma_parse_process_label.hpp"
        -:   24:#include "zma_parse_process_macro.hpp"
        -:   25:#include "zma_parse_process_global_label.hpp"
        -:   26:#include "zma_parse_process_symbol.hpp"
        -:   27:#include "zma_parse_process_global_symbol.hpp"
        -:   28:#include "zma_parse_process_scope.hpp"
        -:   29:#include "zma_parse_process_endscope.hpp"
        -:   30:#include "zma_parse_process_binary_link.hpp"
        -:   31:#include "zma_parse_process_defb.hpp"
        -:   32:#include "zma_parse_process_defw.hpp"
        -:   33:#include "zma_parse_process_defd.hpp"
        -:   34:#include "zma_parse_process_defs.hpp"
        -:   35:#include "zma_parse_process_org.hpp"
        -:   36:#include "zma_parse_process_ld.hpp"
        -:   37:#include "zma_parse_process_ldi.hpp"
        -:   38:#include "zma_parse_process_ldir.hpp"
        -:   39:#include "zma_parse_process_ldd.hpp"
        -:   40:#include "zma_parse_process_lddr.hpp"
        -:   41:#include "zma_parse_process_ex.hpp"
        -:   42:#include "zma_parse_process_exx.hpp"
        -:   43:#include "zma_parse_process_push.hpp"
        -:   44:#include "zma_parse_process_pop.hpp"
        -:   45:#include "zma_parse_process_rlca.hpp"
        -:   46:#include "zma_parse_process_rla.hpp"
        -:   47:#include "zma_parse_process_rlc.hpp"
        -:   48:#include "zma_parse_process_rl.hpp"
        -:   49:#include "zma_parse_process_rrca.hpp"
        -:   50:#include "zma_parse_process_rra.hpp"
        -:   51:#include "zma_parse_process_rrc.hpp"
        -:   52:#include "zma_parse_process_rr.hpp"
        -:   53:#include "zma_parse_process_sla.hpp"
        -:   54:#include "zma_parse_process_sra.hpp"
        -:   55:#include "zma_parse_process_srl.hpp"
        -:   56:#include "zma_parse_process_sll.hpp"
        -:   57:#include "zma_parse_process_add.hpp"
        -:   58:#include "zma_parse_process_adc.hpp"
        -:   59:#include "zma_parse_process_inc.hpp"
        -:   60:#include "zma_parse_process_sub.hpp"
        -:   61:#include "zma_parse_process_sbc.hpp"
        -:   62:#include "zma_parse_process_dec.hpp"
        -:   63:#include "zma_parse_process_and.hpp"
        -:   64:#include "zma_parse_process_or.hpp"
        -:   65:#include "zma_parse_process_xor.hpp"
        -:   66:#include "zma_parse_process_cpl.hpp"
        -:   67:#include "zma_parse_process_neg.hpp"
        -:   68:#include "zma_parse_process_ccf.hpp"
        -:   69:#include "zma_parse_process_scf.hpp"
        -:   70:#include "zma_parse_process_bit.hpp"
        -:   71:#include "zma_parse_process_set.hpp"
        -:   72:#include "zma_parse_process_res.hpp"
        -:   73:#include "zma_parse_process_cpi.hpp"
        -:   74:#include "zma_parse_process_cpir.hpp"
        -:   75:#include "zma_parse_process_cpd.hpp"
        -:   76:#include "zma_parse_process_cpdr.hpp"
        -:   77:#include "zma_parse_process_cp.hpp"
        -:   78:#include "zma_parse_process_jp.hpp"
        -:   79:#include "zma_parse_process_jr.hpp"
        -:   80:#include "zma_parse_process_djnz.hpp"
        -:   81:#include "zma_parse_process_call.hpp"
        -:   82:#include "zma_parse_process_ret.hpp"
        -:   83:#include "zma_parse_process_reti.hpp"
        -:   84:#include "zma_parse_process_retn.hpp"
        -:   85:#include "zma_parse_process_rst.hpp"
        -:   86:#include "zma_parse_process_nop.hpp"
        -:   87:#include "zma_parse_process_halt.hpp"
        -:   88:#include "zma_parse_process_di.hpp"
        -:   89:#include "zma_parse_process_ei.hpp"
        -:   90:#include "zma_parse_process_im0.hpp"
        -:   91:#include "zma_parse_process_im1.hpp"
        -:   92:#include "zma_parse_process_im2.hpp"
        -:   93:#include "zma_parse_process_in.hpp"
        -:   94:#include "zma_parse_process_ini.hpp"
        -:   95:#include "zma_parse_process_inir.hpp"
        -:   96:#include "zma_parse_process_ind.hpp"
        -:   97:#include "zma_parse_process_indr.hpp"
        -:   98:#include "zma_parse_process_out.hpp"
        -:   99:#include "zma_parse_process_outi.hpp"
        -:  100:#include "zma_parse_process_otir.hpp"
        -:  101:#include "zma_parse_process_outd.hpp"
        -:  102:#include "zma_parse_process_otdr.hpp"
        -:  103:#include "zma_parse_process_daa.hpp"
        -:  104:#include "zma_parse_process_rld.hpp"
        -:  105:#include "zma_parse_process_rrd.hpp"
        -:  106:#include "zma_parse_process_mulub.hpp"
        -:  107:#include "zma_parse_process_muluw.hpp"
        -:  108:#include "zma_parse_process_if.hpp"
        -:  109:#include "zma_parse_process_error.hpp"
        -:  110:#include "zma_parse_process_repeat.hpp"
        -:  111:#include "zma_parse_process_macro.hpp"
        -:  112:#include "zma_parse_process_include.hpp"
        -:  113:#include "zma_parse_process_chg_char_set.hpp"
        -:  114:#include "zma_parse_process_link.hpp"
        -:  115:
        -:  116:// --------------------------------------------------------------------
        -:  117:int CZMA_PARSE::number_of_error = 0;
        -:  118:
        -:  119:// --------------------------------------------------------------------
      162:  120:static std::map< std::string, CZMA_COMMAND_TYPE > command_list = {
        -:  121:	{ "ALIGN", CZMA_COMMAND_TYPE::CZMA_ALIGN },
        -:  122:	{ "SPACE", CZMA_COMMAND_TYPE::CZMA_SPACE },
        -:  123:	{ "REPEAT", CZMA_COMMAND_TYPE::CZMA_REPEAT },
        -:  124:	{ "ENDR", CZMA_COMMAND_TYPE::CZMA_ENDR },
        -:  125:	{ "ENDM", CZMA_COMMAND_TYPE::CZMA_ENDM },
        -:  126:	{ "IF", CZMA_COMMAND_TYPE::CZMA_IF },
        -:  127:	{ "ELSEIF", CZMA_COMMAND_TYPE::CZMA_ELSEIF },
        -:  128:	{ "ELSE", CZMA_COMMAND_TYPE::CZMA_ELSE },
        -:  129:	{ "ENDIF", CZMA_COMMAND_TYPE::CZMA_ENDIF },
        -:  130:	{ "ORG", CZMA_COMMAND_TYPE::CZMA_ORG },
        -:  131:	{ "INCLUDE", CZMA_COMMAND_TYPE::CZMA_INCLUDE },
        -:  132:	{ "ADD_INCLUDE_PATH", CZMA_COMMAND_TYPE::CZMA_ADD_INCLUDE_PATH },
        -:  133:	{ "ERROR", CZMA_COMMAND_TYPE::CZMA_USER_ERROR },
        -:  134:	{ "MESSAGE", CZMA_COMMAND_TYPE::CZMA_USER_MESSAGE },
        -:  135:	{ "SCOPE", CZMA_COMMAND_TYPE::CZMA_SCOPE },
        -:  136:	{ "ENDSCOPE", CZMA_COMMAND_TYPE::CZMA_ENDSCOPE },
        -:  137:	{ "BINARY_LINK", CZMA_COMMAND_TYPE::CZMA_BINARY_LINK },
        -:  138:	{ "DEFB", CZMA_COMMAND_TYPE::CZMA_DEFB },
        -:  139:	{ "DEFW", CZMA_COMMAND_TYPE::CZMA_DEFW },
        -:  140:	{ "DEFD", CZMA_COMMAND_TYPE::CZMA_DEFD },
        -:  141:	{ "DEFS", CZMA_COMMAND_TYPE::CZMA_DEFS },
        -:  142:	{ "DB", CZMA_COMMAND_TYPE::CZMA_DEFB },
        -:  143:	{ "DW", CZMA_COMMAND_TYPE::CZMA_DEFW },
        -:  144:	{ "DD", CZMA_COMMAND_TYPE::CZMA_DEFD },
        -:  145:	{ "DS", CZMA_COMMAND_TYPE::CZMA_DEFS },
        -:  146:	{ "LD", CZMA_COMMAND_TYPE::CZMA_LD },
        -:  147:	{ "LDI", CZMA_COMMAND_TYPE::CZMA_LDI },
        -:  148:	{ "LDIR", CZMA_COMMAND_TYPE::CZMA_LDIR },
        -:  149:	{ "LDD", CZMA_COMMAND_TYPE::CZMA_LDD },
        -:  150:	{ "LDDR", CZMA_COMMAND_TYPE::CZMA_LDDR },
        -:  151:	{ "EX", CZMA_COMMAND_TYPE::CZMA_EX },
        -:  152:	{ "EXX", CZMA_COMMAND_TYPE::CZMA_EXX },
        -:  153:	{ "PUSH", CZMA_COMMAND_TYPE::CZMA_PUSH },
        -:  154:	{ "POP", CZMA_COMMAND_TYPE::CZMA_POP },
        -:  155:	{ "RLCA", CZMA_COMMAND_TYPE::CZMA_RLCA },
        -:  156:	{ "RLA", CZMA_COMMAND_TYPE::CZMA_RLA },
        -:  157:	{ "RLC", CZMA_COMMAND_TYPE::CZMA_RLC },
        -:  158:	{ "RL", CZMA_COMMAND_TYPE::CZMA_RL },
        -:  159:	{ "RRCA", CZMA_COMMAND_TYPE::CZMA_RRCA },
        -:  160:	{ "RRA", CZMA_COMMAND_TYPE::CZMA_RRA },
        -:  161:	{ "RRC", CZMA_COMMAND_TYPE::CZMA_RRC },
        -:  162:	{ "RR", CZMA_COMMAND_TYPE::CZMA_RR },
        -:  163:	{ "SLA", CZMA_COMMAND_TYPE::CZMA_SLA },
        -:  164:	{ "SRA", CZMA_COMMAND_TYPE::CZMA_SRA },
        -:  165:	{ "SRL", CZMA_COMMAND_TYPE::CZMA_SRL },
        -:  166:	{ "SLL", CZMA_COMMAND_TYPE::CZMA_SLL },
        -:  167:	{ "ADD", CZMA_COMMAND_TYPE::CZMA_ADD },
        -:  168:	{ "ADC", CZMA_COMMAND_TYPE::CZMA_ADC },
        -:  169:	{ "INC", CZMA_COMMAND_TYPE::CZMA_INC },
        -:  170:	{ "SUB", CZMA_COMMAND_TYPE::CZMA_SUB },
        -:  171:	{ "SBC", CZMA_COMMAND_TYPE::CZMA_SBC },
        -:  172:	{ "DEC", CZMA_COMMAND_TYPE::CZMA_DEC },
        -:  173:	{ "AND", CZMA_COMMAND_TYPE::CZMA_AND },
        -:  174:	{ "OR", CZMA_COMMAND_TYPE::CZMA_OR },
        -:  175:	{ "XOR", CZMA_COMMAND_TYPE::CZMA_XOR },
        -:  176:	{ "CPL", CZMA_COMMAND_TYPE::CZMA_CPL },
        -:  177:	{ "NEG", CZMA_COMMAND_TYPE::CZMA_NEG },
        -:  178:	{ "CCF", CZMA_COMMAND_TYPE::CZMA_CCF },
        -:  179:	{ "SCF", CZMA_COMMAND_TYPE::CZMA_SCF },
        -:  180:	{ "BIT", CZMA_COMMAND_TYPE::CZMA_BIT },
        -:  181:	{ "RES", CZMA_COMMAND_TYPE::CZMA_RES },
        -:  182:	{ "SET", CZMA_COMMAND_TYPE::CZMA_SET },
        -:  183:	{ "CPI", CZMA_COMMAND_TYPE::CZMA_CPI },
        -:  184:	{ "CPIR", CZMA_COMMAND_TYPE::CZMA_CPIR },
        -:  185:	{ "CPD", CZMA_COMMAND_TYPE::CZMA_CPD },
        -:  186:	{ "CPDR", CZMA_COMMAND_TYPE::CZMA_CPDR },
        -:  187:	{ "CP", CZMA_COMMAND_TYPE::CZMA_CP },
        -:  188:	{ "JP", CZMA_COMMAND_TYPE::CZMA_JP },
        -:  189:	{ "JR", CZMA_COMMAND_TYPE::CZMA_JR },
        -:  190:	{ "DJNZ", CZMA_COMMAND_TYPE::CZMA_DJNZ },
        -:  191:	{ "CALL", CZMA_COMMAND_TYPE::CZMA_CALL },
        -:  192:	{ "RET", CZMA_COMMAND_TYPE::CZMA_RET },
        -:  193:	{ "RETI", CZMA_COMMAND_TYPE::CZMA_RETI },
        -:  194:	{ "RETN", CZMA_COMMAND_TYPE::CZMA_RETN },
        -:  195:	{ "RST", CZMA_COMMAND_TYPE::CZMA_RST },
        -:  196:	{ "NOP", CZMA_COMMAND_TYPE::CZMA_NOP },
        -:  197:	{ "HALT", CZMA_COMMAND_TYPE::CZMA_HALT },
        -:  198:	{ "DI", CZMA_COMMAND_TYPE::CZMA_DI },
        -:  199:	{ "EI", CZMA_COMMAND_TYPE::CZMA_EI },
        -:  200:	{ "IM0", CZMA_COMMAND_TYPE::CZMA_IM0 },
        -:  201:	{ "IM1", CZMA_COMMAND_TYPE::CZMA_IM1 },
        -:  202:	{ "IM2", CZMA_COMMAND_TYPE::CZMA_IM2 },
        -:  203:	{ "IN", CZMA_COMMAND_TYPE::CZMA_IN },
        -:  204:	{ "INI", CZMA_COMMAND_TYPE::CZMA_INI },
        -:  205:	{ "INIR", CZMA_COMMAND_TYPE::CZMA_INIR },
        -:  206:	{ "IND", CZMA_COMMAND_TYPE::CZMA_IND },
        -:  207:	{ "INDR", CZMA_COMMAND_TYPE::CZMA_INDR },
        -:  208:	{ "OUT", CZMA_COMMAND_TYPE::CZMA_OUT },
        -:  209:	{ "OUTI", CZMA_COMMAND_TYPE::CZMA_OUTI },
        -:  210:	{ "OTIR", CZMA_COMMAND_TYPE::CZMA_OTIR },
        -:  211:	{ "OUTD", CZMA_COMMAND_TYPE::CZMA_OUTD },
        -:  212:	{ "OTDR", CZMA_COMMAND_TYPE::CZMA_OTDR },
        -:  213:	{ "DAA", CZMA_COMMAND_TYPE::CZMA_DAA },
        -:  214:	{ "RLD", CZMA_COMMAND_TYPE::CZMA_RLD },
        -:  215:	{ "RRD", CZMA_COMMAND_TYPE::CZMA_RRD },
        -:  216:	{ "MULUB", CZMA_COMMAND_TYPE::CZMA_MULUB },
        -:  217:	{ "MULUW", CZMA_COMMAND_TYPE::CZMA_MULUW },
        -:  218:	{ "CHG_CHAR_SET", CZMA_COMMAND_TYPE::CZMA_CHG_CHAR_SET },
        -:  219:	{ "MAPPING_CHAR", CZMA_COMMAND_TYPE::CZMA_MAPPING_CHAR },
        -:  220:	{ "LINK", CZMA_COMMAND_TYPE::CZMA_LINK },
        -:  221:};
        -:  222:
        -:  223:// --------------------------------------------------------------------
        -:  224:#define OPE_CASE( operation )																			\
        -:  225:	case CZMA_COMMAND_TYPE::CZMA_##operation:																			\
        -:  226:		return reinterpret_cast<CZMA_PARSE*> (new CZMA_PARSE_##operation( words, p_file_name, line_no ))
        -:  227:
        -:  228:// --------------------------------------------------------------------
    15452:  229:CZMA_PARSE* CZMA_PARSE::create( CZMA_INFORMATION& info, std::vector<std::string> &words, const char* p_file_name, int line_no ) {
        -:  230:
    30904:  231:	if( words.size() == 0 ) {
    12998:  232:		return reinterpret_cast<CZMA_PARSE*> (new CZMA_PARSE_BLANK( words, p_file_name, line_no ));
        -:  233:	}
    10342:  234:	if( words.size() == 2 && words[1] == ":" ) {
      138:  235:		return reinterpret_cast<CZMA_PARSE*> (new CZMA_PARSE_LABEL( words, p_file_name, line_no ));
        -:  236:	}
    10204:  237:	if( words.size() == 2 && words[1] == "::" ) {
       22:  238:		return reinterpret_cast<CZMA_PARSE*> (new CZMA_PARSE_GLOBAL_LABEL( words, p_file_name, line_no ));
        -:  239:	}
    12924:  240:	if( words.size() >= 3 && words[1] == "=" ) {
       52:  241:		return reinterpret_cast<CZMA_PARSE*> (new CZMA_PARSE_SYMBOL( words, p_file_name, line_no ));
        -:  242:	}
    16883:  243:	if( words.size() >= 3 && (words[1] == ":=" || words[ 1 ] == "EQU") ) {
       32:  244:		return reinterpret_cast<CZMA_PARSE*> (new CZMA_PARSE_GLOBAL_SYMBOL( words, p_file_name, line_no ));
        -:  245:	}
    14149:  246:	if( words.size() >= 2 && words[1] == "MACRO" ) {
       31:  247:		info.macro_list[words[0]] = nullptr;
       31:  248:		return reinterpret_cast<CZMA_PARSE*> (new CZMA_PARSE_MACRO( words, p_file_name, line_no ));
        -:  249:	}
        -:  250:	if( words.size() >= 1 && info.macro_list.count( words[0] ) ) {
      152:  251:		return reinterpret_cast<CZMA_PARSE*> (new CZMA_PARSE_MACRO_INS( words, p_file_name, line_no ));
        -:  252:	}
     8724:  253:	switch( command_list[words[0]] ) {
       64:  254:		OPE_CASE( ORG );
       20:  255:		OPE_CASE( INCLUDE );
       10:  256:		OPE_CASE( ADD_INCLUDE_PATH );
        4:  257:		OPE_CASE( ALIGN );
       34:  258:		OPE_CASE( SPACE );
       25:  259:		OPE_CASE( REPEAT );
       70:  260:		OPE_CASE( ENDR );
       60:  261:		OPE_CASE( ENDM );
       63:  262:		OPE_CASE( IF );
       58:  263:		OPE_CASE( ELSEIF );
       86:  264:		OPE_CASE( ELSE );
      140:  265:		OPE_CASE( ENDIF );
       60:  266:		OPE_CASE( USER_ERROR );
      190:  267:		OPE_CASE( USER_MESSAGE );
       42:  268:		OPE_CASE( SCOPE );
       30:  269:		OPE_CASE( ENDSCOPE );
        2:  270:		OPE_CASE( BINARY_LINK );
     4880:  271:		OPE_CASE( DEFB );
      490:  272:		OPE_CASE( DEFW );
       20:  273:		OPE_CASE( DEFD );
       32:  274:		case CZMA_COMMAND_TYPE::CZMA_DEFS:
       32:  275:			if( info.defs_is_space ){
        6:  276:				return reinterpret_cast<CZMA_PARSE *> ( new CZMA_PARSE_SPACE( words, p_file_name, line_no ) );
        -:  277:			}
       58:  278:			return reinterpret_cast<CZMA_PARSE *> ( new CZMA_PARSE_DEFS( words, p_file_name, line_no ) );
     1364:  279:		OPE_CASE( LD );
       26:  280:		OPE_CASE( PUSH );
       26:  281:		OPE_CASE( POP );
       24:  282:		OPE_CASE( EX );
        6:  283:		OPE_CASE( EXX );
        6:  284:		OPE_CASE( LDI );
        6:  285:		OPE_CASE( LDIR );
        6:  286:		OPE_CASE( LDD );
        6:  287:		OPE_CASE( LDDR );
        6:  288:		OPE_CASE( RLCA );
        6:  289:		OPE_CASE( RLA );
       42:  290:		OPE_CASE( RLC );
       44:  291:		OPE_CASE( RL );
        6:  292:		OPE_CASE( RRCA );
        6:  293:		OPE_CASE( RRA );
       42:  294:		OPE_CASE( RRC );
       44:  295:		OPE_CASE( RR );
       42:  296:		OPE_CASE( SLA );
       44:  297:		OPE_CASE( SRA );
       44:  298:		OPE_CASE( SRL );
        2:  299:		OPE_CASE( SLL );
      142:  300:		OPE_CASE( ADD );
       78:  301:		OPE_CASE( ADC );
      128:  302:		OPE_CASE( INC );
      122:  303:		OPE_CASE( SUB );
       78:  304:		OPE_CASE( SBC );
       82:  305:		OPE_CASE( DEC );
      130:  306:		OPE_CASE( AND );
      134:  307:		OPE_CASE( OR );
      132:  308:		OPE_CASE( XOR );
        6:  309:		OPE_CASE( CPL );
        6:  310:		OPE_CASE( NEG );
        6:  311:		OPE_CASE( CCF );
        6:  312:		OPE_CASE( SCF );
      324:  313:		OPE_CASE( BIT );
      324:  314:		OPE_CASE( RES );
      324:  315:		OPE_CASE( SET );
        6:  316:		OPE_CASE( CPI );
        6:  317:		OPE_CASE( CPIR );
        6:  318:		OPE_CASE( CPD );
        6:  319:		OPE_CASE( CPDR );
      138:  320:		OPE_CASE( CP );
       80:  321:		OPE_CASE( JP );
       60:  322:		OPE_CASE( JR );
       12:  323:		OPE_CASE( DJNZ );
       66:  324:		OPE_CASE( CALL );
       64:  325:		OPE_CASE( RET );
        6:  326:		OPE_CASE( RETI );
        6:  327:		OPE_CASE( RETN );
       42:  328:		OPE_CASE( RST );
     6296:  329:		OPE_CASE( NOP );
        6:  330:		OPE_CASE( HALT );
        6:  331:		OPE_CASE( EI );
        6:  332:		OPE_CASE( DI );
        6:  333:		OPE_CASE( IM0 );
        6:  334:		OPE_CASE( IM1 );
        6:  335:		OPE_CASE( IM2 );
       36:  336:		OPE_CASE( IN );
        6:  337:		OPE_CASE( INI );
        6:  338:		OPE_CASE( INIR );
        6:  339:		OPE_CASE( IND );
        6:  340:		OPE_CASE( INDR );
       52:  341:		OPE_CASE( OUT );
        6:  342:		OPE_CASE( OUTI );
        6:  343:		OPE_CASE( OTIR );
        6:  344:		OPE_CASE( OUTD );
        6:  345:		OPE_CASE( OTDR );
        6:  346:		OPE_CASE( DAA );
        6:  347:		OPE_CASE( RLD );
        6:  348:		OPE_CASE( RRD );
       18:  349:		OPE_CASE( MULUB );
       10:  350:		OPE_CASE( MULUW );
        6:  351:		OPE_CASE( CHG_CHAR_SET );
        8:  352:		OPE_CASE( MAPPING_CHAR );
        7:  353:		OPE_CASE( LINK );
        -:  354:	default:
        -:  355:		break;
        -:  356:	}
       68:  357:	return reinterpret_cast<CZMA_PARSE*> (new CZMA_PARSE_ERROR( words, p_file_name, line_no ));
        -:  358:}
        -:  359:
        -:  360:// --------------------------------------------------------------------
    #####:  361:void CZMA_PARSE::log_data_dump( void ) {
        -:  362:	int address, count;
    #####:  363:	std::stringstream line;
    #####:  364:	address = this->get_code_address();
        -:  365:	count = 0;
    #####:  366:	line.str("");
    #####:  367:	for( auto d : data ) {
    #####:  368:		if( count == 0 ) {
    #####:  369:			line << std::hex << std::setw( 6 ) << std::setfill( '0' ) << address << ":";
        -:  370:		}
    #####:  371:		line << " " << std::hex << std::setw( 2 ) << std::setfill( '0' ) << (int)d;
    #####:  372:		address++;
    #####:  373:		count++;
    #####:  374:		if( count == 8 ) {
    #####:  375:			log.push_back( line.str() );
    #####:  376:			line.str( "" );
        -:  377:			count = 0;
        -:  378:		}
        -:  379:	}
    #####:  380:	if( count != 0 ) {
    #####:  381:		log.push_back( line.str() );
        -:  382:	}
    #####:  383:}
        -:  384:
        -:  385:// --------------------------------------------------------------------
     8522:  386:std::string CZMA_PARSE::get_line( void ) {
        -:  387:	std::string r, ss;
        -:  388:
        -:  389:	r = "";
    39479:  390:	for( auto &s : words ) {
    61914:  391:		if( s.size() > 0 && (s[0] == '\"' || s[0] == '\'') ){
      130:  392:			ss = s[ 0 ];
     1298:  393:			for( int i = 1; i < (int)s.size(); i++ ) {
     1168:  394:				switch( s[i] ) {
    #####:  395:				case '\a':	ss = ss + "\\a";	break;
    #####:  396:				case '\b':	ss = ss + "\\b";	break;
    #####:  397:				case '\f':	ss = ss + "\\f";	break;
    #####:  398:				case '\n':	ss = ss + "\\n";	break;
    #####:  399:				case '\r':	ss = ss + "\\r";	break;
    #####:  400:				case '\t':	ss = ss + "\\t";	break;
        2:  401:				case '\\':	ss = ss + "\\\\";	break;
    #####:  402:				case '\'':	ss = ss + "\\'";	break;
    #####:  403:				case '\"':	ss = ss + "\\\"";	break;
     1166:  404:				default:	ss = ss + s[i];		break;
        -:  405:				}
        -:  406:			}
      260:  407:			ss = ss + s[0];
        -:  408:		}
        -:  409:		else {
        -:  410:			ss = s;
        -:  411:		}
    30957:  412:		if( r == "" ) {
        -:  413:			r = ss;
        -:  414:		}
    22435:  415:		else if( ss == "," ){
    15300:  416:			r = r + ss;
        -:  417:		}
    14785:  418:		else if( ss[ 0 ] == '0' && ss[ 1 ] == 'X' ){
     6033:  419:			ss[ 1 ] = 'x';
    18099:  420:			r = r + " " + ss;
        -:  421:		}
    11666:  422:		else if( ss[ 0 ] == '0' && ss[ 1 ] == 'B' ){
        3:  423:			ss[ 1 ] = 'b';
        9:  424:			r = r + " " + ss;
        -:  425:		}
        -:  426:		else {
    34996:  427:			r = r + " " + ss;
        -:  428:		}
        -:  429:	}
     8522:  430:	return r;
      243:  431:}
