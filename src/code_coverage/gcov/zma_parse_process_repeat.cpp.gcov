        -:    0:Source:../sub/zma_parse_process_repeat.cpp
        -:    0:Programs:106
        -:    1:// --------------------------------------------------------------------
        -:    2://	Z80 Macro Assembler parse
        -:    3:// ====================================================================
        -:    4://	2019/05/04	t.hara
        -:    5:// --------------------------------------------------------------------
        -:    6:
        -:    7:#include "zma_parse.hpp"
        -:    8:#include "zma_text.hpp"
        -:    9:#include "zma_parse_process.hpp"
        -:   10:#include <string>
        -:   11:#include <cctype>
        -:   12:#include <iostream>
        -:   13:#include <fstream>
        -:   14:#include <sstream>
        -:   15:#include <algorithm>
        -:   16:
        -:   17:#include "zma_parse_process_repeat.hpp"
        -:   18:
        -:   19:// --------------------------------------------------------------------
        -:   20://	REPEAT文は特殊な構造を持つのでこのメソッドを定義
        -:   21://	load 時は、このクラスは REPEATの1行目単独を示している。
        -:   22://	この関数では、REPEAT〜ENDR全体を示すように変更する。
       28:   23:void CZMA_PARSE_REPEAT::block_structure( std::vector<CZMA_PARSE *> &m_text, std::vector<CZMA_PARSE *>::iterator &pp_current ){
        -:   24:
       56:   25:	while( pp_current != m_text.end() ){
        -:   26:		//	ENDR か？
      156:   27:		if( ( *pp_current )->words.size() > 0 && ( *pp_current )->words[ 0 ] == "ENDR" ){
        -:   28:			//	ENDR自体はもう不要なので削除
       24:   29:			pp_current = m_text.erase( pp_current );
       24:   30:			break;
        -:   31:		}
        -:   32:		//	中身を this->m_text に詰める
        -:   33:		pp_current++;
       98:   34:		while( pp_current != m_text.end() ){
      118:   35:			if( ( *pp_current )->words.size() == 0 ){
        -:   36:				//	through
        -:   37:			}
       58:   38:			else if( ( *pp_current )->words[ 0 ] == "ENDR" ){
        -:   39:				break;
        -:   40:			}
       35:   41:			( *pp_current )->block_structure( m_text, pp_current );
       70:   42:			this->m_text.m_text.push_back( *pp_current );
       35:   43:			pp_current = m_text.erase( pp_current );
        -:   44:		}
        -:   45:	}
        -:   46:	pp_current--;
       28:   47:}
        -:   48:
        -:   49:// --------------------------------------------------------------------
        9:   50:std::vector< std::vector< std::string > > CZMA_PARSE_REPEAT::get_words( void ){
        9:   51:	std::vector< std::vector< std::string > > list, sub_list;
       27:   52:	std::vector< std::string > words_endif = { "ENDR" };
        -:   53:
        9:   54:	list.push_back( this->words );
       18:   55:	for( auto &p_block : this->m_text.m_text ){
       18:   56:		sub_list = p_block->get_words();
        9:   57:		list.insert( list.end(), sub_list.begin(), sub_list.end() );
        -:   58:	}
        9:   59:	list.push_back( words_endif );
        9:   60:	return list;
        -:   61:}
        -:   62:
        -:   63:// --------------------------------------------------------------------
       26:   64:bool CZMA_PARSE_REPEAT::write_output_and_log( CZMA_INFORMATION& info, std::ofstream* f ) {
        -:   65:	bool result;
        -:   66:
        -:   67:	result = true;
       86:   68:	for( auto &line : log_header ){
       60:   69:		info.log << line << std::endl;
        -:   70:	}
      374:   71:	for( auto text : this->m_text_list ) {
      348:   72:		result = result && text->write( info, f );
        -:   73:	}
       78:   74:	for( auto &line : log ) {
       52:   75:		info.log << line << std::endl;
        -:   76:	}
       26:   77:	return result;
        -:   78:}
        -:   79:
        -:   80:// --------------------------------------------------------------------
       88:   81:bool CZMA_PARSE_REPEAT::process( CZMA_INFORMATION& info, CZMA_PARSE* p_last_line ) {
        -:   82:	std::string label;
        -:   83:	CVALUE v;
        -:   84:	int index, i;
        -:   85:	unsigned int sub_success_count;
        -:   86:	CZMA_TEXT *p_text;
        -:   87:	CZMA_PARSE *p_parse;
        -:   88:	std::string s_scope;
       88:   89:	std::vector< std::string > label_line;
        -:   90:
       88:   91:	update_flags( &info, p_last_line );
       88:   92:	if( !this->is_counter_end_fixed ) {
       72:   93:		if( words.size() < 4 ) {
        -:   94:			//	REPEAT 変数名 , 値 で、少なくとも 4[word] なければならない
       15:   95:			put_error( CZMA_ERROR::get( CZMA_ERROR_CODE::ILLEGAL_PARAMETER ) );
        3:   96:			return false;
        -:   97:		}
       33:   98:		if( words[2] != "," ) {
       15:   99:			put_error( CZMA_ERROR::get( CZMA_ERROR_CODE::ILLEGAL_PARAMETER ) );
        3:  100:			return false;
        -:  101:		}
        -:  102:		//	"REPEAT 変数名 , 値" の 値を評価する
       30:  103:		index = this->expression( info, 3, v );
       30:  104:		if( index == 0 ) {
       20:  105:			put_error( CZMA_ERROR::get( CZMA_ERROR_CODE::ILLEGAL_EXPRESSION ) );
        4:  106:			return false;
        -:  107:		}
       52:  108:		if( index < ( int) words.size() ) {
       15:  109:			put_error( CZMA_ERROR::get( CZMA_ERROR_CODE::ILLEGAL_EXPRESSION ) );
        3:  110:			return false;
        -:  111:		}
       23:  112:		if( v.value_type != CVALUE_TYPE::CV_INTEGER ) {
       15:  113:			put_error( CZMA_ERROR::get( CZMA_ERROR_CODE::ILLEGAL_PARAMETER ) );
        3:  114:			return false;
        -:  115:		}
       20:  116:		this->counter_end = v.i;
       20:  117:		this->is_counter_end_fixed = true;
       60:  118:		this->scope_name = "@REPEAT" + std::to_string( info.get_auto_label_index() );
       20:  119:		info.scope.push_back( this->scope_name );
       20:  120:		v.value_type = CVALUE_TYPE::CV_INTEGER;
       20:  121:		v.i = 0;
       80:  122:		this->counter_symbol = info.get_scope_path() + words[ 1 ];
       20:  123:		info.dict[this->counter_symbol] = v;
        -:  124:
       20:  125:		info.is_updated = true;
        -:  126:	}
        -:  127:	else{
       52:  128:		info.scope.push_back( this->scope_name );
      208:  129:		this->counter_symbol = info.get_scope_path() + words[ 1 ];
        -:  130:	}
        -:  131:	//	log
       72:  132:	if( !is_analyze_phase ){
       40:  133:		log_header.write_line_infomation( this->line_no, this->code_address, this->file_address, get_line() );
       60:  134:		log_header.write_message( "Enter scope: " + info.get_scope_path() );
       20:  135:		log_header.write_separator();
        -:  136:	}
        -:  137:
        -:  138:	//	this->m_text_list が空っぽなら中身を詰める
       72:  139:	if( !this->is_loaded ){
      716:  140:		for( i = 0; i < this->counter_end; i++ ){
      348:  141:			info.dict[ this->counter_symbol ].i = i;
      348:  142:			p_text = new CZMA_TEXT;
      724:  143:			for( auto p : this->m_text.m_text ){
        -:  144:				//	ここでは、 LABEL: COMMAND の形はあり得ない。m_text に登録済みの内容なので、 LABEL: と COMMAND に分解されている。
      752:  145:				auto words_list = p->get_words();
      772:  146:				for( auto &insert_line : words_list ){
      396:  147:					p_parse = CZMA_PARSE::create( info, insert_line, this->p_file_name, this->line_no );
      396:  148:					p_text->m_text.push_back( p_parse );
        -:  149:				}
        -:  150:			}
      348:  151:			p_text->analyze_structure();
      348:  152:			this->m_text_list.push_back( p_text );
        -:  153:		}
       20:  154:		this->is_loaded = true;
       20:  155:		info.is_updated = true;
        -:  156:	}
        -:  157:	//	中身を処理する
     2220:  158:	for( i = 0; i < this->counter_end; i++ ){
     1074:  159:		info.dict[ this->counter_symbol ].i = i;
     2148:  160:		p_last_line = this->m_text_list[ i ]->process( info, sub_success_count, p_last_line, !is_analyze_phase );
        -:  161:	}
        -:  162:
        -:  163:	//	データが確定したか確認する
       72:  164:	if( !this->is_data_fixed ){
       36:  165:		this->is_data_fixed = true;
      444:  166:		for( auto p_text : this->m_text_list ){
      884:  167:			for( auto p : p_text->m_text ){
      476:  168:				this->is_data_fixed = this->is_data_fixed && p->check_data_fixed();
        -:  169:			}
        -:  170:		}
       36:  171:		if( this->is_data_fixed ){
       17:  172:			info.is_updated = true;
        -:  173:		}
        -:  174:	}
        -:  175:
        -:  176:	//	コードサイズを計算する
       72:  177:	if( this->code_size == -1 ){
       31:  178:		this->code_size = 0;
      365:  179:		for( auto p_text : this->m_text_list ){
      702:  180:			for( auto p : p_text->m_text ){
      368:  181:				if( this->code_size != -1 && p->is_fixed_code_size() ){
      354:  182:					this->code_size = this->code_size + p->get_code_size();
        -:  183:				}
        -:  184:				else{
       14:  185:					this->code_size = -1;
       14:  186:					break;
        -:  187:				}
        -:  188:			}
      348:  189:			if( this->code_size == -1 ){
        -:  190:				break;
        -:  191:			}
        -:  192:		}
       31:  193:		if( this->code_size != -1 ){
       17:  194:			info.is_updated = true;
        -:  195:		}
        -:  196:	}
        -:  197:
        -:  198:	//	次のアドレスを計算する
       72:  199:	if( this->next_code_address == -1 ){
       31:  200:		if( p_last_line == nullptr ){
        1:  201:			this->next_code_address = 0;
        -:  202:		}
        -:  203:		else{
       30:  204:			this->next_code_address = p_last_line->get_next_code_address();
        -:  205:		}
       31:  206:		if( this->next_code_address != -1 ){
       17:  207:			info.is_updated = true;
        -:  208:		}
        -:  209:	}
        -:  210:
        -:  211:	//	log
       72:  212:	if( !is_analyze_phase ){
       40:  213:		log.write_message( "Exit scope: " + s_scope );
       20:  214:		log.write_separator();
        -:  215:	}
      144:  216:	s_scope = info.get_scope_path();
        -:  217:	info.scope.pop_back();
        -:  218:	return check_all_fixed();
        -:  219:}
        -:  220:
        -:  221:// --------------------------------------------------------------------
       36:  222:bool CZMA_PARSE_ENDR::process( CZMA_INFORMATION& info, CZMA_PARSE* p_last_line ) {
        -:  223:	//	本来、これは実行されるべきでないので、常にエラーを返す。
      180:  224:	put_error( CZMA_ERROR::get( CZMA_ERROR_CODE::SYNTAX_ERROR ) );
       36:  225:	return false;
      172:  226:}
