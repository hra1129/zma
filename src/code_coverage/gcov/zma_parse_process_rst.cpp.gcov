        -:    0:Source:../sub/zma_parse_process_rst.cpp
        -:    0:Programs:106
        -:    1:// --------------------------------------------------------------------
        -:    2://	Z80 Macro Assembler parse
        -:    3:// ====================================================================
        -:    4://	2019/05/04	t.hara
        -:    5:// --------------------------------------------------------------------
        -:    6:
        -:    7:#include "zma_parse.hpp"
        -:    8:#include "zma_text.hpp"
        -:    9:#include "zma_parse_process.hpp"
        -:   10:#include <string>
        -:   11:#include <cctype>
        -:   12:#include <iostream>
        -:   13:#include <fstream>
        -:   14:#include <sstream>
        -:   15:#include <algorithm>
        -:   16:
        -:   17:#include "zma_parse_process_rst.hpp"
        -:   18:
        -:   19:// --------------------------------------------------------------------
       63:   20:bool CZMA_PARSE_RST::process( CZMA_INFORMATION& info, CZMA_PARSE* p_last_line ) {
        -:   21:	CVALUE p;
        -:   22:	int index;
       63:   23:	update_flags( &info, p_last_line );
      126:   24:	if( words.size() >= 2 ) {
       60:   25:		index = this->expression( info, 1, p );
       60:   26:		if( index == 0 ) {
       15:   27:			put_error( CZMA_ERROR::get( CZMA_ERROR_CODE::ILLEGAL_EXPRESSION ) );
        3:   28:			return false;
        -:   29:		}
       57:   30:		if( p.value_type != CVALUE_TYPE::CV_INTEGER ) {
       15:   31:			put_error( CZMA_ERROR::get( CZMA_ERROR_CODE::ILLEGAL_EXPRESSION ) );
        3:   32:			return false;
        -:   33:		}
      108:   34:		if( index < (int)words.size() ) {
       15:   35:			put_error( CZMA_ERROR::get( CZMA_ERROR_CODE::ILLEGAL_OPERAND ) );
        3:   36:			return false;
        -:   37:		}
       51:   38:		if( (p.i & ~0x38) != 0 ) {
       15:   39:			put_error( CZMA_ERROR::get( CZMA_ERROR_CODE::ILLEGAL_OPERAND ) );
        3:   40:			return false;
        -:   41:		}
       48:   42:		if( !this->is_data_fixed ) {
       16:   43:			this->is_data_fixed = true;
        -:   44:			this->set_code_size( &info, 1 );
       32:   45:			this->data.push_back( 0xC7 | p.i );
        -:   46:		}
        -:   47:		//	log
       48:   48:		if( !this->is_analyze_phase ) {
       32:   49:			log.write_line_infomation( this->line_no, this->code_address, this->file_address, get_line() );
       32:   50:			log.write_cycle_information( 12, 6, -1, 7 );
       16:   51:			log.write_dump( this->code_address, this->file_address, this->data );
       16:   52:			log.write_separator();
        -:   53:		}
        -:   54:		return check_all_fixed();
        -:   55:	}
       15:   56:	put_error( CZMA_ERROR::get( CZMA_ERROR_CODE::ILLEGAL_OPERAND ) );
        3:   57:	return false;
      162:   58:}
        -:   59:
