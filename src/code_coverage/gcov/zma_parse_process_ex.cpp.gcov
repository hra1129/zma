        -:    0:Source:../sub/zma_parse_process_ex.cpp
        -:    0:Programs:103
        -:    1:// --------------------------------------------------------------------
        -:    2://	Z80 Macro Assembler parse
        -:    3:// ====================================================================
        -:    4://	2019/05/04	t.hara
        -:    5:// --------------------------------------------------------------------
        -:    6:
        -:    7:#include "zma_parse.hpp"
        -:    8:#include "zma_text.hpp"
        -:    9:#include "zma_parse_process.hpp"
        -:   10:#include <string>
        -:   11:#include <cctype>
        -:   12:#include <iostream>
        -:   13:#include <fstream>
        -:   14:#include <sstream>
        -:   15:#include <algorithm>
        -:   16:
        -:   17:// --------------------------------------------------------------------
       15:   18:bool CZMA_PARSE_EX::process( CZMA_INFORMATION& info, CZMA_PARSE* p_last_line ) {
        -:   19:
       15:   20:	update_flags( &info, p_last_line );
       15:   21:	if( !this->is_data_fixed ) {
        5:   22:		this->is_data_fixed = true;
       14:   23:		if( words.size() == 4 && words[1] == "DE" && words[2] == "," && words[3] == "HL" ) {
        -:   24:			this->set_code_size( &info, 1 );
        2:   25:			this->data.push_back( 0xEB );
        -:   26:		}
        7:   27:		else if( words.size() == 4 && words[1] == "AF" && words[2] == "," && words[3] == "AF'" ) {
        -:   28:			this->set_code_size( &info, 1 );
        2:   29:			this->data.push_back( 0x08 );
        -:   30:		}
       15:   31:		else if( words.size() == 6 && words[1] == "[" && words[2] == "SP" && words[3] == "]" && words[4] == "," ) {
        3:   32:			if( words[5] == "HL" ) {
        -:   33:				this->set_code_size( &info, 1 );
        2:   34:				this->data.push_back( 0xE3 );
        -:   35:			}
        2:   36:			else if( words[5] == "IX" ) {
        -:   37:				this->set_code_size( &info, 2 );
        2:   38:				this->data.push_back( 0xDD );
        2:   39:				this->data.push_back( 0xE3 );
        -:   40:			}
        1:   41:			else if( words[5] == "IY" ) {
        -:   42:				this->set_code_size( &info, 2 );
        2:   43:				this->data.push_back( 0xFD );
        2:   44:				this->data.push_back( 0xE3 );
        -:   45:			}
        -:   46:			else {
    #####:   47:				this->is_data_fixed = false;
    #####:   48:				put_error( "Illegal operand" );
    #####:   49:				return false;
        -:   50:			}
        -:   51:		}
        -:   52:		else {
    #####:   53:			this->is_data_fixed = false;
    #####:   54:			put_error( "Illegal operand" );
    #####:   55:			return false;
        -:   56:		}
        -:   57:	}
        -:   58:	//	log
       15:   59:	if( !this->is_analyze_phase ) {
       10:   60:		log.write_line_infomation( this->line_no, this->code_address, this->file_address, get_line() );
       10:   61:		if( words.size() == 6 ) {
        3:   62:			if( words[5] == "HL" ) {
        2:   63:				log.write_cycle_information( 20, 7 );			//	EX (SP), HL
        -:   64:			}
        -:   65:			else {
        4:   66:				log.write_cycle_information( 25, 8 );			//	EX (SP), IX
        -:   67:			}
        -:   68:		}
        -:   69:		else {
        4:   70:			log.write_cycle_information( 5, 1 );			//	EX DE, HL/ EX AF, AF'
        -:   71:		}
        5:   72:		log.write_dump( this->code_address, this->file_address, this->data );
        5:   73:		log.write_separator();
        -:   74:	}
        -:   75:	return check_all_fixed();
       12:   76:}
        -:   77:
