        -:    0:Source:../zma_text.cpp
        -:    0:Programs:4
        -:    1:// --------------------------------------------------------------------
        -:    2://	ZMA: CZMA_TEXT
        -:    3:// ====================================================================
        -:    4://	2019/05/02	t.hara
        -:    5:// --------------------------------------------------------------------
        -:    6:
        -:    7:#include "zma_text.hpp"
        -:    8:#include <fstream>
        -:    9:#include <iostream>
        -:   10:
        -:   11:// ----------------------------------------------------------------
        -:   12://	Constructor
        -:   13:// ----------------------------------------------------------------
      340:   14:CZMA_TEXT::CZMA_TEXT() {
      340:   15:	code_size = 0;
      340:   16:	next_code_address = 0;
      340:   17:}
        -:   18:
        -:   19:// ----------------------------------------------------------------
        -:   20://	Destructor
        -:   21:// ----------------------------------------------------------------
      112:   22:CZMA_TEXT::~CZMA_TEXT() {
     7454:   23:	for( auto p: m_text ) { 
     7398:   24:		delete p; 
        -:   25:	}
       56:   26:}
        -:   27:
        -:   28:// ----------------------------------------------------------------
        -:   29://	File Load
        -:   30:// ----------------------------------------------------------------
       69:   31:bool CZMA_TEXT::load( CZMA_INFORMATION &info, const char* p_file_name ) {
       69:   32:	m_text.clear();
      138:   33:	std::string s;
        -:   34:	CZMA_PARSE *p_parse;
        -:   35:	int line_no;
        -:   36:
      138:   37:	std::ifstream file;
       69:   38:	file.open( p_file_name );
       69:   39:	if( !file ) {
    #####:   40:		return false;
        -:   41:	}
       69:   42:	line_no = 1;
     7602:   43:	for( ;; line_no++) {
    15273:   44:		if(file.bad()) {
    #####:   45:			break;
        -:   46:		}
     7671:   47:		if(!std::getline( file, s )) {
       69:   48:			break;
        -:   49:		}
     7602:   50:		p_parse = CZMA_PARSE::create( info, s, p_file_name, line_no );
     7602:   51:		m_text.push_back( p_parse );
        -:   52:	}
       69:   53:	file.close();
       69:   54:	return true;
        -:   55:}
        -:   56:
        -:   57:// --------------------------------------------------------------------
     1106:   58:CZMA_PARSE *CZMA_TEXT::process( CZMA_INFORMATION &info, unsigned int &success_count, CZMA_PARSE *p_prev_line, bool output_mode ) {
        -:   59:	CZMA_PARSE* p_prev;
        -:   60:	bool result;
     1106:   61:	int nest_count = 0;
     1106:   62:	p_prev = p_prev_line;
     1106:   63:	result = true;
     1106:   64:	success_count = 0;
    26799:   65:	for( auto p = m_text.begin(); p != m_text.end(); ) {
    25693:   66:		if( output_mode ) {
     8238:   67:			(*p)->set_output_mode();
        -:   68:		}
    25693:   69:		if( info.is_block_processing ) {
        -:   70:			//	ブロックの中の処理
      255:   71:			if( (*p)->words.size() >= 1 && info.block_end_table.count( (*p)->words[0] ) ) {
        -:   72:				//	ブロックを閉じる記号を発見
      114:   73:				if( (*p)->words[0] == "ENDR" || (*p)->words[0] == "ENDM" || (*p)->words[0] == "ENDIF" ) {
        -:   74:					//	特に ENDR, ENDM, ENDIF の処理
       95:   75:					if( nest_count ) {
        -:   76:						//	ブロック内のブロックだったのでネスト数を減らすだけ
        9:   77:						nest_count--;
        9:   78:						info.p_text->push_back( *p );
        9:   79:						p = m_text.erase( p );
        9:   80:						continue;
        -:   81:					}
        -:   82:				}
      106:   83:				if( nest_count == 0 ) {
      106:   84:					if( info.block_type != info.block_end_table[(*p)->words[0]] ) {
        -:   85:						//	着目ブロックの種類と異なる「閉じる記号」を発見
        2:   86:						(*p)->put_structure_error( "Invalid block pair." );
        2:   87:						p_prev = (*p);
        2:   88:						p++;
        2:   89:						continue;
        -:   90:					}
        -:   91:					//	「閉じる記号」の処理
      102:   92:					if( (*p)->process( info, p_prev ) ) {
       37:   93:						success_count++;
        -:   94:					}
      102:   95:					p_prev = (*p);
      102:   96:					p++;
        -:   97:				}
        -:   98:				else {
        1:   99:					info.p_text->push_back( *p );
        1:  100:					p = m_text.erase( p );
        1:  101:					continue;
        -:  102:				}
        -:  103:			}
        -:  104:			else {
      141:  105:				if( (*p)->words.size() >= 1 && info.block_begin_table.count( (*p)->words[0] ) ) {
        -:  106:					//	ブロックの内側にブロックの開始を発見
        9:  107:					if( (*p)->words[0] == "REPEAT" || (*p)->words[0] == "IF" ) {
        9:  108:						nest_count++;
        -:  109:					}
        -:  110:				}
      133:  111:				else if( (*p)->words.size() >= 2 && (*p)->words[1] == "MACRO" ) {
        -:  112:					//	ブロックの内側にマクロ宣言を発見
        1:  113:					(*p)->put_structure_error( "MACRO cannot define in MACRO/REPEAT/IF block." );
        1:  114:					p_prev = (*p);
        1:  115:					p++;
        1:  116:					continue;
        -:  117:				}
      140:  118:				info.p_text->push_back( *p );
      140:  119:				p = m_text.erase( p );
        -:  120:			}
        -:  121:		}
        -:  122:		else {
        -:  123:			//	パースエラーを起こした行の場合、再パースを試みる
    25438:  124:			if( (*p)->is_parse_error() ) {
       14:  125:				CZMA_PARSE *p_parse = CZMA_PARSE::create( info, (*p)->get_line(), (*p)->get_file_name(), (*p)->get_line_no() );
       14:  126:				if( !(p_parse->is_parse_error()) ) {
        2:  127:					p = m_text.erase( p );
        2:  128:					p = m_text.insert( p, p_parse );
        -:  129:				}
        -:  130:				else {
       12:  131:					delete p_parse;
        -:  132:				}
        -:  133:			}
        -:  134:			//	ブロックの外側の処理
    25438:  135:			if( (*p)->process( info, p_prev ) ) {
     9624:  136:				success_count++;
        -:  137:			}
    25438:  138:			p_prev = (*p);
    25438:  139:			p++;
        -:  140:		}
        -:  141:	}
     1106:  142:	return p_prev;
        -:  143:}
        -:  144:
        -:  145:// --------------------------------------------------------------------
      113:  146:bool CZMA_TEXT::all_process( CZMA_INFORMATION& info ) {
        -:  147:	unsigned int success_count;
        -:  148:	CZMA_PARSE* p_last_line;
        -:  149:
        -:  150:	for( ; ; ) {
      170:  151:		success_count = 0;
      113:  152:		info.scope.clear();
      113:  153:		info.is_updated = false;
      113:  154:		info.is_block_processing = false;
      113:  155:		info.auto_label_index = 0;
      113:  156:		p_last_line = this->process( info, success_count, nullptr, false );
      113:  157:		if( info.is_block_processing ) {
        8:  158:			p_last_line->set_output_mode();
        8:  159:			p_last_line->put_error( "Block processing is not close." );
        8:  160:			break;
        -:  161:		}
      105:  162:		if( !info.is_updated ) {
       48:  163:			break;
        -:  164:		}
        -:  165:	}
       56:  166:	info.scope.clear();
       56:  167:	info.is_block_processing = false;
       56:  168:	info.auto_label_index = 0;
       56:  169:	p_last_line = this->process( info, success_count, nullptr, true );
       56:  170:	if( p_last_line == nullptr ) {
    #####:  171:		std::cerr << "Code is not found.\n";
    #####:  172:		return false;
        -:  173:	}
       56:  174:	if( info.scope.size() > 0 ) {
        5:  175:		p_last_line->put_error( "Scope is not closed." );
        5:  176:		return false;
        -:  177:	}
       51:  178:	if( CZMA_PARSE::get_number_of_errors() ) {
       27:  179:		std::cerr << "Found " << CZMA_PARSE::get_number_of_errors() << " error(s).\n";
       27:  180:		return false;
        -:  181:	}
       24:  182:	return true;
        -:  183:}
        -:  184:
        -:  185:// --------------------------------------------------------------------
      300:  186:bool CZMA_TEXT::write( CZMA_INFORMATION& info, std::ofstream* f ) {
        -:  187:	bool result;
        -:  188:
      300:  189:	result = true;
     8538:  190:	for( auto p: m_text ) {
     8238:  191:		result = result & p->write( info, f );
        -:  192:	}
      300:  193:	return result;
        -:  194:}
        -:  195:
        -:  196:// --------------------------------------------------------------------
       56:  197:bool CZMA_TEXT::save( CZMA_INFORMATION& info, const char* p_file_name ) {
      112:  198:	std::ofstream f;
        -:  199:
       56:  200:	f.open( p_file_name, std::ios::out | std::ios::binary );
       56:  201:	bool result = this->write( info, &f );
       56:  202:	info.write();
      112:  203:	return result;
      168:  204:}
