        -:    0:Source:../sub/zma_parse_process_binary_link.cpp
        -:    0:Programs:103
        -:    1:// --------------------------------------------------------------------
        -:    2://	Z80 Macro Assembler parse
        -:    3:// ====================================================================
        -:    4://	2019/05/04	t.hara
        -:    5:// --------------------------------------------------------------------
        -:    6:
        -:    7:#include "zma_parse.hpp"
        -:    8:#include "zma_text.hpp"
        -:    9:#include "zma_parse_process.hpp"
        -:   10:#include <string>
        -:   11:#include <cctype>
        -:   12:#include <iostream>
        -:   13:#include <fstream>
        -:   14:#include <sstream>
        -:   15:#include <algorithm>
        -:   16:
        -:   17:// --------------------------------------------------------------------
        3:   18:bool CZMA_PARSE_BINARY_LINK::process( CZMA_INFORMATION& info, CZMA_PARSE* p_last_line ) {
        -:   19:	int i, count;
        -:   20:	unsigned char d;
        -:   21:	CVALUE path;
        -:   22:
        3:   23:	update_flags( &info, p_last_line );
        6:   24:	if( words.size() < 2 ){
    #####:   25:		put_error( "Illegal expression." );
    #####:   26:		return false;
        -:   27:	}
        3:   28:	i = this->expression( info, 1, path, false );
        3:   29:	if( i == 0 ){
    #####:   30:		put_error( "Illegal expression." );
    #####:   31:		return false;
        -:   32:	}
        3:   33:	if( path.value_type != CVALUE_TYPE::CV_STRING ){
    #####:   34:		put_error( "Illegal parameter." );
    #####:   35:		return false;
        -:   36:	}
        6:   37:	if( i < (int)words.size() ){
    #####:   38:		put_error( "Too many parameters." );
    #####:   39:		return false;
        -:   40:	}
        3:   41:	if( !this->is_fixed_code_size() ) {
        2:   42:		std::ifstream file;
        1:   43:		file.open( path.s, std::ios::binary );
        1:   44:		if( !file ){
    #####:   45:			put_error( "Too many parameters." );
    #####:   46:			return false;
        -:   47:		}
        1:   48:		file.seekg( 0, std::ifstream::end );
        1:   49:		count = static_cast<int>( file.tellg() );
        1:   50:		file.seekg( 0, std::ifstream::beg );
        1:   51:		this->set_code_size( &info, count );
        -:   52:
       21:   53:		for( i = 0; i < count; i++ ){
       10:   54:			file.read( (char*) &d, 1 );
       10:   55:			data.push_back( d );
        -:   56:		}
        1:   57:		this->is_data_fixed = true;
        -:   58:	}
        -:   59:	//	log
        3:   60:	if( !this->is_analyze_phase ) {
        2:   61:		log.write_line_infomation( this->line_no, this->code_address, this->file_address, get_line() );
        1:   62:		log.write_dump( this->code_address, this->file_address, this->data );
        1:   63:		log.write_separator();
        -:   64:	}
        -:   65:	return check_all_fixed();
       12:   66:}
        -:   67:
