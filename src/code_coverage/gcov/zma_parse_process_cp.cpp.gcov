        -:    0:Source:../sub/zma_parse_process_cp.cpp
        -:    0:Programs:106
        -:    1:// --------------------------------------------------------------------
        -:    2://	Z80 Macro Assembler parse
        -:    3:// ====================================================================
        -:    4://	2019/05/04	t.hara
        -:    5:// --------------------------------------------------------------------
        -:    6:
        -:    7:#include "zma_parse.hpp"
        -:    8:#include "zma_text.hpp"
        -:    9:#include "zma_parse_process.hpp"
        -:   10:#include <string>
        -:   11:#include <cctype>
        -:   12:#include <iostream>
        -:   13:#include <fstream>
        -:   14:#include <sstream>
        -:   15:#include <algorithm>
        -:   16:
        -:   17:#include "zma_parse_process_cp.hpp"
        -:   18:
        -:   19:// --------------------------------------------------------------------
      207:   20:bool CZMA_PARSE_CP::process( CZMA_INFORMATION& info, CZMA_PARSE* p_last_line ) {
        -:   21:
      207:   22:	update_flags( &info, p_last_line );
      207:   23:	if( this->opecode_a_source8( info, 0xB8 ) ) {
        -:   24:		//	log
       99:   25:		if( !this->is_analyze_phase ) {
       66:   26:			log.write_line_infomation( this->line_no, this->code_address, this->file_address, get_line() );
       66:   27:			if( data.size() == 2 ) {
       24:   28:				log.write_cycle_information( 10, 2 );	//	CP A, IXh
        -:   29:			}
        -:   30:			else {
       42:   31:				log.write_cycle_information( 5, 1 );	//	CP A, r
        -:   32:			}
       33:   33:			log.write_dump( this->code_address, this->file_address, this->data );
       33:   34:			log.write_separator();
        -:   35:		}
        -:   36:		return check_all_fixed();
        -:   37:	}
      108:   38:	if( this->opecode_a_n8( info, 0xFE ) ) {
        -:   39:		//	log
       12:   40:		if( !this->is_analyze_phase ) {
        8:   41:			log.write_line_infomation( this->line_no, this->code_address, this->file_address, get_line() );
        8:   42:			log.write_cycle_information( 8, 2 );	//	CP A, n
        4:   43:			log.write_dump( this->code_address, this->file_address, this->data );
        4:   44:			log.write_separator();
        -:   45:		}
        -:   46:		return check_all_fixed();
        -:   47:	}
       96:   48:	if( this->opecode_a_memory_hl( info, 0xBE ) ) {
        -:   49:		//	log
       33:   50:		if( !this->is_analyze_phase ) {
       22:   51:			log.write_line_infomation( this->line_no, this->code_address, this->file_address, get_line() );
       22:   52:			if( words[4] == "HL" ) {
        6:   53:				log.write_cycle_information( 8, 4 );	//	CP A, [HL]
        -:   54:			}
        -:   55:			else {
       16:   56:				log.write_cycle_information( 21, 7 );	//	CP A, [IX+o]
        -:   57:			}
       11:   58:			log.write_dump( this->code_address, this->file_address, this->data );
       11:   59:			log.write_separator();
        -:   60:		}
        -:   61:		return check_all_fixed();
        -:   62:	}
       63:   63:	if( this->opecode_source8( info, 0xB8 ) ){
        -:   64:		//	log
       48:   65:		if( !this->is_analyze_phase ){
       32:   66:			log.write_line_infomation( this->line_no, this->code_address, this->file_address, get_line() );
       32:   67:			if( data.size() == 2 ){
        8:   68:				log.write_cycle_information( 10, 2 );	//	CP IXh
        -:   69:			}
        -:   70:			else{
       24:   71:				log.write_cycle_information( 5, 1 );	//	CP r
        -:   72:			}
       16:   73:			log.write_dump( this->code_address, this->file_address, this->data );
       16:   74:			log.write_separator();
        -:   75:		}
        -:   76:		return check_all_fixed();
        -:   77:	}
       15:   78:	if( this->opecode_n8( info, 0xFE ) ){
        -:   79:		//	log
        9:   80:		if( !this->is_analyze_phase ){
        6:   81:			log.write_line_infomation( this->line_no, this->code_address, this->file_address, get_line() );
        6:   82:			log.write_cycle_information( 8, 2 );	//	CP n
        3:   83:			log.write_dump( this->code_address, this->file_address, this->data );
        3:   84:			log.write_separator();
        -:   85:		}
        -:   86:		return check_all_fixed();
        -:   87:	}
       30:   88:	put_error( CZMA_ERROR::get( CZMA_ERROR_CODE::ILLEGAL_OPERAND ) );
        6:   89:	return false;
      162:   90:}
        -:   91:
