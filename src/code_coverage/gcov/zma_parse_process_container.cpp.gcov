        -:    0:Source:../sub/zma_parse_process_container.cpp
        -:    0:Programs:106
        -:    1:// --------------------------------------------------------------------
        -:    2://	Z80 Macro Assembler parse
        -:    3:// ====================================================================
        -:    4://	2019/05/04	t.hara
        -:    5:// --------------------------------------------------------------------
        -:    6:
        -:    7:#include "zma_parse.hpp"
        -:    8:#include "zma_text.hpp"
        -:    9:#include "zma_parse_process.hpp"
        -:   10:#include <string>
        -:   11:#include <cctype>
        -:   12:#include <iostream>
        -:   13:#include <fstream>
        -:   14:#include <sstream>
        -:   15:#include <algorithm>
        -:   16:
        -:   17:// --------------------------------------------------------------------
    #####:   18:bool CZMA_PARSE_CONTAINER::update_flags( CZMA_INFORMATION *p_info, const CZMA_PARSE *p_last_line ){
    #####:   19:	return true;
        -:   20:}
        -:   21:
        -:   22:// --------------------------------------------------------------------
    #####:   23:bool CZMA_PARSE_CONTAINER::write_output_and_log( CZMA_INFORMATION& info, std::ofstream* f ) {
        -:   24:
    #####:   25:	for( auto line : log ) {
    #####:   26:		info.log << line << " begin" << std::endl;
        -:   27:	}
    #####:   28:	bool result = this->text.write( info, f );
    #####:   29:	for( auto line : log ) {
    #####:   30:		info.log << line << " end" << std::endl;
        -:   31:		info.log << std::endl;
        -:   32:	}
    #####:   33:	return result;
        -:   34:}
        -:   35:
        -:   36:// --------------------------------------------------------------------
    #####:   37:bool CZMA_PARSE_CONTAINER::process( CZMA_INFORMATION& info, CZMA_PARSE* p_last_line ) {
        -:   38:	std::string s;
        -:   39:	int i;
        -:   40:	unsigned int success_count;
        -:   41:	CVALUE path;
    #####:   42:	std::ifstream f;
        -:   43:	bool is_open;
        -:   44:
    #####:   45:	update_flags( &info, p_last_line );
    #####:   46:	if( words.size() < 2 ) {
    #####:   47:		put_error( CZMA_ERROR::get( CZMA_ERROR_CODE::ILLEGAL_PARAMETER ) );
    #####:   48:		return false;
        -:   49:	}
    #####:   50:	i = this->expression( info, 1, path );
    #####:   51:	if( i == 0 ) {
    #####:   52:		put_error( CZMA_ERROR::get( CZMA_ERROR_CODE::ILLEGAL_EXPRESSION ) );
    #####:   53:		return false;
        -:   54:	}
    #####:   55:	if( path.value_type != CVALUE_TYPE::CV_STRING ) {
    #####:   56:		put_error( CZMA_ERROR::get( CZMA_ERROR_CODE::ILLEGAL_PARAMETER ) );
    #####:   57:		return false;
        -:   58:	}
    #####:   59:	if( i < (int)words.size() ) {
    #####:   60:		put_error( CZMA_ERROR::get( CZMA_ERROR_CODE::TOO_MANY_PARAMETERS ) );
    #####:   61:		return false;
        -:   62:	}
    #####:   63:	if( !this->is_loaded ) {
        -:   64:		is_open = false;
    #####:   65:		for( auto include_path : info.include_path ) {
    #####:   66:			s = include_path + "/" + path.s;
    #####:   67:			f.open( s.c_str() );
    #####:   68:			if( f ) {
    #####:   69:				f.close();
    #####:   70:				this->s_file_name = s;
    #####:   71:				if( this->text.load( info, this->s_file_name.c_str() ) ) {
    #####:   72:					this->is_loaded = true;
        -:   73:					is_open = true;
        -:   74:					break;
        -:   75:				}
        -:   76:			}
        -:   77:		}
        -:   78:		if( !is_open ) {
    #####:   79:			put_error( CZMA_ERROR::get( CZMA_ERROR_CODE::CANNOT_OPEN_THE_FILE ) );
    #####:   80:			return false;
        -:   81:		}
    #####:   82:		info.is_updated = true;
        -:   83:	}
        -:   84:	//	log
    #####:   85:	if( !this->is_analyze_phase ) {
    #####:   86:		log.write_line_infomation( this->line_no, this->code_address, this->file_address, get_line() );
        -:   87:	}
    #####:   88:	if( p_last_line->is_fixed_file_address() && p_last_line->is_fixed_code_size() ) {
    #####:   89:		this->file_address = p_last_line->get_file_address() + p_last_line->get_code_size();
        -:   90:	}
    #####:   91:	p_last_line = this->text.process( info, success_count, p_last_line, !this->is_analyze_phase );
    #####:   92:	if( p_last_line->is_fixed_next_code_address() ) {
    #####:   93:		this->next_code_address = p_last_line->get_next_code_address();
        -:   94:	}
    #####:   95:	if( !this->is_data_fixed ) {
    #####:   96:		for( auto p : text.m_text ) {
    #####:   97:			this->is_data_fixed = this->is_data_fixed && p->check_data_fixed();
        -:   98:		}
    #####:   99:		if( this->is_data_fixed ) {
    #####:  100:			info.is_updated = true;
        -:  101:		}
        -:  102:	}
    #####:  103:	if( this->code_size == -1 ) {
    #####:  104:		for( auto p : text.m_text ) {
    #####:  105:			if( this->code_size != -1 && p->is_fixed_code_size() ) {
    #####:  106:				this->code_size = this->code_size + p->get_code_size();
        -:  107:			}
        -:  108:			else {
    #####:  109:				this->code_size = -1;
        -:  110:			}
        -:  111:		}
    #####:  112:		if( this->code_size != -1 ) {
    #####:  113:			info.is_updated = true;
        -:  114:		}
        -:  115:	}
    #####:  116:	if( success_count < this->text.m_text.size() ) {
        -:  117:		return false;
        -:  118:	}
        -:  119:	return check_all_fixed();
      154:  120:}
