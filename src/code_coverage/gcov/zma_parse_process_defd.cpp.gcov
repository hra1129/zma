        -:    0:Source:../sub/zma_parse_process_defd.cpp
        -:    0:Programs:103
        -:    1:// --------------------------------------------------------------------
        -:    2://	Z80 Macro Assembler parse
        -:    3:// ====================================================================
        -:    4://	2019/05/04	t.hara
        -:    5:// --------------------------------------------------------------------
        -:    6:
        -:    7:#include "zma_parse.hpp"
        -:    8:#include "zma_text.hpp"
        -:    9:#include "zma_parse_process.hpp"
        -:   10:#include <string>
        -:   11:#include <cctype>
        -:   12:#include <iostream>
        -:   13:#include <fstream>
        -:   14:#include <sstream>
        -:   15:#include <algorithm>
        -:   16:
        -:   17:// --------------------------------------------------------------------
        8:   18:bool CZMA_PARSE_DEFD::process( CZMA_INFORMATION& info, CZMA_PARSE* p_last_line ) {
        -:   19:	int i, count;
        -:   20:	CVALUE v;
        -:   21:
        8:   22:	update_flags( &info, p_last_line );
        8:   23:	if( !this->is_fixed_code_size() ) {
        -:   24:		count = 1;
       58:   25:		for( i = 1; i < ( int) words.size(); i++ ) {
       36:   26:			if( words[i] == "," ) {
        8:   27:				count++;
        -:   28:			}
        -:   29:		}
        2:   30:		this->set_code_size( &info, count * 4 );
        -:   31:	}
        8:   32:	if( !this->is_data_fixed ) {
        -:   33:		i = 1;
       45:   34:		for( count = 0; (count * 4) < this->get_code_size(); count++ ) {
       23:   35:			i = this->expression( info, i, v );
       23:   36:			if( i == 0 ) {
    #####:   37:				put_error( "Cannot evaluate the expression(" + std::to_string( count + 1 ) + ")" );
        -:   38:				data.clear();
    #####:   39:				return false;
        -:   40:			}
       69:   41:			if( !v.is_integer() || v.is_unknown() ) {
        9:   42:				put_error( "Illegal expression." );
        -:   43:				data.clear();
        3:   44:				return false;
        -:   45:			}
       76:   46:			if( i < ( int) words.size() && words[i] != "," ) {
    #####:   47:				put_error( "Illegal expression." );
        -:   48:				data.clear();
    #####:   49:				return false;
        -:   50:			}
       20:   51:			i++;
       40:   52:			data.push_back( v.i & 255 );
       40:   53:			data.push_back( (v.i >> 8) & 255 );
       40:   54:			data.push_back( (v.i >> 16) & 255 );
       40:   55:			data.push_back( (v.i >> 24) & 255 );
        -:   56:		}
        2:   57:		this->is_data_fixed = true;
        -:   58:	}
        -:   59:	//	log
        5:   60:	if( !this->is_analyze_phase ) {
        4:   61:		log.write_line_infomation( this->line_no, this->code_address, this->file_address, get_line() );
        2:   62:		log.write_dump( this->code_address, this->file_address, this->data );
        2:   63:		log.write_separator();
        -:   64:	}
        -:   65:	return check_all_fixed();
       12:   66:}
        -:   67:
