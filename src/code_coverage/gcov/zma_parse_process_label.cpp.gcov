        -:    0:Source:../sub/zma_parse_process_label.cpp
        -:    0:Programs:105
        -:    1:// --------------------------------------------------------------------
        -:    2://	Z80 Macro Assembler parse
        -:    3:// ====================================================================
        -:    4://	2019/05/04	t.hara
        -:    5:// --------------------------------------------------------------------
        -:    6:
        -:    7:#include "zma_parse.hpp"
        -:    8:#include "zma_text.hpp"
        -:    9:#include "zma_parse_process.hpp"
        -:   10:#include <string>
        -:   11:#include <cctype>
        -:   12:#include <iostream>
        -:   13:#include <fstream>
        -:   14:#include <sstream>
        -:   15:#include <algorithm>
        -:   16:
        -:   17:// --------------------------------------------------------------------
      153:   18:bool CZMA_PARSE_LABEL::process( CZMA_INFORMATION& info, CZMA_PARSE* p_last_line ) {
        -:   19:	std::string label;
        -:   20:	CVALUE v;
        -:   21:
      153:   22:	this->set_code_size( &info, 0 );
      153:   23:	update_flags( &info, p_last_line );
        -:   24:	//	log
      459:   25:	label = info.get_scope_path() + words[ 0 ];
      153:   26:	if( !this->is_analyze_phase ) {
       92:   27:		std::stringstream s;
       92:   28:		log.write_line_infomation( this->line_no, this->code_address, this->file_address, get_line() );
       46:   29:		if( this->get_code_address() == -1 ){
        6:   30:			s << "label address: 0xXXXXXX";
        -:   31:		}
        -:   32:		else { 
       40:   33:			s << "label [" << label << "] address: 0x" << std::hex << std::setw( 6 ) << std::setfill( '0' ) << this->get_code_address();
        -:   34:		}
       92:   35:		log.write_message( s.str() );
       46:   36:		log.write_separator();
        -:   37:	}
      153:   38:	if( this->is_data_fixed ) {
        -:   39:		if( check_all_fixed() && info.dict.count( label ) ){
        -:   40:			return true;
        -:   41:		}
        -:   42:	}
      150:   43:	if( words[0][0] == '\"' ) {
       15:   44:		put_error( CZMA_ERROR::get( CZMA_ERROR_CODE::INVALID_COMMAND ) );
        3:   45:		return false;
        -:   46:	}
       72:   47:	if( this->is_fixed_code_address() ) {
       28:   48:		if( info.dict.count( label ) && info.dict[ label ].value_type != CVALUE_TYPE::CV_UNKNOWN_INTEGER ){
        5:   49:			if( !( info.dict[ label ].value_type == CVALUE_TYPE::CV_INTEGER && info.dict[ label ].i == this->get_code_address() ) ){
    #####:   50:				put_error( CZMA_ERROR::get( CZMA_ERROR_CODE::MULTIPLE_DEFINITION ) );
    #####:   51:				return false;
        -:   52:			}
        -:   53:		}
        -:   54:		else{
       38:   55:			info.is_updated = true;
       38:   56:			v.i = this->get_code_address();
       38:   57:			v.value_type = CVALUE_TYPE::CV_INTEGER;
       38:   58:			info.dict[ label ] = v;
        -:   59:		}
       43:   60:		this->is_data_fixed = true;
        -:   61:	}
        -:   62:	else {
        -:   63:		if( info.dict.count( label ) ) {
        -:   64:			return check_all_fixed();
        -:   65:		}
       15:   66:		v.i = -1;
       15:   67:		v.value_type = CVALUE_TYPE::CV_UNKNOWN_INTEGER;
       15:   68:		info.dict[ label ] = v;
       15:   69:		info.is_updated = true;
       75:   70:		put_error( CZMA_ERROR::get( CZMA_ERROR_CODE::LABEL_IS_INDETERMINATE ) );
       15:   71:		return false;
        -:   72:	}
        -:   73:	return check_all_fixed();
      150:   74:}
        -:   75:
