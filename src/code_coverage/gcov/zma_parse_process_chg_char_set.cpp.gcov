        -:    0:Source:../sub/zma_parse_process_chg_char_set.cpp
        -:    0:Programs:106
        -:    1:// --------------------------------------------------------------------
        -:    2://	Z80 Macro Assembler parse
        -:    3:// ====================================================================
        -:    4://	2019/05/04	t.hara
        -:    5:// --------------------------------------------------------------------
        -:    6:
        -:    7:#include "zma_parse.hpp"
        -:    8:#include "zma_text.hpp"
        -:    9:#include "zma_parse_process.hpp"
        -:   10:#include <string>
        -:   11:#include <cctype>
        -:   12:#include <iostream>
        -:   13:#include <fstream>
        -:   14:#include <sstream>
        -:   15:#include <algorithm>
        -:   16:
        -:   17:#include "zma_parse_process_chg_char_set.hpp"
        -:   18:
        -:   19:// --------------------------------------------------------------------
        9:   20:bool CZMA_PARSE_CHG_CHAR_SET::process( CZMA_INFORMATION &info, CZMA_PARSE *p_last_line ){
        -:   21:	CVALUE v;
        -:   22:	int index, i;
        -:   23:
        9:   24:	this->set_code_size( &info, 0 );
        9:   25:	update_flags( &info, p_last_line );
        9:   26:	index = this->expression( info, 1, v, false );
        9:   27:	if( index == 0 ){
    #####:   28:		put_error( CZMA_ERROR::get( CZMA_ERROR_CODE::ILLEGAL_EXPRESSION ) );
    #####:   29:		return false;
        -:   30:	}
       18:   31:	if( index < (int)words.size() ){
    #####:   32:		put_error( CZMA_ERROR::get( CZMA_ERROR_CODE::ILLEGAL_PARAMETER ) );
    #####:   33:		return false;
        -:   34:	}
        9:   35:	if( v.value_type == CVALUE_TYPE::CV_INTEGER ){
    #####:   36:		v.value_type = CVALUE_TYPE::CV_STRING;
    #####:   37:		v.s = std::to_string( v.i );
        -:   38:	}
        -:   39:
        -:   40:	std::transform( v.s.begin(), v.s.end(), v.s.begin(), toupper );
        -:   41:
        -:   42:	//	存在確認
        9:   43:	info.s_char_set = v.s;
        -:   44:	if( info.char_set_list.count( v.s ) ){
        -:   45:		//	すでに存在する場合、切り替えるだけ
        7:   46:		info.p_char_set = &( info.char_set_list[ v.s ] );
        -:   47:	}
        -:   48:	else{
        -:   49:		//	存在しない場合、新たに作る
        -:   50:		CZMA_CHAR_SET char_set;
     1026:   51:		for( i = 0; i < 256; i++ ){
     1024:   52:			char_set.ascii_to_map.push_back( (unsigned char)i );
        -:   53:		}
        2:   54:		info.char_set_list[ v.s ] = char_set;
        2:   55:		info.p_char_set = &( info.char_set_list[ v.s ] );
        -:   56:	}
        9:   57:	if( !this->is_analyze_phase ){
        6:   58:		log.write_line_infomation( this->line_no, this->code_address, this->file_address, get_line() );
        3:   59:		log.write_separator();
        -:   60:	}
        -:   61:	return true;
        -:   62:}
        -:   63:
        -:   64:// --------------------------------------------------------------------
       12:   65:bool CZMA_PARSE_MAPPING_CHAR::process( CZMA_INFORMATION &info, CZMA_PARSE *p_last_line ){
        -:   66:	CVALUE v;
        -:   67:	int index, start_char_ascii, end_char_ascii, start_char_map, step_char_map, di, code;
        -:   68:
       12:   69:	this->set_code_size( &info, 0 );
       12:   70:	update_flags( &info, p_last_line );
       12:   71:	if( info.p_char_set == nullptr ){
        -:   72:		//	デフォルトキャラセットはマッピング変更できない
    #####:   73:		put_error( CZMA_ERROR::get( CZMA_ERROR_CODE::DEFAULT_CHAR_SET_CANNOT_BE_MAPPED_AND_CHANGED ) );
    #####:   74:		return false;
        -:   75:	}
        -:   76:	//	第1引数
       12:   77:	index = this->expression( info, 1, v );
       12:   78:	if( index == 0 || v.value_type != CVALUE_TYPE::CV_INTEGER ){
    #####:   79:		put_error( CZMA_ERROR::get( CZMA_ERROR_CODE::ILLEGAL_EXPRESSION ) );
    #####:   80:		return false;
        -:   81:	}
       12:   82:	start_char_ascii = v.i;
        -:   83:	end_char_ascii = v.i;
        -:   84:	//	カンマ
       36:   85:	if( index == (int)words.size() || words[index] != "," ){
    #####:   86:		put_error( CZMA_ERROR::get( CZMA_ERROR_CODE::ILLEGAL_EXPRESSION ) );
    #####:   87:		return false;
        -:   88:	}
        -:   89:	//	第2引数
       12:   90:	index = this->expression( info, index + 1, v );
       12:   91:	if( index == 0 || v.value_type != CVALUE_TYPE::CV_INTEGER ){
    #####:   92:		put_error( CZMA_ERROR::get( CZMA_ERROR_CODE::ILLEGAL_EXPRESSION ) );
    #####:   93:		return false;
        -:   94:	}
       12:   95:	start_char_map = v.i;
        -:   96:	step_char_map = 1;
        -:   97:	//	カンマ (※省略可能)
       33:   98:	if( index != (int)words.size() && words[ index ] == "," ){
        -:   99:		//	第3引数
        9:  100:		index = this->expression( info, index + 1, v );
        9:  101:		if( index == 0 || v.value_type != CVALUE_TYPE::CV_INTEGER ){
    #####:  102:			put_error( CZMA_ERROR::get( CZMA_ERROR_CODE::ILLEGAL_EXPRESSION ) );
    #####:  103:			return false;
        -:  104:		}
        9:  105:		end_char_ascii = v.i;
        -:  106:	}
        -:  107:	//	カンマ (※省略可能)
       30:  108:	if( index != (int)words.size() && words[ index ] == "," ){
        -:  109:		//	第4引数
        6:  110:		index = this->expression( info, index + 1, v );
        6:  111:		if( index == 0 || v.value_type != CVALUE_TYPE::CV_INTEGER ){
    #####:  112:			put_error( CZMA_ERROR::get( CZMA_ERROR_CODE::ILLEGAL_EXPRESSION ) );
    #####:  113:			return false;
        -:  114:		}
        6:  115:		step_char_map = v.i;
        -:  116:	}
        -:  117:	//	変換テーブルを更新
       12:  118:	if( start_char_ascii <= end_char_ascii ){
        -:  119:		di = 1;
        -:  120:	}
        -:  121:	else{
        -:  122:		di = -1;
        -:  123:	}
       12:  124:	index = start_char_ascii & 255;
       12:  125:	code = start_char_map & 255;
        -:  126:	for( ;; ){
      252:  127:		info.p_char_set->ascii_to_map[ index ] = code;
       88:  128:		if( index == end_char_ascii ){
        -:  129:			break;
        -:  130:		}
       76:  131:		index = ( index + di ) & 255;
       76:  132:		code = ( code + step_char_map ) & 255;
        -:  133:	}
        -:  134:	return false;
      170:  135:}
