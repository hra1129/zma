        -:    0:Source:../sub/zma_parse_process_ret.cpp
        -:    0:Programs:105
        -:    1:// --------------------------------------------------------------------
        -:    2://	Z80 Macro Assembler parse
        -:    3:// ====================================================================
        -:    4://	2019/05/04	t.hara
        -:    5:// --------------------------------------------------------------------
        -:    6:
        -:    7:#include "zma_parse.hpp"
        -:    8:#include "zma_text.hpp"
        -:    9:#include "zma_parse_process.hpp"
        -:   10:#include <string>
        -:   11:#include <cctype>
        -:   12:#include <iostream>
        -:   13:#include <fstream>
        -:   14:#include <sstream>
        -:   15:#include <algorithm>
        -:   16:
        -:   17:#include "zma_parse_process_ret.hpp"
        -:   18:
        -:   19:// --------------------------------------------------------------------
       72:   20:bool CZMA_PARSE_RET::process( CZMA_INFORMATION& info, CZMA_PARSE* p_last_line ) {
        -:   21:
       72:   22:	update_flags( &info, p_last_line );
       72:   23:	if( opecode_condition( info, 0xC9, 0xC0 ) ) {
        -:   24:		//	log
       69:   25:		if( !this->is_analyze_phase ) {
       46:   26:			log.write_line_infomation( this->line_no, this->code_address, this->file_address, get_line() );
       23:   27:			if( data[0] == 0xC9 ) {
       14:   28:				log.write_cycle_information( 11, 5 );				//	RET
        -:   29:			}
        -:   30:			else {
       32:   31:				log.write_cycle_information( 12, 5, 6, 1 );			//	RET cond
        -:   32:			}
       23:   33:			log.write_dump( this->code_address, this->file_address, this->data );
       23:   34:			log.write_separator();
        -:   35:		}
        -:   36:		return check_all_fixed();
        -:   37:	}
       15:   38:	put_error( CZMA_ERROR::get( CZMA_ERROR_CODE::ILLEGAL_OPERAND ) );
        3:   39:	return false;
      156:   40:}
        -:   41:
