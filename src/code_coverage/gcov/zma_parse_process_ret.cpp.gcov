        -:    0:Source:../sub/zma_parse_process_ret.cpp
        -:    0:Programs:103
        -:    1:// --------------------------------------------------------------------
        -:    2://	Z80 Macro Assembler parse
        -:    3:// ====================================================================
        -:    4://	2019/05/04	t.hara
        -:    5:// --------------------------------------------------------------------
        -:    6:
        -:    7:#include "zma_parse.hpp"
        -:    8:#include "zma_text.hpp"
        -:    9:#include "zma_parse_process.hpp"
        -:   10:#include <string>
        -:   11:#include <cctype>
        -:   12:#include <iostream>
        -:   13:#include <fstream>
        -:   14:#include <sstream>
        -:   15:#include <algorithm>
        -:   16:
        -:   17:// --------------------------------------------------------------------
       39:   18:bool CZMA_PARSE_RET::process( CZMA_INFORMATION& info, CZMA_PARSE* p_last_line ) {
        -:   19:
       39:   20:	update_flags( &info, p_last_line );
       39:   21:	if( opecode_condition( info, 0xC9, 0xC0 ) ) {
        -:   22:		//	log
       36:   23:		if( !this->is_analyze_phase ) {
       24:   24:			log.write_line_infomation( this->line_no, this->code_address, this->file_address, get_line() );
       12:   25:			if( data[0] == 0xC9 ) {
        8:   26:				log.write_cycle_information( 11, 5 );				//	RET
        -:   27:			}
        -:   28:			else {
       16:   29:				log.write_cycle_information( 12, 5, 6, 1 );			//	RET cond
        -:   30:			}
       12:   31:			log.write_dump( this->code_address, this->file_address, this->data );
       12:   32:			log.write_separator();
        -:   33:		}
        -:   34:		return check_all_fixed();
        -:   35:	}
        6:   36:	put_error( "Illegal operand" );
        3:   37:	return false;
      136:   38:}
        -:   39:
