        -:    0:Source:../sub/zma_parse_process_macro.cpp
        -:    0:Programs:106
        -:    0:Source is newer than graph
        -:    1:// --------------------------------------------------------------------
        -:    2://	Z80 Macro Assembler parse
        -:    3:// ====================================================================
        -:    4://	2019/05/04	t.hara
        -:    5:// --------------------------------------------------------------------
        -:    6:
        -:    7:#include "zma_parse.hpp"
        -:    8:#include "zma_text.hpp"
        -:    9:#include "zma_parse_process.hpp"
        -:   10:#include <string>
        -:   11:#include <cctype>
        -:   12:#include <iostream>
        -:   13:#include <fstream>
        -:   14:#include <sstream>
        -:   15:#include <algorithm>
        -:   16:
        -:   17:#include "zma_parse_process_macro.hpp"
        -:   18:
        -:   19:// --------------------------------------------------------------------
        -:   20://	MACRO文は特殊な構造を持つのでこのメソッドを定義
        -:   21://	load 時は、このクラスは MACROの1行目単独を示している。
        -:   22://	この関数では、MACRO〜ENDM全体を示すように変更する。
       33:   23:void CZMA_PARSE_MACRO::block_structure( std::vector<CZMA_PARSE *> &m_text, std::vector<CZMA_PARSE *>::iterator &pp_current ){
        -:   24:
       66:   25:	while( pp_current != m_text.end() ){
        -:   26:		//	ENDM か？
      192:   27:		if( ( *pp_current )->words.size() > 0 && ( *pp_current )->words[ 0 ] == "ENDM" ){
        -:   28:			//	ENDM自体はもう不要なので削除
       31:   29:			pp_current = m_text.erase( pp_current );
       31:   30:			break;
        -:   31:		}
        -:   32:		//	中身を this->m_text に詰める
        -:   33:		pp_current++;
      143:   34:		while( pp_current != m_text.end() ){
      172:   35:			if( ( *pp_current )->words.size() == 0 ){
        -:   36:				//	through
        -:   37:			}
       86:   38:			else if( ( *pp_current )->words[ 0 ] == "ENDM" ){
        -:   39:				break;
        -:   40:			}
       55:   41:			( *pp_current )->block_structure( m_text, pp_current );
      110:   42:			this->m_text.m_text.push_back( *pp_current );
       55:   43:			pp_current = m_text.erase( pp_current );
        -:   44:		}
        -:   45:	}
        -:   46:	pp_current--;
       33:   47:}
        -:   48:
        -:   49:// --------------------------------------------------------------------
    #####:   50:std::vector< std::vector< std::string > > CZMA_PARSE_MACRO::get_words( void ){
    #####:   51:	std::vector< std::vector< std::string > > list, sub_list;
    #####:   52:	std::vector< std::string > words_endif = { "ENDM" };
        -:   53:
    #####:   54:	list.push_back( this->words );
    #####:   55:	for( auto &p_block : this->m_text.m_text ){
    #####:   56:		sub_list = p_block->get_words();
    #####:   57:		list.insert( list.end(), sub_list.begin(), sub_list.end() );
        -:   58:	}
    #####:   59:	list.push_back( words_endif );
    #####:   60:	return list;
        -:   61:}
        -:   62:
        -:   63:// --------------------------------------------------------------------
       33:   64:bool CZMA_PARSE_MACRO::write_output_and_log( CZMA_INFORMATION &info, std::ofstream *f ){
        -:   65:	bool result;
        -:   66:
        -:   67:	result = true;
       33:   68:	for( auto &line : log_header ){
    #####:   69:		info.log << line << std::endl;
        -:   70:	}
       33:   71:	result = result && this->m_text.write( info, f );
       97:   72:	for( auto &line : log ){
       64:   73:		info.log << line << std::endl;
        -:   74:	}
       33:   75:	return result;
        -:   76:}
        -:   77:
        -:   78:
        -:   79:// --------------------------------------------------------------------
       97:   80:bool CZMA_PARSE_MACRO::process( CZMA_INFORMATION& info, CZMA_PARSE* p_last_line ) {
        -:   81:	std::string label;
        -:   82:	CZMA_MACRO_ARG arg;
        -:   83:	int i;
        -:   84:
       97:   85:	bool result = update_flags( &info, p_last_line );
        -:   86:	this->set_code_size( &info, 0 );
        -:   87:
       97:   88:	if( !this->is_data_fixed ) {
       80:   89:		if( info.macro_list.count( words[0] ) && info.macro_list[words[0]] != nullptr ) {
        -:   90:			//	同じ名前のマクロを宣言することはできない
       15:   91:			put_error( CZMA_ERROR::get( CZMA_ERROR_CODE::MULTIPLE_DEFINITION ) );
        3:   92:			return false;
        -:   93:		}
        -:   94:		//	引数抽出処理
      132:   95:		for( i = 2; i < ( int) words.size(); ) {
       76:   96:			if( words[i] == "@" ) {
        8:   97:				arg.is_through = true;
        8:   98:				i++;
        -:   99:			}
        -:  100:			else {
       30:  101:				arg.is_through = false;
        -:  102:			}
       38:  103:			if( i >= (int)words.size() ) {
       15:  104:				put_error( CZMA_ERROR::get( CZMA_ERROR_CODE::ILLEGAL_ARGUMENT ) );
        3:  105:				return false;
        -:  106:			}
       35:  107:			arg.name = words[i];
       89:  108:			if( (i + 1) < (int)words.size() && words[ i + 1 ] != "," ) {
       15:  109:				put_error( CZMA_ERROR::get( CZMA_ERROR_CODE::ILLEGAL_ARGUMENT ) );
        3:  110:				return false;
        -:  111:			}
       52:  112:			for( auto &s : this->parameter_name_list ) {
        -:  113:				if( s.name == words[i] ) {
       15:  114:					put_error( CZMA_ERROR::get( CZMA_ERROR_CODE::MULTIPLE_DEFINITION ) );
        -:  115:					return false;
        -:  116:				}
        -:  117:			}
       29:  118:			i = i + 2;
       29:  119:			this->parameter_name_list.push_back( arg );
        -:  120:		}
       28:  121:		this->is_data_fixed = true;
        -:  122:		this->set_code_size( &info, 0 );
       28:  123:		info.macro_list[words[0]] = this;
        -:  124:	}
        -:  125:	//	log
       85:  126:	if( !is_analyze_phase ) {
       56:  127:		log.write_line_infomation( this->line_no, this->code_address, this->file_address, get_line() );
       28:  128:		log.write_separator();
        -:  129:	}
        -:  130:	return result;
        -:  131:}
        -:  132:
        -:  133:// --------------------------------------------------------------------
       77:  134:bool CZMA_PARSE_MACRO_INS::write_output_and_log( CZMA_INFORMATION& info, std::ofstream* f ) {
        -:  135:	bool result = true;
        -:  136:
      227:  137:	for( auto &line : log_header ) {
      150:  138:		info.log << line << std::endl;
        -:  139:	}
       77:  140:	m_text.write( info, f );
      308:  141:	for( auto &line : log ){
      231:  142:		info.log << line << std::endl;
        -:  143:	}
       77:  144:	return result;
        -:  145:}
        -:  146:
        -:  147:// --------------------------------------------------------------------
        3:  148:bool CZMA_PARSE_ENDM::process( CZMA_INFORMATION& info, CZMA_PARSE* p_last_line ) {
        -:  149:	//	本来、これは実行されるべきでないので、常にエラーを返す。
       15:  150:	put_error( CZMA_ERROR::get( CZMA_ERROR_CODE::SYNTAX_ERROR ) );
        3:  151:	return false;
        -:  152:}
        -:  153:
        -:  154:// --------------------------------------------------------------------
      232:  155:bool CZMA_PARSE_MACRO_INS::process( CZMA_INFORMATION& info, CZMA_PARSE* p_last_line ) {
        -:  156:	CZMA_PARSE *p_parse;
        -:  157:	CZMA_PARSE_MACRO* p_macro;
        -:  158:	std::map< std::string, std::vector< std::string > > argument;
      232:  159:	std::vector< std::string > parameter, label_line;
        -:  160:	std::string replace_name, arg_name;
        -:  161:	int i, j, id;
        -:  162:	unsigned int success_count;
        -:  163:	bool result = true;
      232:  164:	update_flags( &info, p_last_line );
      232:  165:	if( !this->is_loaded ) {
       81:  166:		p_macro = info.macro_list[words[0]];	//	※必ず存在する
        -:  167:		//	引数を取り込む
        -:  168:		id = 0;
      318:  169:		for( i = 1; i < (int)words.size(); i++ ) {
       55:  170:			parameter.clear();
      110:  171:			if( id >= (int)p_macro->parameter_name_list.size() ) {
       15:  172:				put_error( CZMA_ERROR::get( CZMA_ERROR_CODE::TOO_MANY_PARAMETERS ) );
        3:  173:				return false;
        -:  174:			}
      104:  175:			if( p_macro->parameter_name_list[id].is_through ) {
        -:  176:				arg_name = "\"";
       61:  177:				for( j = i; j < ( int) words.size() && words[j] != ","; j++ ) {
       39:  178:					arg_name = arg_name + words[j];
       34:  179:					if( (j + 1) < ( int) words.size() && words[j + 1] != "," ) {
        8:  180:						arg_name = arg_name + " ";
        -:  181:					}
        -:  182:				}
        9:  183:				parameter.push_back( arg_name );
        -:  184:			}
        -:  185:			else {
      295:  186:				for( j = i; j < ( int) words.size() && words[j] != ","; j++ ) {
       47:  187:					parameter.push_back( words[j] );
        -:  188:				}
        -:  189:			}
      104:  190:			argument[p_macro->parameter_name_list[id].name] = parameter;		//	argument[ 引数名 ] = 実際の引数
        -:  191:			i = j;
       52:  192:			id++;
        -:  193:		}
      156:  194:		if( id != (int)p_macro->parameter_name_list.size() ) {
       15:  195:			put_error( CZMA_ERROR::get( CZMA_ERROR_CODE::TOO_MANY_PARAMETERS ) );
        3:  196:			return false;
        -:  197:		}
        -:  198:		//	m_text に macro の展開内容をコピーする
      447:  199:		for( auto p : p_macro->m_text.m_text ) {
      744:  200:			auto words_list = p->get_words();
      867:  201:			for( auto &insert_line : words_list ){
     1796:  202:				for( auto word = insert_line.begin(); word != insert_line.end(); ){
        -:  203:					replace_name = *word;
        -:  204:					if( argument.count( replace_name ) ){
        -:  205:						//	マクロの仮引数を見つけた場合、指定されている式に置き換える
        -:  206:						word = insert_line.erase( word );
      226:  207:						for( auto &insert_word : argument[ replace_name ] ){
       78:  208:							word = insert_line.insert( word, insert_word );
        -:  209:							++word;
        -:  210:						}
        -:  211:					}
        -:  212:					else{
        -:  213:						++word;
        -:  214:					}
        -:  215:				}
        -:  216:				//	LABEL: COMMAND のパターンはあり得ない。必ず、LABEL: か COMMAND に分けられている。
      495:  217:				p_parse = CZMA_PARSE::create( info, insert_line, this->p_file_name, this->line_no );
      495:  218:				m_text.m_text.push_back( p_parse );
        -:  219:			}
        -:  220:		}
       75:  221:		m_text.analyze_structure();
       75:  222:		this->is_loaded = true;
       75:  223:		info.is_updated = true;
        -:  224:	}
      904:  225:	info.scope.push_back( "@MACRO" + std::to_string( info.get_auto_label_index() ) );
        -:  226:
      226:  227:	p_last_line = m_text.process( info, success_count, p_last_line, !this->is_analyze_phase );
      226:  228:	if( !this->is_data_fixed ) {
       86:  229:		this->is_data_fixed = true;
      469:  230:		for( auto p : m_text.m_text ) {
      383:  231:			this->is_data_fixed = this->is_data_fixed && p->check_data_fixed();
        -:  232:		}
       86:  233:		if( this->is_data_fixed ) {
       70:  234:			info.is_updated = true;
        -:  235:		}
        -:  236:	}
      226:  237:	if( this->code_size == -1 ) {
       86:  238:		this->code_size = 0;
      469:  239:		for( auto p : m_text.m_text ) {
      383:  240:			if( this->code_size != -1 && p->is_fixed_code_size() ) {
      367:  241:				this->code_size = this->code_size + p->get_code_size();
        -:  242:			}
        -:  243:			else {
       16:  244:				this->code_size = -1;
        -:  245:			}
        -:  246:		}
       86:  247:		if( this->code_size != -1 ) {
       70:  248:			info.is_updated = true;
        -:  249:		}
        -:  250:	}
        -:  251:
        -:  252:	//	log
      226:  253:	if( !is_analyze_phase ){
      150:  254:		log_header.write_line_infomation( this->line_no, this->code_address, this->file_address, get_line() );
      225:  255:		log_header.write_message( "Intra-macro scope: " + info.get_scope_path() );
        -:  256:
      150:  257:		log.write_line_infomation( this->line_no, this->code_address, this->file_address, get_line() );
      225:  258:		log.write_message( "Exit scope: " + info.get_scope_path() );
       75:  259:		log.write_separator();
        -:  260:	}
        -:  261:
      452:  262:	if( info.scope.size() > 0 ) {
        -:  263:		info.scope.pop_back();
        -:  264:	}
      226:  265:	this->next_code_address = p_last_line->get_next_code_address();
        -:  266:	return result && check_all_fixed();
      172:  267:}
