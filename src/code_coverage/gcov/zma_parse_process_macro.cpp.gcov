        -:    0:Source:../sub/zma_parse_process_macro.cpp
        -:    0:Programs:106
        -:    1:// --------------------------------------------------------------------
        -:    2://	Z80 Macro Assembler parse
        -:    3:// ====================================================================
        -:    4://	2019/05/04	t.hara
        -:    5:// --------------------------------------------------------------------
        -:    6:
        -:    7:#include "zma_parse.hpp"
        -:    8:#include "zma_text.hpp"
        -:    9:#include "zma_parse_process.hpp"
        -:   10:#include <string>
        -:   11:#include <cctype>
        -:   12:#include <iostream>
        -:   13:#include <fstream>
        -:   14:#include <sstream>
        -:   15:#include <algorithm>
        -:   16:
        -:   17:// --------------------------------------------------------------------
       93:   18:bool CZMA_PARSE_MACRO::process( CZMA_INFORMATION& info, CZMA_PARSE* p_last_line ) {
        -:   19:	std::string label;
        -:   20:	CZMA_MACRO* p_macro;
        -:   21:	CZMA_MACRO_ARG arg;
        -:   22:	int i;
        -:   23:
       93:   24:	bool result = update_flags( &info, p_last_line );
       93:   25:	if( !this->is_data_fixed ) {
       78:   26:		if( info.macro_list.count( words[0] ) && info.macro_list[words[0]] != nullptr ) {
        -:   27:			//	同じ名前のマクロを宣言することはできない
       15:   28:			put_error( CZMA_ERROR::get( CZMA_ERROR_CODE::MULTIPLE_DEFINITION ) );
        3:   29:			return false;
        -:   30:		}
        -:   31:		//	引数抽出処理
       36:   32:		p_macro = new CZMA_MACRO;
      134:   33:		for( i = 2; i < ( int) words.size(); ) {
       80:   34:			if( words[i] == "@" ) {
        8:   35:				arg.is_through = true;
        8:   36:				i++;
        -:   37:			}
        -:   38:			else {
       32:   39:				arg.is_through = false;
        -:   40:			}
       40:   41:			if( i >= (int)words.size() ) {
       15:   42:				put_error( CZMA_ERROR::get( CZMA_ERROR_CODE::ILLEGAL_ARGUMENT ) );
        3:   43:				return false;
        -:   44:			}
       37:   45:			arg.name = words[i];
       93:   46:			if( (i + 1) < (int)words.size() && words[ i + 1 ] != "," ) {
       15:   47:				put_error( CZMA_ERROR::get( CZMA_ERROR_CODE::ILLEGAL_ARGUMENT ) );
        3:   48:				return false;
        -:   49:			}
       54:   50:			for( auto &s : p_macro->parameter_name_list ) {
        -:   51:				if( s.name == words[i] ) {
       15:   52:					put_error( CZMA_ERROR::get( CZMA_ERROR_CODE::MULTIPLE_DEFINITION ) );
        -:   53:					return false;
        -:   54:				}
        -:   55:			}
       31:   56:			i = i + 2;
       31:   57:			p_macro->parameter_name_list.push_back( arg );
        -:   58:		}
       27:   59:		info.block_type = CZMA_INFORMATION::BLOCK_TYPE_T::CZMA_INFO_MACRO_BLOCK;
       27:   60:		info.is_block_processing = true;
       27:   61:		info.p_macro = p_macro;
       27:   62:		info.p_text = &(info.p_macro->m_text);
       27:   63:		this->is_data_fixed = true;
        -:   64:		this->set_code_size( &info, 0 );
       27:   65:		info.macro_list[words[0]] = p_macro;
        -:   66:	}
        -:   67:	//	log
       81:   68:	if( !is_analyze_phase ) {
       54:   69:		log.write_line_infomation( this->line_no, this->code_address, this->file_address, get_line() );
       27:   70:		log.write_separator();
        -:   71:	}
        -:   72:	return result;
        -:   73:}
        -:   74:
        -:   75:// --------------------------------------------------------------------
       74:   76:bool CZMA_PARSE_MACRO_INS::write_output_and_log( CZMA_INFORMATION& info, std::ofstream* f ) {
        -:   77:	bool result = true;
        -:   78:
      224:   79:	for( auto &line : log ) {
      150:   80:		info.log << line << std::endl;
        -:   81:	}
       74:   82:	text.write( info, f );
       74:   83:	return result;
        -:   84:}
        -:   85:
        -:   86:// --------------------------------------------------------------------
       92:   87:bool CZMA_PARSE_ENDM::process( CZMA_INFORMATION& info, CZMA_PARSE* p_last_line ) {
        -:   88:
       92:   89:	update_flags( &info, p_last_line );
       92:   90:	info.is_block_processing = false;
       92:   91:	this->is_data_fixed = true;
        -:   92:	this->set_code_size( &info, 0 );
       92:   93:	return check_all_fixed();
        -:   94:}
        -:   95:
        -:   96:// --------------------------------------------------------------------
      212:   97:bool CZMA_PARSE_MACRO_INS::process( CZMA_INFORMATION& info, CZMA_PARSE* p_last_line ) {
        -:   98:	CZMA_PARSE *p_parse;
        -:   99:	CZMA_MACRO* p_macro;
        -:  100:	std::map< std::string, std::vector< std::string > > argument;
      212:  101:	std::vector< std::string > parameter, label_line;
        -:  102:	std::string replace_name, arg_name;
        -:  103:	int i, j, id;
        -:  104:	unsigned int success_count;
        -:  105:	bool result = true;
      212:  106:	update_flags( &info, p_last_line );
      212:  107:	if( !this->is_loaded ) {
       78:  108:		p_macro = info.macro_list[words[0]];	//	※必ず存在する
        -:  109:		//	引数を取り込む
        -:  110:		id = 0;
      312:  111:		for( i = 1; i < (int)words.size(); i++ ) {
       55:  112:			parameter.clear();
      110:  113:			if( id >= (int)p_macro->parameter_name_list.size() ) {
       15:  114:				put_error( CZMA_ERROR::get( CZMA_ERROR_CODE::TOO_MANY_PARAMETERS ) );
        3:  115:				return false;
        -:  116:			}
      104:  117:			if( p_macro->parameter_name_list[id].is_through ) {
        -:  118:				arg_name = "\"";
       61:  119:				for( j = i; j < ( int) words.size() && words[j] != ","; j++ ) {
       39:  120:					arg_name = arg_name + words[j];
       34:  121:					if( (j + 1) < ( int) words.size() && words[j + 1] != "," ) {
        8:  122:						arg_name = arg_name + " ";
        -:  123:					}
        -:  124:				}
        9:  125:				parameter.push_back( arg_name );
        -:  126:			}
        -:  127:			else {
      295:  128:				for( j = i; j < ( int) words.size() && words[j] != ","; j++ ) {
       47:  129:					parameter.push_back( words[j] );
        -:  130:				}
        -:  131:			}
      104:  132:			argument[p_macro->parameter_name_list[id].name] = parameter;		//	argument[ 引数名 ] = 実際の引数
        -:  133:			i = j;
       52:  134:			id++;
        -:  135:		}
      150:  136:		if( id != (int)p_macro->parameter_name_list.size() ) {
       15:  137:			put_error( CZMA_ERROR::get( CZMA_ERROR_CODE::TOO_MANY_PARAMETERS ) );
        3:  138:			return false;
        -:  139:		}
        -:  140:		//	m_text に macro の展開内容をコピーする
      446:  141:		for( auto p : p_macro->m_text ) {
      748:  142:			printf( "INS: %s\n", p->get_line().c_str() );	//★
      748:  143:			auto words_list = p->get_words();
     1340:  144:			for( auto insert_line : words_list ){
     1761:  145:				for( auto word = insert_line.begin(); word != insert_line.end(); ){
        -:  146:					replace_name = *word;
        -:  147:					if( argument.count( replace_name ) ){
        -:  148:						//	マクロの仮引数を見つけた場合、指定されている式に置き換える
        -:  149:						word = insert_line.erase( word );
      226:  150:						for( auto &insert_word : argument[ replace_name ] ){
       78:  151:							word = insert_line.insert( word, insert_word );
        -:  152:							++word;
        -:  153:						}
        -:  154:					}
        -:  155:					else{
        -:  156:						++word;
        -:  157:					}
        -:  158:				}
     1200:  159:				if( insert_line.size() > 2 && ( ( insert_line[ 1 ] == ":" ) || ( insert_line[ 1 ] == "::" ) ) ){
    #####:  160:					label_line.resize( 2 );
    #####:  161:					label_line[ 0 ] = insert_line[ 0 ];
    #####:  162:					label_line[ 1 ] = insert_line[ 1 ];
    #####:  163:					p_parse = CZMA_PARSE::create( info, label_line, this->p_file_name, this->line_no );
    #####:  164:					text.m_text.push_back( p_parse );
        -:  165:					insert_line.erase( insert_line.begin() );
        -:  166:					insert_line.erase( insert_line.begin() );
    #####:  167:					p_parse = CZMA_PARSE::create( info, insert_line, this->p_file_name, this->line_no );
    #####:  168:					text.m_text.push_back( p_parse );
        -:  169:				}
        -:  170:				else{
      966:  171:					p_parse = CZMA_PARSE::create( info, insert_line, this->p_file_name, this->line_no );
      483:  172:					text.m_text.push_back( p_parse );
        -:  173:				}
        -:  174:			}
        -:  175:		}
       72:  176:		text.analyze_structure();
       72:  177:		this->is_loaded = true;
       72:  178:		info.is_updated = true;
        -:  179:	}
      824:  180:	info.scope.push_back( "@MACRO" + std::to_string( info.get_auto_label_index() ) );
        -:  181:	//	log
      206:  182:	if( !is_analyze_phase ) {
      144:  183:		log.write_line_infomation( this->line_no, this->code_address, this->file_address, get_line() );
      216:  184:		log.write_message( "Intra-macro scope: " + info.get_scope_path() );
        -:  185:	}
      206:  186:	p_last_line = text.process( info, success_count, p_last_line, !this->is_analyze_phase );
      206:  187:	if( !this->is_data_fixed ) {
     1307:  188:		for( auto p : text.m_text ) {
     1101:  189:			this->is_data_fixed = this->is_data_fixed && p->is_fixed_code_size();
        -:  190:		}
      206:  191:		if( this->is_data_fixed ) {
    #####:  192:			info.is_updated = true;
        -:  193:		}
        -:  194:	}
      206:  195:	if( this->code_size == -1 ) {
       72:  196:		this->code_size = 0;
      439:  197:		for( auto p : text.m_text ) {
      367:  198:			if( this->code_size != -1 && p->is_fixed_code_size() ) {
      367:  199:				this->code_size = this->code_size + p->get_code_size();
        -:  200:			}
        -:  201:			else {
    #####:  202:				this->code_size = -1;
        -:  203:			}
        -:  204:		}
       72:  205:		if( this->code_size != -1 ) {
       72:  206:			info.is_updated = true;
        -:  207:		}
        -:  208:	}
      412:  209:	if( info.scope.size() > 0 ) {
        -:  210:		info.scope.pop_back();
        -:  211:	}
      206:  212:	this->next_code_address = p_last_line->get_next_code_address();
        -:  213:	return result && check_all_fixed();
      154:  214:}
