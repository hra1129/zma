        -:    0:Source:../sub/zma_parse_process_macro.cpp
        -:    0:Programs:103
        -:    1:// --------------------------------------------------------------------
        -:    2://	Z80 Macro Assembler parse
        -:    3:// ====================================================================
        -:    4://	2019/05/04	t.hara
        -:    5:// --------------------------------------------------------------------
        -:    6:
        -:    7:#include "zma_parse.hpp"
        -:    8:#include "zma_text.hpp"
        -:    9:#include "zma_parse_process.hpp"
        -:   10:#include <string>
        -:   11:#include <cctype>
        -:   12:#include <iostream>
        -:   13:#include <fstream>
        -:   14:#include <sstream>
        -:   15:#include <algorithm>
        -:   16:
        -:   17:// --------------------------------------------------------------------
    #####:   18:bool CZMA_PARSE_MACRO::process( CZMA_INFORMATION& info, CZMA_PARSE* p_last_line ) {
        -:   19:	std::string label;
        -:   20:	CZMA_MACRO* p_macro;
        -:   21:	CZMA_MACRO_ARG arg;
        -:   22:	int i;
        -:   23:
    #####:   24:	bool result = update_flags( &info, p_last_line );
    #####:   25:	if( !this->is_data_fixed ) {
    #####:   26:		if( info.macro_list.count( words[0] ) && info.macro_list[words[0]] != nullptr ) {
        -:   27:			//	同じ名前のマクロを宣言することはできない
    #####:   28:			put_error( "There are declarations of the same macro '" + words[0] + "' in multiple places." );
    #####:   29:			return false;
        -:   30:		}
        -:   31:		//	引数抽出処理
    #####:   32:		p_macro = new CZMA_MACRO;
    #####:   33:		for( i = 2; i < ( int) words.size(); ) {
    #####:   34:			if( words[i] == "@" ) {
    #####:   35:				arg.is_through = true;
    #####:   36:				i++;
        -:   37:			}
        -:   38:			else {
    #####:   39:				arg.is_through = false;
        -:   40:			}
    #####:   41:			if( i >= (int)words.size() ) {
    #####:   42:				put_error( "Illegal argument." );
    #####:   43:				return false;
        -:   44:			}
    #####:   45:			arg.name = words[i];
    #####:   46:			if( (i + 1) < (int)words.size() && words[ i + 1 ] != "," ) {
    #####:   47:				put_error( "Illegal argument." );
    #####:   48:				return false;
        -:   49:			}
    #####:   50:			for( auto s : p_macro->parameter_name_list ) {
    #####:   51:				if( s.name == words[i] ) {
    #####:   52:					put_error( "Multiple arguments of the same name '" + words[i] + "' exist." );
        -:   53:					return false;
        -:   54:				}
        -:   55:			}
    #####:   56:			i = i + 2;
    #####:   57:			p_macro->parameter_name_list.push_back( arg );
        -:   58:		}
    #####:   59:		info.block_type = CZMA_INFORMATION::BLOCK_TYPE_T::CZMA_INFO_MACRO_BLOCK;
    #####:   60:		info.is_block_processing = true;
    #####:   61:		info.p_macro = p_macro;
    #####:   62:		info.p_text = &(info.p_macro->m_text);
    #####:   63:		this->is_data_fixed = true;
        -:   64:		this->set_code_size( &info, 0 );
    #####:   65:		info.macro_list[words[0]] = p_macro;
        -:   66:	}
        -:   67:	//	log
    #####:   68:	if( !is_analyze_phase ) {
    #####:   69:		log.write_line_infomation( this->line_no, this->code_address, this->file_address, get_line() );
    #####:   70:		log.write_separator();
        -:   71:	}
        -:   72:	return result;
        -:   73:}
        -:   74:
        -:   75:// --------------------------------------------------------------------
    #####:   76:bool CZMA_PARSE_MACRO_INS::write_output_and_log( CZMA_INFORMATION& info, std::ofstream* f ) {
        -:   77:	bool result = true;
        -:   78:
    #####:   79:	for( auto line : log ) {
    #####:   80:		info.log << line << std::endl;
        -:   81:	}
    #####:   82:	text.write( info, f );
    #####:   83:	return result;
        -:   84:}
        -:   85:
        -:   86:// --------------------------------------------------------------------
    #####:   87:bool CZMA_PARSE_ENDM::process( CZMA_INFORMATION& info, CZMA_PARSE* p_last_line ) {
        -:   88:
    #####:   89:	update_flags( &info, p_last_line );
    #####:   90:	info.is_block_processing = false;
    #####:   91:	this->is_data_fixed = true;
        -:   92:	this->set_code_size( &info, 0 );
    #####:   93:	return check_all_fixed();
        -:   94:}
        -:   95:
        -:   96:// --------------------------------------------------------------------
    #####:   97:bool CZMA_PARSE_MACRO_INS::process( CZMA_INFORMATION& info, CZMA_PARSE* p_last_line ) {
        -:   98:	CZMA_MACRO* p_macro;
        -:   99:	std::map< std::string, std::vector< std::string > > argument;
    #####:  100:	std::vector< std::string > parameter, insert_line;
        -:  101:	std::string replace_name, arg_name;
        -:  102:	int i, j, id;
        -:  103:	unsigned int success_count;
        -:  104:	bool result = true;
    #####:  105:	update_flags( &info, p_last_line );
    #####:  106:	if( !this->is_loaded ) {
    #####:  107:		p_macro = info.macro_list[words[0]];	//	※必ず存在する
        -:  108:		//	引数を取り込む
        -:  109:		id = 0;
    #####:  110:		for( i = 1; i < (int)words.size(); i++ ) {
    #####:  111:			parameter.clear();
    #####:  112:			if( id >= (int)p_macro->parameter_name_list.size() ) {
    #####:  113:				put_error( "Too many arguments for " + words[0] + "." );
    #####:  114:				return false;
        -:  115:			}
    #####:  116:			if( p_macro->parameter_name_list[id].is_through ) {
        -:  117:				arg_name = "\"";
    #####:  118:				for( j = i; j < ( int) words.size() && words[j] != ","; j++ ) {
    #####:  119:					arg_name = arg_name + words[j];
    #####:  120:					if( (j + 1) < ( int) words.size() && words[j + 1] != "," ) {
    #####:  121:						arg_name = arg_name + " ";
        -:  122:					}
        -:  123:				}
    #####:  124:				parameter.push_back( arg_name );
        -:  125:			}
        -:  126:			else {
    #####:  127:				for( j = i; j < ( int) words.size() && words[j] != ","; j++ ) {
    #####:  128:					parameter.push_back( words[j] );
        -:  129:				}
        -:  130:			}
    #####:  131:			argument[p_macro->parameter_name_list[id].name] = parameter;		//	argument[ 引数名 ] = 実際の引数
        -:  132:			i = j;
    #####:  133:			id++;
        -:  134:		}
    #####:  135:		if( id != (int)p_macro->parameter_name_list.size() ) {
    #####:  136:			put_error( "Mismatched number of arguments." );
    #####:  137:			return false;
        -:  138:		}
        -:  139:		//	m_text に macro の展開内容をコピーする
    #####:  140:		for( auto p : p_macro->m_text ) {
    #####:  141:			insert_line = p->words;
    #####:  142:			for( auto word = insert_line.begin(); word != insert_line.end(); ) {
        -:  143:				replace_name = *word;
        -:  144:				if( argument.count( replace_name ) ) {
        -:  145:					//	マクロの仮引数を見つけた場合、指定されている式に置き換える
        -:  146:					word = insert_line.erase( word );
    #####:  147:					for( auto insert_word : argument[replace_name] ) {
    #####:  148:						word = insert_line.insert( word, insert_word );
        -:  149:						++word;
        -:  150:					}
        -:  151:				}
        -:  152:				else {
        -:  153:					++word;
        -:  154:				}
        -:  155:			}
    #####:  156:			text.m_text.push_back( CZMA_PARSE::create( info, insert_line, this->p_file_name, this->line_no ) );
        -:  157:		}
    #####:  158:		this->is_loaded = true;
    #####:  159:		info.is_updated = true;
        -:  160:	}
    #####:  161:	info.scope.push_back( "@MACRO" + std::to_string( info.get_auto_label_index() ) );
        -:  162:	//	log
    #####:  163:	if( !is_analyze_phase ) {
    #####:  164:		log.write_line_infomation( this->line_no, this->code_address, this->file_address, get_line() );
    #####:  165:		log.write_message( "Intra-macro scope: " + info.get_scope_path() );
        -:  166:	}
    #####:  167:	p_last_line = text.process( info, success_count, p_last_line, !this->is_analyze_phase );
    #####:  168:	if( !this->is_data_fixed ) {
    #####:  169:		for( auto p : text.m_text ) {
    #####:  170:			this->is_data_fixed = this->is_data_fixed && p->is_fixed_code_size();
        -:  171:		}
    #####:  172:		if( this->is_data_fixed ) {
    #####:  173:			info.is_updated = true;
        -:  174:		}
        -:  175:	}
    #####:  176:	if( this->code_size == -1 ) {
    #####:  177:		this->code_size = 0;
    #####:  178:		for( auto p : text.m_text ) {
    #####:  179:			if( this->code_size != -1 && p->is_fixed_code_size() ) {
    #####:  180:				this->code_size = this->code_size + p->get_code_size();
        -:  181:			}
        -:  182:			else {
    #####:  183:				this->code_size = -1;
        -:  184:			}
        -:  185:		}
    #####:  186:		if( this->code_size != -1 ) {
    #####:  187:			info.is_updated = true;
        -:  188:		}
        -:  189:	}
    #####:  190:	if( info.scope.size() > 0 ) {
        -:  191:		info.scope.pop_back();
        -:  192:	}
    #####:  193:	this->next_code_address = p_last_line->get_next_code_address();
        -:  194:	return result && check_all_fixed();
       12:  195:}
