        -:    0:Source:../sub/zma_parse_process_global_symbol.cpp
        -:    0:Programs:106
        -:    1:// --------------------------------------------------------------------
        -:    2://	Z80 Macro Assembler parse
        -:    3:// ====================================================================
        -:    4://	2019/05/04	t.hara
        -:    5:// --------------------------------------------------------------------
        -:    6:
        -:    7:#include "zma_parse.hpp"
        -:    8:#include "zma_text.hpp"
        -:    9:#include "zma_parse_process.hpp"
        -:   10:#include <string>
        -:   11:#include <cctype>
        -:   12:#include <iostream>
        -:   13:#include <fstream>
        -:   14:#include <sstream>
        -:   15:#include <algorithm>
        -:   16:
        -:   17:#include "zma_parse_process_global_symbol.hpp"
        -:   18:
        -:   19:// --------------------------------------------------------------------
       82:   20:bool CZMA_PARSE_GLOBAL_SYMBOL::process( CZMA_INFORMATION& info, CZMA_PARSE* p_last_line ) {
        -:   21:	std::string label;
        -:   22:	CVALUE v;
        -:   23:
       82:   24:	this->set_code_size( &info, 0 );
       82:   25:	update_flags( &info, p_last_line );
        -:   26:	//	log
       82:   27:	label = words[0];
       82:   28:	if( !this->is_analyze_phase ) {
       44:   29:		std::stringstream s;
       44:   30:		log.write_line_infomation( this->line_no, -1, -1, get_line() );
        -:   31:		if( !info.dict.count( label ) ){
        3:   32:			s << "global symbol [" << label << "] = UNKNOWN";
        -:   33:		}
        -:   34:		else {
       19:   35:			v = info.dict[label];
       38:   36:			if( v.is_integer() ) {
       14:   37:				if( v.is_unknown() ){
        2:   38:					s << "Global integer symbol [" << label << "] = UNKNOWN";
        -:   39:				}
        -:   40:				else {
       24:   41:					s << "Global integer symbol [" << label << "] = " << v.i << " (0x" << std::hex << v.i << ")";
        -:   42:				}
        -:   43:			}
        -:   44:			else {	//if( v.is_string() ) {
        5:   45:				if( v.is_unknown() ){
        1:   46:					s << "Global string symbol [" << label << "] = UNKNOWN";
        -:   47:				}
        -:   48:				else{
        4:   49:					s << "Global string symbol [" << label << "] = \"" << v.s << "\"";
        -:   50:				}
        -:   51:			}
        -:   52:		}
       44:   53:		log.write_message( s.str() );
       22:   54:		log.write_separator();
        -:   55:	}
       82:   56:	if( this->is_data_fixed ) {
        -:   57:		if( check_all_fixed() && info.dict.count( label ) ){
        -:   58:			return true;
        -:   59:		}
        -:   60:	}
      124:   61:	if( words[0][0] == '\"' ) {
       20:   62:		put_error( CZMA_ERROR::get( CZMA_ERROR_CODE::INVALID_COMMAND ) );
        4:   63:		return false;
        -:   64:	}
       58:   65:	if( this->expression( info, 2, v ) ) {
      102:   66:		if( info.dict.count( label ) && !info.dict[ label ].is_unknown() ) {
      135:   67:			put_error( CZMA_ERROR::get( CZMA_ERROR_CODE::MULTIPLE_DEFINITION ) );
       27:   68:			return false;
        -:   69:		}
        -:   70:		else {
       40:   71:			if( !v.is_unknown() ){
       10:   72:				this->is_data_fixed = true;
        -:   73:			}
       14:   74:			if( !info.dict.count( label ) || info.dict[ label ].value_type != v.value_type ){
       13:   75:				info.is_updated = true;
        -:   76:			}
       20:   77:			info.dict[label] = v;
        -:   78:		}
        -:   79:	}
        -:   80:	else {
       55:   81:		put_error( CZMA_ERROR::get( CZMA_ERROR_CODE::LABEL_IS_INDETERMINATE ), info.all_error_enable, info.error_disable );
       11:   82:		info.error_disable = true;
       11:   83:		return false;
        -:   84:	}
        -:   85:	return check_all_fixed();
      170:   86:}
