        -:    0:Source:../sub/zma_parse_process_global_symbol.cpp
        -:    0:Programs:106
        -:    1:// --------------------------------------------------------------------
        -:    2://	Z80 Macro Assembler parse
        -:    3:// ====================================================================
        -:    4://	2019/05/04	t.hara
        -:    5:// --------------------------------------------------------------------
        -:    6:
        -:    7:#include "zma_parse.hpp"
        -:    8:#include "zma_text.hpp"
        -:    9:#include "zma_parse_process.hpp"
        -:   10:#include <string>
        -:   11:#include <cctype>
        -:   12:#include <iostream>
        -:   13:#include <fstream>
        -:   14:#include <sstream>
        -:   15:#include <algorithm>
        -:   16:
        -:   17:// --------------------------------------------------------------------
       36:   18:bool CZMA_PARSE_GLOBAL_SYMBOL::process( CZMA_INFORMATION& info, CZMA_PARSE* p_last_line ) {
        -:   19:	std::string label;
        -:   20:	CVALUE v;
        -:   21:
       36:   22:	this->set_code_size( &info, 0 );
       36:   23:	update_flags( &info, p_last_line );
        -:   24:	//	log
       36:   25:	label = words[0];
       36:   26:	if( !this->is_analyze_phase ) {
       24:   27:		std::stringstream s;
       24:   28:		log.write_line_infomation( this->line_no, -1, -1, get_line() );
        -:   29:		if( !info.dict.count( label ) ){
        2:   30:			s << "global symbol [" << label << "] = UNKNOWN";
        -:   31:		}
        -:   32:		else {
       10:   33:			v = info.dict[label];
       20:   34:			if( v.is_integer() ) {
        8:   35:				if( v.is_unknown() ){
        1:   36:					s << "Global integer symbol [" << label << "] = UNKNOWN";
        -:   37:				}
        -:   38:				else {
       14:   39:					s << "Global integer symbol [" << label << "] = " << v.i << " (0x" << std::hex << v.i << ")";
        -:   40:				}
        -:   41:			}
        2:   42:			else if( v.is_string() ) {
        2:   43:				if( v.is_unknown() ){
    #####:   44:					s << "Global string symbol [" << label << "] = UNKNOWN";
        -:   45:				}
        -:   46:				else{
        2:   47:					s << "Global string symbol [" << label << "] = \"" << v.s << "\"";
        -:   48:				}
        -:   49:			}
        -:   50:			else {
    #####:   51:				s << "Global symbol [" << label << "] = UNKNOWN";
        -:   52:			}
        -:   53:		}
       24:   54:		log.write_message( s.str() );
       12:   55:		log.write_separator();
        -:   56:	}
       36:   57:	if( this->is_data_fixed ) {
        -:   58:		if( check_all_fixed() && info.dict.count( label ) ){
        -:   59:			return true;
        -:   60:		}
        -:   61:	}
       48:   62:	if( words[0][0] == '\"' ) {
       15:   63:		put_error( CZMA_ERROR::get( CZMA_ERROR_CODE::INVALID_COMMAND ) );
        3:   64:		return false;
        -:   65:	}
       21:   66:	if( this->expression( info, 2, v ) ) {
       18:   67:		if( v.value_type == CVALUE_TYPE::CV_UNKNOWN ) {
    #####:   68:			put_error( CZMA_ERROR::get( CZMA_ERROR_CODE::ILLEGAL_EXPRESSION ) );
    #####:   69:			return false;
        -:   70:		}
       30:   71:		if( info.dict.count( label ) && !info.dict[ label ].is_unknown() ) {
       40:   72:			put_error( CZMA_ERROR::get( CZMA_ERROR_CODE::MULTIPLE_DEFINITION ) );
        8:   73:			return false;
        -:   74:		}
        -:   75:		else {
       20:   76:			if( !v.is_unknown() ){
        7:   77:				this->is_data_fixed = true;
        -:   78:			}
        4:   79:			if( !info.dict.count( label ) || info.dict[ label ].value_type != v.value_type ){
        8:   80:				info.is_updated = true;
        -:   81:			}
       10:   82:			info.dict[label] = v;
        -:   83:		}
        -:   84:	}
        -:   85:	else {
       15:   86:		put_error( CZMA_ERROR::get( CZMA_ERROR_CODE::LABEL_IS_INDETERMINATE ) );
        3:   87:		return false;
        -:   88:	}
        -:   89:	return check_all_fixed();
      154:   90:}
