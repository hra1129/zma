        -:    0:Source:../sub/zma_parse_process_global_symbol.cpp
        -:    0:Programs:103
        -:    1:// --------------------------------------------------------------------
        -:    2://	Z80 Macro Assembler parse
        -:    3:// ====================================================================
        -:    4://	2019/05/04	t.hara
        -:    5:// --------------------------------------------------------------------
        -:    6:
        -:    7:#include "zma_parse.hpp"
        -:    8:#include "zma_text.hpp"
        -:    9:#include "zma_parse_process.hpp"
        -:   10:#include <string>
        -:   11:#include <cctype>
        -:   12:#include <iostream>
        -:   13:#include <fstream>
        -:   14:#include <sstream>
        -:   15:#include <algorithm>
        -:   16:
        -:   17:// --------------------------------------------------------------------
       24:   18:bool CZMA_PARSE_GLOBAL_SYMBOL::process( CZMA_INFORMATION& info, CZMA_PARSE* p_last_line ) {
        -:   19:	std::string label;
        -:   20:	CVALUE v;
        -:   21:
       24:   22:	this->set_code_size( &info, 0 );
       24:   23:	update_flags( &info, p_last_line );
        -:   24:	//	log
       24:   25:	label = words[0];
       24:   26:	if( !this->is_analyze_phase ) {
       16:   27:		std::stringstream s;
       16:   28:		log.write_line_infomation( this->line_no, -1, -1, get_line() );
        -:   29:		if( !info.dict.count( label ) ){
        4:   30:			s << "global symbol [" << label << "] = UNKNOWN";
        -:   31:		}
        -:   32:		else {
        4:   33:			v = info.dict[label];
        4:   34:			if( v.value_type == CVALUE_TYPE::CV_INTEGER ) {
        8:   35:				s << "Global symbol [" << label << "] = " << v.i << " (0x" << std::hex << v.i << ")";
        -:   36:			}
    #####:   37:			else if( v.value_type == CVALUE_TYPE::CV_STRING ) {
    #####:   38:				s << "Global symbol [" << label << "] = \"" << v.s << "\"";
        -:   39:			}
        -:   40:			else {
    #####:   41:				s << "Global symbol [" << label << "] = UNKNOWN";
        -:   42:			}
        -:   43:		}
       16:   44:		log.write_message( s.str() );
        8:   45:		log.write_separator();
        -:   46:	}
       24:   47:	if( this->is_data_fixed ) {
        -:   48:		if( check_all_fixed() && info.dict.count( label ) ){
        -:   49:			return true;
        -:   50:		}
        -:   51:	}
       40:   52:	if( words[0][0] == '\"' ) {
        6:   53:		put_error( "Invalid command." );
        3:   54:		return false;
        -:   55:	}
       17:   56:	if( this->expression( info, 2, v ) ) {
       14:   57:		if( v.value_type == CVALUE_TYPE::CV_UNKNOWN ) {
       12:   58:			put_error( "Illegal expression." );
        6:   59:			return false;
        -:   60:		}
        -:   61:		if( info.dict.count( label ) ) {
       24:   62:			put_error( "There are declarations of the same label '" + label + "' in multiple places." );
        6:   63:			return false;
        -:   64:		}
        -:   65:		else {
        2:   66:			this->is_data_fixed = true;
        2:   67:			info.dict[label] = v;
        2:   68:			info.is_updated = true;
        -:   69:		}
        -:   70:	}
        -:   71:	else {
        9:   72:		put_error( "Label '" + words[0] + "' is indeterminate." );
        3:   73:		return false;
        -:   74:	}
        -:   75:	return check_all_fixed();
      138:   76:}
