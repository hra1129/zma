        -:    0:Source:../sub/zma_parse_process_user_error.cpp
        -:    0:Programs:106
        -:    1:// --------------------------------------------------------------------
        -:    2://	Z80 Macro Assembler parse
        -:    3:// ====================================================================
        -:    4://	2019/05/04	t.hara
        -:    5:// --------------------------------------------------------------------
        -:    6:
        -:    7:#include "zma_parse.hpp"
        -:    8:#include "zma_text.hpp"
        -:    9:#include "zma_parse_process.hpp"
        -:   10:#include <string>
        -:   11:#include <cctype>
        -:   12:#include <iostream>
        -:   13:#include <fstream>
        -:   14:#include <sstream>
        -:   15:#include <algorithm>
        -:   16:
        -:   17:// --------------------------------------------------------------------
       21:   18:bool CZMA_PARSE_USER_ERROR::process( CZMA_INFORMATION& info, CZMA_PARSE* p_last_line ) {
        -:   19:	CVALUE v;
        -:   20:
       21:   21:	set_code_size( &info, 0 );
       21:   22:	this->is_data_fixed = true;
       21:   23:	update_flags( &info, p_last_line );
       42:   24:	if( words.size() == 1 ) {
       15:   25:		put_error( CZMA_ERROR::get( CZMA_ERROR_CODE::TOO_MANY_PARAMETERS ) );
        3:   26:		return false;
        -:   27:	}
       18:   28:	if( this->expression( info, 1, v, false ) == 0 ) {
       45:   29:		put_error( CZMA_ERROR::get( CZMA_ERROR_CODE::ILLEGAL_PARAMETER ) );
        -:   30:	}
       18:   31:	else if( v.is_unknown() ){
    #####:   32:		put_error( CZMA_ERROR::get( CZMA_ERROR_CODE::ILLEGAL_PARAMETER ) );
        -:   33:	}
        9:   34:	else if( v.is_string() ){
        6:   35:		put_error( v.s );
        -:   36:	}
        -:   37:	else {
        -:   38:		//	v.is_integer()
       18:   39:		put_error( std::to_string( v.i ) );
        -:   40:	}
        -:   41:	return false;
      156:   42:}
