        -:    0:Source:../sub/zma_parse_process_global_label.cpp
        -:    0:Programs:106
        -:    1:// --------------------------------------------------------------------
        -:    2://	Z80 Macro Assembler parse
        -:    3:// ====================================================================
        -:    4://	2019/05/04	t.hara
        -:    5:// --------------------------------------------------------------------
        -:    6:
        -:    7:#include "zma_parse.hpp"
        -:    8:#include "zma_text.hpp"
        -:    9:#include "zma_parse_process.hpp"
        -:   10:#include <string>
        -:   11:#include <cctype>
        -:   12:#include <iostream>
        -:   13:#include <fstream>
        -:   14:#include <sstream>
        -:   15:#include <algorithm>
        -:   16:
        -:   17:#include "zma_parse_process_global_label.hpp"
        -:   18:
        -:   19:// --------------------------------------------------------------------
       29:   20:bool CZMA_PARSE_GLOBAL_LABEL::process( CZMA_INFORMATION& info, CZMA_PARSE* p_last_line ) {
        -:   21:	std::string label;
        -:   22:	CVALUE v;
        -:   23:
       29:   24:	this->set_code_size( &info, 0 );
       29:   25:	update_flags( &info, p_last_line );
        -:   26:	//	log
       29:   27:	label = words[ 0 ];
       29:   28:	if( !this->is_analyze_phase ) {
       18:   29:		std::stringstream s;
       18:   30:		log.write_line_infomation( this->line_no, this->code_address, this->file_address, get_line() );
        9:   31:		if( this->get_code_address() == -1 ){
        1:   32:			s << "global label address: 0xXXXXXX";
        -:   33:		}
        -:   34:		else {
        8:   35:			s << "global label [" << label << "] address: 0x" << std::hex << std::setw( 6 ) << std::setfill( '0' ) << this->get_code_address();
        -:   36:		}
       18:   37:		log.write_message( s.str() );
        9:   38:		log.write_separator();
        -:   39:	}
       29:   40:	if( this->is_data_fixed ) {
        -:   41:		if( check_all_fixed() && info.dict.count( label ) ){
        -:   42:			return true;
        -:   43:		}
        -:   44:	}
       34:   45:	if( words[0][0] == '\"' ) {
       15:   46:		put_error( CZMA_ERROR::get( CZMA_ERROR_CODE::INVALID_COMMAND ) );
        3:   47:		return false;
        -:   48:	}
       14:   49:	if( this->is_fixed_code_address() ) {
       10:   50:		if( info.dict.count( label ) && info.dict[ label ].value_type != CVALUE_TYPE::CV_UNKNOWN_INTEGER ) {
        3:   51:			if( !( info.dict[ label ].value_type == CVALUE_TYPE::CV_INTEGER && info.dict[ label ].i == this->get_code_address() ) ){
    #####:   52:				put_error( CZMA_ERROR::get( CZMA_ERROR_CODE::MULTIPLE_DEFINITION ) );
    #####:   53:				return false;
        -:   54:			}
        -:   55:		}
        -:   56:		else{
        6:   57:			info.is_updated = true;
        6:   58:			v.i = this->get_code_address();
        6:   59:			v.value_type = CVALUE_TYPE::CV_INTEGER;
        6:   60:			info.dict[ label ] = v;
        -:   61:		}
        9:   62:		this->is_data_fixed = true;
        -:   63:	}
        -:   64:	else {
        -:   65:		if( info.dict.count( label ) ) {
        -:   66:			return check_all_fixed();
        -:   67:		}
        3:   68:		v.i = -1;
        3:   69:		v.value_type = CVALUE_TYPE::CV_UNKNOWN_INTEGER;
        3:   70:		info.dict[ label ] = v;
        3:   71:		info.is_updated = true;
       15:   72:		put_error( CZMA_ERROR::get( CZMA_ERROR_CODE::LABEL_IS_INDETERMINATE ), info.all_error_enable, info.error_disable );
        3:   73:		info.error_disable = true;
        3:   74:		return false;
        -:   75:	}
        -:   76:	return check_all_fixed();
      158:   77:}
