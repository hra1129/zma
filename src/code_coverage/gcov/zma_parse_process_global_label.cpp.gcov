        -:    0:Source:../sub/zma_parse_process_global_label.cpp
        -:    0:Programs:103
        -:    1:// --------------------------------------------------------------------
        -:    2://	Z80 Macro Assembler parse
        -:    3:// ====================================================================
        -:    4://	2019/05/04	t.hara
        -:    5:// --------------------------------------------------------------------
        -:    6:
        -:    7:#include "zma_parse.hpp"
        -:    8:#include "zma_text.hpp"
        -:    9:#include "zma_parse_process.hpp"
        -:   10:#include <string>
        -:   11:#include <cctype>
        -:   12:#include <iostream>
        -:   13:#include <fstream>
        -:   14:#include <sstream>
        -:   15:#include <algorithm>
        -:   16:
        -:   17:// --------------------------------------------------------------------
        8:   18:bool CZMA_PARSE_GLOBAL_LABEL::process( CZMA_INFORMATION& info, CZMA_PARSE* p_last_line ) {
        -:   19:	std::string label;
        -:   20:	CVALUE v;
        -:   21:
        8:   22:	this->set_code_size( &info, 0 );
        8:   23:	update_flags( &info, p_last_line );
        -:   24:	//	log
        8:   25:	label = words[ 0 ];
        8:   26:	if( !this->is_analyze_phase ) {
        4:   27:		std::stringstream s;
        4:   28:		log.write_line_infomation( this->line_no, this->code_address, this->file_address, get_line() );
        2:   29:		if( this->get_code_address() == -1 ){
    #####:   30:			s << "global label address: 0xXXXXXX";
        -:   31:		}
        -:   32:		else {
        2:   33:			s << "global label [" << label << "] address: 0x" << std::hex << std::setw( 6 ) << std::setfill( '0' ) << this->get_code_address();
        -:   34:		}
        4:   35:		log.write_message( s.str() );
        2:   36:		log.write_separator();
        -:   37:	}
        8:   38:	if( this->is_data_fixed ) {
        -:   39:		if( check_all_fixed() && info.dict.count( label ) ){
        -:   40:			return true;
        -:   41:		}
        -:   42:	}
        8:   43:	if( words[0][0] == '\"' ) {
    #####:   44:		put_error( "Invalid command." );
    #####:   45:		return false;
        -:   46:	}
        4:   47:	if( this->is_fixed_code_address() ) {
        4:   48:		if( info.dict.count( label ) && info.dict[ label ].value_type != CVALUE_TYPE::CV_UNKNOWN_INTEGER ) {
    #####:   49:			put_error( "There are declarations of the same label '" + label + "' in multiple places." );
    #####:   50:			return false;
        -:   51:		}
        -:   52:		else {
        2:   53:			this->is_data_fixed = true;
        2:   54:			v.i = this->get_code_address();
        2:   55:			v.value_type = CVALUE_TYPE::CV_INTEGER;
        2:   56:			info.dict[label] = v;
        2:   57:			info.is_updated = true;
        -:   58:		}
        -:   59:	}
        -:   60:	else {
        2:   61:		v.i = -1;
        2:   62:		v.value_type = CVALUE_TYPE::CV_UNKNOWN_INTEGER;
        2:   63:		info.dict[ label ] = v;
        2:   64:		info.is_updated = true;
        6:   65:		put_error( "Label '" + words[0] + "' is indeterminate." );
        2:   66:		return false;
        -:   67:	}
        -:   68:	return check_all_fixed();
       12:   69:}
