        -:    0:Source:../sub/zma_parse_process_if.cpp
        -:    0:Programs:106
        -:    1:// --------------------------------------------------------------------
        -:    2://	Z80 Macro Assembler parse
        -:    3:// ====================================================================
        -:    4://	2019/05/04	t.hara
        -:    5:// --------------------------------------------------------------------
        -:    6:
        -:    7:#include "zma_parse.hpp"
        -:    8:#include "zma_text.hpp"
        -:    9:#include "zma_parse_process.hpp"
        -:   10:#include <string>
        -:   11:#include <cctype>
        -:   12:#include <iostream>
        -:   13:#include <fstream>
        -:   14:#include <sstream>
        -:   15:#include <algorithm>
        -:   16:
        -:   17:// --------------------------------------------------------------------
        -:   18://	IF文は特殊な構造を持つのでこのメソッドを定義
        -:   19://	load 時は、このクラスは IFの1行目単独を示している。
        -:   20://	この関数では、IF〜ENDIF全体を示すように変更する。
        -:   21://	elseif, else, endif を if の中に取り込む。
       63:   22:void CZMA_PARSE_IF::block_structure( std::vector<CZMA_PARSE *> &m_text, std::vector<CZMA_PARSE *>::iterator &pp_current ){
        -:   23:	CZMA_PARSE_IF_BLOCK *p_block;
        -:   24:	CZMA_IF_BLOCK_T *p_sub;
        -:   25:	bool b_do_else;
        -:   26:
        -:   27:	//	この IF そのものの IF_BLOCK を作る。
      126:   28:	p_block = new CZMA_PARSE_IF_BLOCK( this->words, this->p_file_name, this->line_no );
      126:   29:	pp_current = m_text.insert( pp_current, p_block );	//	IF_BLOCK を IF の位置に挿入する
        -:   30:	pp_current++;										//	pp_current が IF を指すように移動させる
        -:   31:
        -:   32:	b_do_else = false;
      329:   33:	while( pp_current != m_text.end() ){
        -:   34:		//	ENDIF か？
      582:   35:		if( ( *pp_current )->words.size() > 0 && ( *pp_current )->words[ 0 ] == "ENDIF" ){
        -:   36:			//	ENDIF自体はもう不要なので削除
       61:   37:			pp_current = m_text.erase( pp_current );
        -:   38:			break;
        -:   39:		}
        -:   40:		//	IF, ELSEIF を sub に追加
      266:   41:		p_sub = new CZMA_IF_BLOCK_T;
      133:   42:		p_sub->p_if = reinterpret_cast< CZMA_PARSE_IF* >( *pp_current );
      133:   43:		pp_current = m_text.erase( pp_current );
      133:   44:		p_block->m_sub.push_back( p_sub );
        -:   45:		//	中身を p_if->m_text に詰める
        -:   46:		std::vector< CZMA_PARSE * >::iterator p = p_sub->p_if->m_text.m_text.begin();
      461:   47:		while( pp_current != m_text.end() ){
      590:   48:			if( ( *pp_current )->words.size() == 0 ){
        -:   49:				//	through
        -:   50:			}
      295:   51:			else if( ( *pp_current )->words[ 0 ] == "ENDIF" ){
        -:   52:				break;
        -:   53:			}
      234:   54:			else if( ( *pp_current )->words[ 0 ] == "ELSEIF" ){
       28:   55:				if( b_do_else ){
        -:   56:					//	ELSE のあとに ELSEIF がある場合、エラー
    #####:   57:					put_error( CZMA_ERROR::get( CZMA_ERROR_CODE::SYNTAX_ERROR ) );
        -:   58:				}
        -:   59:				break;
        -:   60:			}
      206:   61:			else if( ( *pp_current )->words[ 0 ] == "ELSE" ){
        -:   62:				b_do_else = true;
        -:   63:				break;
        -:   64:			}
      164:   65:			( *pp_current )->block_structure( m_text, pp_current );
      328:   66:			p_sub->p_if->m_text.m_text.push_back( *pp_current );
      164:   67:			pp_current = m_text.erase( pp_current );
        -:   68:		}
        -:   69:	}
        -:   70:	pp_current--;
       63:   71:}
        -:   72:
        -:   73:// --------------------------------------------------------------------
        1:   74:void CZMA_PARSE_ELSEIF::block_structure( std::vector<CZMA_PARSE *> &m_text, std::vector<CZMA_PARSE *>::iterator &pp_current ){
        -:   75:
        1:   76:	set_output_mode();
        5:   77:	put_error( CZMA_ERROR::get( CZMA_ERROR_CODE::SYNTAX_ERROR ) );
        1:   78:}
        -:   79:
        -:   80:// --------------------------------------------------------------------
        1:   81:void CZMA_PARSE_ELSE::block_structure( std::vector<CZMA_PARSE *> &m_text, std::vector<CZMA_PARSE *>::iterator &pp_current ){
        -:   82:
        1:   83:	set_output_mode();
        5:   84:	put_error( CZMA_ERROR::get( CZMA_ERROR_CODE::SYNTAX_ERROR ) );
        1:   85:}
        -:   86:
        -:   87:// --------------------------------------------------------------------
        -:   88://	1つのIF文についてコードサイズを計算する
    #####:   89:int CZMA_PARSE_IF_BLOCK::calc_code_size( CZMA_INFORMATION &info, CZMA_IF_BLOCK_T *p_block, CZMA_PARSE *p_last_line, int &next_code_address ){
        -:   90:	int code_size = 0;
        -:   91:
    #####:   92:	for( auto &p: p_block->p_if->m_text.m_text ){
    #####:   93:		if( p->is_fixed_code_size() ){
    #####:   94:			code_size += p->get_code_size();
        -:   95:		}
        -:   96:		else{
        -:   97:			return -1;
        -:   98:		}
    #####:   99:		if( p->is_fixed_next_code_address() ){
    #####:  100:			next_code_address = p->get_next_code_address();
        -:  101:		}
        -:  102:		else{
    #####:  103:			next_code_address = -1;
        -:  104:		}
        -:  105:	}
        -:  106:	return code_size;
        -:  107:}
        -:  108:
        -:  109:// --------------------------------------------------------------------
       21:  110:std::vector< std::vector< std::string > > CZMA_PARSE_IF_BLOCK::get_words( void ){
       21:  111:	std::vector< std::vector< std::string > > list, sub_list;
       63:  112:	std::vector< std::string > words_endif = { "ENDIF" };
        -:  113:
       72:  114:	for( auto &p_block : this->m_sub ){
      102:  115:		sub_list = p_block->p_if->get_words();
       51:  116:		list.insert( list.end(), sub_list.begin(), sub_list.end() );
        -:  117:	}
       21:  118:	list.push_back( words_endif );
       21:  119:	return list;
        -:  120:}
        -:  121:
        -:  122:// --------------------------------------------------------------------
      125:  123:bool CZMA_PARSE_IF_BLOCK::sub_process( CZMA_INFORMATION &info, CZMA_PARSE *p_last_line ){
        -:  124:	bool b_result = true;
        -:  125:	bool data_fixed = true;
        -:  126:	std::map< std::string, CVALUE > *p_previous_sub_dict;
        -:  127:
      166:  128:	for( auto &p_block : this->m_sub ){
        -:  129:		//	IF, ELSEIF, ELSE のいずれか
      163:  130:		p_previous_sub_dict = info.p_sub_dict;
      163:  131:		if( p_block->p_if->is_condition_fixed && !p_block->p_if->is_condition ){
        -:  132:			//	条件不成立が確定しているので次へ
       26:  133:			continue;
        -:  134:		}
      137:  135:		info.p_sub_dict = &( p_block->dict );
      137:  136:		if( !p_block->p_if->process( info, p_last_line ) ){
        -:  137:			b_result = false;
        -:  138:		}
      137:  139:		if( !p_block->p_if->is_condition_fixed || !p_block->p_if->check_data_fixed() ){
        -:  140:			data_fixed = false;
        -:  141:		}
      137:  142:		info.p_sub_dict = p_previous_sub_dict;
      137:  143:		if( p_block->p_if->is_condition_fixed && p_block->p_if->is_condition ){
        -:  144:			//	この条件が選択されたので、これ以降の ELSEIF, ELSE は評価対象外
        -:  145:			break;
        -:  146:		}
        -:  147:	}
      125:  148:	is_data_fixed = data_fixed;
      125:  149:	return b_result;
        -:  150:}
        -:  151:
        -:  152:// --------------------------------------------------------------------
       51:  153:void CZMA_PARSE_IF_BLOCK::set_output_mode( void ){
        -:  154:
       51:  155:	this->is_analyze_phase = false;
      155:  156:	for( auto &p_block : this->m_sub ){
      104:  157:		p_block->p_if->set_output_mode();
        -:  158:	}
       51:  159:}
        -:  160:
        -:  161:// --------------------------------------------------------------------
    #####:  162:void CZMA_PARSE_IF_BLOCK::update_condition( CZMA_INFORMATION &info, CZMA_PARSE *p_last_line ){
        -:  163:
      125:  164:	if( this->is_condition_fixed ){
        -:  165:		//	すでに条件式は全て確定している
        -:  166:		return;
        -:  167:	}
       43:  168:	this->is_condition_fixed = true;
       56:  169:	for( auto &p : this->m_sub ){
       55:  170:		if( p->p_if->is_condition_fixed && p->p_if->is_condition ){
        -:  171:			//	条件が確定していて、かつ TRUE である場合、これ以降の条件が未確定でも関係ないので確定したことにする
       40:  172:			info.is_updated = true;		//	条件確定への変化ということで、is_update を立てる
    #####:  173:			break;
        -:  174:		}
       15:  175:		if( !p->p_if->is_condition_fixed ){
        -:  176:			//	条件が確定していない IF/ELSEIF に当たった場合、これ以降の条件が確定であっても関係ないので未確定として抜ける
        2:  177:			this->is_condition_fixed = false;
    #####:  178:			break;
        -:  179:		}
        -:  180:	}
        -:  181:}
        -:  182:
        -:  183:// --------------------------------------------------------------------
      125:  184:void CZMA_PARSE_IF_BLOCK::update_code_size( CZMA_INFORMATION &info, CZMA_PARSE *p_last_line ){
        -:  185:	bool b_code_size_fixed;
        -:  186:	bool b_next_code_address_fixed;
        -:  187:
      125:  188:	b_code_size_fixed = ( this->code_size != -1 );
      125:  189:	b_next_code_address_fixed = ( this->next_code_address != -1 );
        -:  190:
      125:  191:	if( b_code_size_fixed && b_next_code_address_fixed ){
        -:  192:		//	すでにサイズは確定済みなので何もしない
        -:  193:		return;
        -:  194:	}
        -:  195:
       57:  196:	this->code_size = -1;
       57:  197:	this->next_code_address = -1;
       75:  198:	for( auto &p : this->m_sub ){
       70:  199:		if( p->p_if->is_condition_fixed ) {
        -:  200:			//	条件が確定済みの場合
       68:  201:			if( !p->p_if->is_condition ){
        -:  202:				//	条件不成立の場合、影響を及ぼさない
       14:  203:				continue;
        -:  204:			}
        -:  205:			//	条件成立の場合
       54:  206:			if( p->p_if->get_code_size() == -1 ){
        -:  207:				//	まだコードサイズが定まっていない場合
       18:  208:				this->code_size = -1;
       18:  209:				this->next_code_address = -1;
       18:  210:				break;
        -:  211:			}
        -:  212:			//	コードサイズが定まっている場合
       36:  213:			if( this->code_size == -1 ){
        -:  214:				//	最初のIF文の場合、ここで全てが確定する
       34:  215:				this->code_size = p->p_if->get_code_size();
       34:  216:				this->next_code_address = p->p_if->get_next_code_address();
       34:  217:				break;
        -:  218:			}
        -:  219:			//	2番目以降のIF文の場合、サイズの違いをチェックする
        2:  220:			if( this->code_size != p->p_if->get_code_size() ){
        -:  221:				//	1番目と2番目以降でサイズが異なっているので未確定扱いに6する
    #####:  222:				this->code_size = -1;
        -:  223:			}
        2:  224:			if( this->next_code_address != p->p_if->get_next_code_address() ){
        -:  225:				//	1番目と2番目以降でサイズが異なっているので未確定扱いに6する
    #####:  226:				this->next_code_address = -1;
        -:  227:			}
        2:  228:			if( this->code_size == -1 || this->next_code_address == -1 ){
        -:  229:				//	未確定が発生したので抜ける
        -:  230:				break;
        -:  231:			}
        -:  232:		}
        -:  233:		else{
        -:  234:			//	条件が未確定の場合
        2:  235:			if( p->p_if->get_code_size() == -1 ){
        -:  236:				//	まだコードサイズが定まっていない場合
    #####:  237:				this->code_size = -1;
    #####:  238:				this->next_code_address = -1;
    #####:  239:				break;
        -:  240:			}
        -:  241:			//	コードサイズが定まっている場合
        4:  242:			if( this->code_size == -1 ){
        -:  243:				//	最初のIF文の場合、ここで全てが確定する
        2:  244:				this->code_size = p->p_if->get_code_size();
        2:  245:				this->next_code_address = p->p_if->get_next_code_address();
        2:  246:				continue;
        -:  247:			}
        -:  248:			//	2番目以降のIF文の場合、サイズの違いをチェックする
    #####:  249:			if( this->code_size != p->p_if->get_code_size() ){
        -:  250:				//	1番目と2番目以降でサイズが異なっているので未確定扱いに6する
    #####:  251:				this->code_size = -1;
        -:  252:			}
    #####:  253:			if( this->next_code_address != p->p_if->get_next_code_address() ){
        -:  254:				//	1番目と2番目以降でサイズが異なっているので未確定扱いに6する
    #####:  255:				this->next_code_address = -1;
        -:  256:			}
    #####:  257:			if( this->code_size == -1 || this->next_code_address == -1 ){
        -:  258:				//	未確定が発生したので抜ける
        -:  259:				break;
        -:  260:			}
        -:  261:		}
        -:  262:	}
       57:  263:	if( ((!b_code_size_fixed) && (this->code_size != -1)) || ((!b_next_code_address_fixed) && (this->next_code_address != -1)) ){
       34:  264:		info.is_updated = true;
        -:  265:	}
        -:  266:}
        -:  267:
        -:  268:// --------------------------------------------------------------------
      125:  269:bool CZMA_PARSE_IF_BLOCK::process( CZMA_INFORMATION& info, CZMA_PARSE* p_last_line ) {
        -:  270:
      125:  271:	sub_process( info, p_last_line );
      125:  272:	update_flags( &info, p_last_line );
        -:  273:	update_condition( info, p_last_line );
      125:  274:	update_code_size( info, p_last_line );
      125:  275:	return check_all_fixed();
        -:  276:}
        -:  277:
        -:  278:// --------------------------------------------------------------------
       49:  279:bool CZMA_PARSE_IF_BLOCK::write_output_and_log( CZMA_INFORMATION &info, std::ofstream *f ){
        -:  280:	bool result = true;
        -:  281:
       98:  282:	if( this->m_sub.size() == 0 ){
        -:  283:		return true;
        -:  284:	}
       82:  285:	for( auto &p : this->m_sub ){
       73:  286:		if( p->p_if->is_condition_fixed && p->p_if->is_condition ){
       40:  287:			result = p->p_if->write_output_and_log( info, f );
        -:  288:			break;
        -:  289:		}
        -:  290:	}
        -:  291:	return result;
        -:  292:}
        -:  293:
        -:  294:// --------------------------------------------------------------------
       51:  295:std::vector< std::vector< std::string > > CZMA_PARSE_IF::get_words( void ){
       51:  296:	std::vector< std::vector< std::string > > list, sub_list;
        -:  297:
       51:  298:	list.push_back( this->words );
      121:  299:	for( auto &p_block : this->m_text.m_text ){
      140:  300:		sub_list = p_block->get_words();
       70:  301:		list.insert( list.end(), sub_list.begin(), sub_list.end() );
        -:  302:	}
       51:  303:	return list;
        -:  304:}
        -:  305:
        -:  306:// --------------------------------------------------------------------
      105:  307:bool CZMA_PARSE_IF::process( CZMA_INFORMATION &info, CZMA_PARSE *p_last_line ){
        -:  308:	int index;
        -:  309:	unsigned int success_count;
        -:  310:	CVALUE result;
        -:  311:
        -:  312:	//	条件式を評価する
      105:  313:	this->update_flags( &info, p_last_line );
      105:  314:	if( !this->is_condition_fixed ){
       43:  315:		index = this->expression( info, 1, result );
       86:  316:		if( result.is_unknown() ){
        -:  317:			//	条件式が不定なので、未確定扱いを維持
        2:  318:			this->is_condition_fixed = false;
        -:  319:		}
       41:  320:		else if( result.is_string() ){
        -:  321:			//	条件式が文字列になっているので、エラーにする
    #####:  322:			put_error( CZMA_ERROR::get( CZMA_ERROR_CODE::ILLEGAL_PARAMETER ) );
    #####:  323:			return false;
        -:  324:		}
        -:  325:		else{
        -:  326:			//	条件式が確定したので、結果を保存する
       41:  327:			this->is_condition = ( result.i != 0 );
       41:  328:			this->is_condition_fixed = true;
        -:  329:		}
        -:  330:	}
      105:  331:	if( this->is_condition_fixed && !this->is_condition ){
        -:  332:		//	条件を評価済みで、条件が FALSE だった場合、何も出さない。
        -:  333:		return true;
        -:  334:	}
        -:  335:	//	中身を評価する
       95:  336:	this->m_text.process( info, success_count, p_last_line, !this->is_analyze_phase );
       95:  337:	this->m_text.calc_code_size();
       95:  338:	this->code_size = this->m_text.get_code_size();
       95:  339:	this->is_data_fixed = this->m_text.check_data_fixed();
       95:  340:	if( !this->is_fixed_next_code_address() ){
       46:  341:		this->next_code_address = this->m_text.get_next_code_address();
        -:  342:	}
        -:  343:	return check_all_fixed();
        -:  344:}
        -:  345:
        -:  346:// --------------------------------------------------------------------
      106:  347:void CZMA_PARSE_IF::set_output_mode( void ){
        -:  348:
      106:  349:	this->is_analyze_phase = false;
      240:  350:	for( auto &p : this->m_text.m_text ){
      134:  351:		p->set_output_mode();
        -:  352:	}
      106:  353:}
        -:  354:
        -:  355:// --------------------------------------------------------------------
       42:  356:bool CZMA_PARSE_IF::write_output_and_log( CZMA_INFORMATION &info, std::ofstream *f ){
        -:  357:	bool result = true;
        -:  358:
       42:  359:	if( this->is_condition_fixed && !this->is_condition ){
        -:  360:		//	条件を評価済みで、条件が FALSE だった場合、何も出さない。
        -:  361:		return true;
        -:  362:	}
       88:  363:	for( auto &p : this->m_text.m_text ){
       46:  364:		result = p->write_output_and_log( info, f ) && result;
        -:  365:	}
        -:  366:	return result;
        -:  367:}
        -:  368:
        -:  369:// --------------------------------------------------------------------
       15:  370:bool CZMA_PARSE_ELSEIF::process( CZMA_INFORMATION& info, CZMA_PARSE* p_last_line ) {
        -:  371:	int index;
        -:  372:	unsigned int success_count;
        -:  373:	CVALUE result;
        -:  374:
        -:  375:	//	条件式を評価する
       15:  376:	this->update_flags( &info, p_last_line );
       15:  377:	if( !this->is_condition_fixed ){
        7:  378:		index = this->expression( info, 1, result );
       14:  379:		if( result.is_unknown() ){
        -:  380:			//	条件式が不定なので、未確定扱いを維持
    #####:  381:			this->is_condition_fixed = false;
        -:  382:		}
        7:  383:		else if( result.is_string() ){
        -:  384:			//	条件式が文字列になっているので、エラーにする
    #####:  385:			put_error( CZMA_ERROR::get( CZMA_ERROR_CODE::ILLEGAL_PARAMETER ) );
    #####:  386:			return false;
        -:  387:		}
        -:  388:		else{
        -:  389:			//	条件式が確定したので、結果を保存する
        7:  390:			this->is_condition = ( result.i != 0 );
        7:  391:			this->is_condition_fixed = true;
        -:  392:		}
        -:  393:	}
       15:  394:	if( this->is_condition_fixed && !this->is_condition ){
        -:  395:		//	条件を評価済みで、条件が FALSE だった場合、何も出さない。
        -:  396:		return true;
        -:  397:	}
        -:  398:	//	中身を評価する
       12:  399:	this->m_text.process( info, success_count, p_last_line, !this->is_analyze_phase );
       12:  400:	this->m_text.calc_code_size();
       12:  401:	this->code_size = this->m_text.get_code_size();
       12:  402:	this->is_data_fixed = this->m_text.check_data_fixed();
       12:  403:	if( !this->is_fixed_next_code_address() ){
        4:  404:		this->next_code_address = this->m_text.get_next_code_address();
        -:  405:	}
        -:  406:	return check_all_fixed();
        -:  407:}
        -:  408:
        -:  409:// --------------------------------------------------------------------
       17:  410:bool CZMA_PARSE_ELSE::process( CZMA_INFORMATION& info, CZMA_PARSE* p_last_line ) {
        -:  411:	unsigned int success_count;
        -:  412:
       17:  413:	this->update_flags( &info, p_last_line );
        -:  414:	//	ELSE は、条件式無しで常に成立。
       17:  415:	if( !this->is_condition_fixed ){
        6:  416:		info.is_updated = true;
        -:  417:	}
       17:  418:	this->is_condition_fixed = true;
       17:  419:	this->is_condition = true;
        -:  420:
       17:  421:	this->m_text.process( info, success_count, p_last_line, !this->is_analyze_phase );
       17:  422:	this->m_text.calc_code_size();
       17:  423:	this->code_size = this->m_text.get_code_size();
       17:  424:	this->is_data_fixed = this->m_text.check_data_fixed();
       17:  425:	if( !this->is_fixed_next_code_address() ){
        6:  426:		this->next_code_address = this->m_text.get_next_code_address();
        -:  427:	}
       17:  428:	return this->check_all_fixed();
        -:  429:}
        -:  430:
        -:  431:// --------------------------------------------------------------------
       18:  432:bool CZMA_PARSE_ENDIF::process( CZMA_INFORMATION& info, CZMA_PARSE* p_last_line ) {
        -:  433:	//	本来、これは実行されるべきでないので、常にエラーを返す。
       90:  434:	put_error( CZMA_ERROR::get( CZMA_ERROR_CODE::SYNTAX_ERROR ) );
       18:  435:	return false;
      156:  436:}
