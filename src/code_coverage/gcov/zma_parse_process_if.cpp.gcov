        -:    0:Source:../sub/zma_parse_process_if.cpp
        -:    0:Programs:106
        -:    1:// --------------------------------------------------------------------
        -:    2://	Z80 Macro Assembler parse
        -:    3:// ====================================================================
        -:    4://	2019/05/04	t.hara
        -:    5:// --------------------------------------------------------------------
        -:    6:
        -:    7:#include "zma_parse.hpp"
        -:    8:#include "zma_text.hpp"
        -:    9:#include "zma_parse_process.hpp"
        -:   10:#include <string>
        -:   11:#include <cctype>
        -:   12:#include <iostream>
        -:   13:#include <fstream>
        -:   14:#include <sstream>
        -:   15:#include <algorithm>
        -:   16:
        -:   17:#include "zma_parse_process_if.hpp"
        -:   18:
        -:   19:// --------------------------------------------------------------------
        -:   20://	IF文は特殊な構造を持つのでこのメソッドを定義
        -:   21://	load 時は、このクラスは IFの1行目単独を示している。
        -:   22://	この関数では、IF〜ENDIF全体を示すように変更する。
        -:   23://	elseif, else, endif を if の中に取り込む。
       64:   24:void CZMA_PARSE_IF::block_structure( std::vector<CZMA_PARSE *> &m_text, std::vector<CZMA_PARSE *>::iterator &pp_current ){
        -:   25:	CZMA_PARSE_IF_BLOCK *p_block;
        -:   26:	CZMA_IF_BLOCK_T *p_sub;
        -:   27:	bool b_do_else;
        -:   28:
        -:   29:	//	この IF そのものの IF_BLOCK を作る。
      128:   30:	p_block = new CZMA_PARSE_IF_BLOCK( this->words, this->p_file_name, this->line_no );
      128:   31:	pp_current = m_text.insert( pp_current, p_block );	//	IF_BLOCK を IF の位置に挿入する
        -:   32:	pp_current++;										//	pp_current が IF を指すように移動させる
        -:   33:
        -:   34:	b_do_else = false;
      332:   35:	while( pp_current != m_text.end() ){
        -:   36:		//	ENDIF か？
      588:   37:		if( ( *pp_current )->words.size() > 0 && ( *pp_current )->words[ 0 ] == "ENDIF" ){
        -:   38:			//	ENDIF自体はもう不要なので削除
       62:   39:			pp_current = m_text.erase( pp_current );
        -:   40:			break;
        -:   41:		}
        -:   42:		//	IF, ELSEIF を sub に追加
      268:   43:		p_sub = new CZMA_IF_BLOCK_T;
      134:   44:		p_sub->p_if = reinterpret_cast< CZMA_PARSE_IF* >( *pp_current );
      134:   45:		pp_current = m_text.erase( pp_current );
      134:   46:		p_block->m_sub.push_back( p_sub );
        -:   47:		//	中身を p_if->m_text に詰める
        -:   48:		std::vector< CZMA_PARSE * >::iterator p = p_sub->p_if->m_text.m_text.begin();
      464:   49:		while( pp_current != m_text.end() ){
      594:   50:			if( ( *pp_current )->words.size() == 0 ){
        -:   51:				//	through
        -:   52:			}
      297:   53:			else if( ( *pp_current )->words[ 0 ] == "ENDIF" ){
        -:   54:				break;
        -:   55:			}
      235:   56:			else if( ( *pp_current )->words[ 0 ] == "ELSEIF" ){
       28:   57:				if( b_do_else ){
        -:   58:					//	ELSE のあとに ELSEIF がある場合、エラー
    #####:   59:					put_error( CZMA_ERROR::get( CZMA_ERROR_CODE::SYNTAX_ERROR ) );
        -:   60:				}
        -:   61:				break;
        -:   62:			}
      207:   63:			else if( ( *pp_current )->words[ 0 ] == "ELSE" ){
        -:   64:				b_do_else = true;
        -:   65:				break;
        -:   66:			}
      165:   67:			( *pp_current )->block_structure( m_text, pp_current );
      330:   68:			p_sub->p_if->m_text.m_text.push_back( *pp_current );
      165:   69:			pp_current = m_text.erase( pp_current );
        -:   70:		}
        -:   71:	}
        -:   72:	pp_current--;
       64:   73:}
        -:   74:
        -:   75:// --------------------------------------------------------------------
        1:   76:void CZMA_PARSE_ELSEIF::block_structure( std::vector<CZMA_PARSE *> &m_text, std::vector<CZMA_PARSE *>::iterator &pp_current ){
        -:   77:
        1:   78:	set_output_mode();
        5:   79:	put_error( CZMA_ERROR::get( CZMA_ERROR_CODE::SYNTAX_ERROR ) );
        1:   80:}
        -:   81:
        -:   82:// --------------------------------------------------------------------
        1:   83:void CZMA_PARSE_ELSE::block_structure( std::vector<CZMA_PARSE *> &m_text, std::vector<CZMA_PARSE *>::iterator &pp_current ){
        -:   84:
        1:   85:	set_output_mode();
        5:   86:	put_error( CZMA_ERROR::get( CZMA_ERROR_CODE::SYNTAX_ERROR ) );
        1:   87:}
        -:   88:
        -:   89:// --------------------------------------------------------------------
        -:   90://	1つのIF文についてコードサイズを計算する
    #####:   91:int CZMA_PARSE_IF_BLOCK::calc_code_size( CZMA_INFORMATION &info, CZMA_IF_BLOCK_T *p_block, CZMA_PARSE *p_last_line, int &next_code_address ){
        -:   92:	int code_size = 0;
        -:   93:
    #####:   94:	for( auto &p: p_block->p_if->m_text.m_text ){
    #####:   95:		if( p->is_fixed_code_size() ){
    #####:   96:			code_size += p->get_code_size();
        -:   97:		}
        -:   98:		else{
        -:   99:			return -1;
        -:  100:		}
    #####:  101:		if( p->is_fixed_next_code_address() ){
    #####:  102:			next_code_address = p->get_next_code_address();
        -:  103:		}
        -:  104:		else{
    #####:  105:			next_code_address = -1;
        -:  106:		}
        -:  107:	}
        -:  108:	return code_size;
        -:  109:}
        -:  110:
        -:  111:// --------------------------------------------------------------------
       21:  112:std::vector< std::vector< std::string > > CZMA_PARSE_IF_BLOCK::get_words( void ){
       21:  113:	std::vector< std::vector< std::string > > list, sub_list;
       63:  114:	std::vector< std::string > words_endif = { "ENDIF" };
        -:  115:
       72:  116:	for( auto &p_block : this->m_sub ){
      102:  117:		sub_list = p_block->p_if->get_words();
       51:  118:		list.insert( list.end(), sub_list.begin(), sub_list.end() );
        -:  119:	}
       21:  120:	list.push_back( words_endif );
       21:  121:	return list;
        -:  122:}
        -:  123:
        -:  124:// --------------------------------------------------------------------
      128:  125:bool CZMA_PARSE_IF_BLOCK::sub_process( CZMA_INFORMATION &info, CZMA_PARSE *p_last_line ){
        -:  126:	bool b_result = true;
        -:  127:	bool data_fixed = true;
        -:  128:	std::map< std::string, CVALUE > *p_previous_sub_dict;
        -:  129:
      169:  130:	for( auto &p_block : this->m_sub ){
        -:  131:		//	IF, ELSEIF, ELSE のいずれか
      166:  132:		p_previous_sub_dict = info.p_sub_dict;
      166:  133:		if( p_block->p_if->is_condition_fixed && !p_block->p_if->is_condition ){
        -:  134:			//	条件不成立が確定しているので次へ
       26:  135:			continue;
        -:  136:		}
      140:  137:		info.p_sub_dict = &( p_block->dict );
      140:  138:		if( !p_block->p_if->process( info, p_last_line ) ){
        -:  139:			b_result = false;
        -:  140:		}
      140:  141:		if( !p_block->p_if->is_condition_fixed || !p_block->p_if->check_data_fixed() ){
        -:  142:			data_fixed = false;
        -:  143:		}
      140:  144:		info.p_sub_dict = p_previous_sub_dict;
      140:  145:		if( p_block->p_if->is_condition_fixed && p_block->p_if->is_condition ){
        -:  146:			//	この条件が選択されたので、これ以降の ELSEIF, ELSE は評価対象外
        -:  147:			break;
        -:  148:		}
        -:  149:	}
      128:  150:	is_data_fixed = data_fixed;
      128:  151:	return b_result;
        -:  152:}
        -:  153:
        -:  154:// --------------------------------------------------------------------
       52:  155:void CZMA_PARSE_IF_BLOCK::set_output_mode( void ){
        -:  156:
       52:  157:	this->is_analyze_phase = false;
      157:  158:	for( auto &p_block : this->m_sub ){
      105:  159:		p_block->p_if->set_output_mode();
        -:  160:	}
       52:  161:}
        -:  162:
        -:  163:// --------------------------------------------------------------------
    #####:  164:void CZMA_PARSE_IF_BLOCK::update_condition( CZMA_INFORMATION &info, CZMA_PARSE *p_last_line ){
        -:  165:
      128:  166:	if( this->is_condition_fixed ){
        -:  167:		//	すでに条件式は全て確定している
        -:  168:		return;
        -:  169:	}
       44:  170:	this->is_condition_fixed = true;
       57:  171:	for( auto &p : this->m_sub ){
       56:  172:		if( p->p_if->is_condition_fixed && p->p_if->is_condition ){
        -:  173:			//	条件が確定していて、かつ TRUE である場合、これ以降の条件が未確定でも関係ないので確定したことにする
       41:  174:			info.is_updated = true;		//	条件確定への変化ということで、is_update を立てる
    #####:  175:			break;
        -:  176:		}
       15:  177:		if( !p->p_if->is_condition_fixed ){
        -:  178:			//	条件が確定していない IF/ELSEIF に当たった場合、これ以降の条件が確定であっても関係ないので未確定として抜ける
        2:  179:			this->is_condition_fixed = false;
    #####:  180:			break;
        -:  181:		}
        -:  182:	}
        -:  183:}
        -:  184:
        -:  185:// --------------------------------------------------------------------
      128:  186:void CZMA_PARSE_IF_BLOCK::update_code_size( CZMA_INFORMATION &info, CZMA_PARSE *p_last_line ){
        -:  187:	bool b_code_size_fixed;
        -:  188:	bool b_next_code_address_fixed;
        -:  189:
      128:  190:	b_code_size_fixed = ( this->code_size != -1 );
      128:  191:	b_next_code_address_fixed = ( this->next_code_address != -1 );
        -:  192:
      128:  193:	if( b_code_size_fixed && b_next_code_address_fixed ){
        -:  194:		//	すでにサイズは確定済みなので何もしない
        -:  195:		return;
        -:  196:	}
        -:  197:
       58:  198:	this->code_size = -1;
       58:  199:	this->next_code_address = -1;
       76:  200:	for( auto &p : this->m_sub ){
       71:  201:		if( p->p_if->is_condition_fixed ) {
        -:  202:			//	条件が確定済みの場合
       69:  203:			if( !p->p_if->is_condition ){
        -:  204:				//	条件不成立の場合、影響を及ぼさない
       14:  205:				continue;
        -:  206:			}
        -:  207:			//	条件成立の場合
       55:  208:			if( p->p_if->get_code_size() == -1 ){
        -:  209:				//	まだコードサイズが定まっていない場合
       18:  210:				this->code_size = -1;
       18:  211:				this->next_code_address = -1;
       18:  212:				break;
        -:  213:			}
        -:  214:			//	コードサイズが定まっている場合
       37:  215:			if( this->code_size == -1 ){
        -:  216:				//	最初のIF文の場合、ここで全てが確定する
       35:  217:				this->code_size = p->p_if->get_code_size();
       35:  218:				this->next_code_address = p->p_if->get_next_code_address();
       35:  219:				break;
        -:  220:			}
        -:  221:			//	2番目以降のIF文の場合、サイズの違いをチェックする
        2:  222:			if( this->code_size != p->p_if->get_code_size() ){
        -:  223:				//	1番目と2番目以降でサイズが異なっているので未確定扱いに6する
    #####:  224:				this->code_size = -1;
        -:  225:			}
        2:  226:			if( this->next_code_address != p->p_if->get_next_code_address() ){
        -:  227:				//	1番目と2番目以降でサイズが異なっているので未確定扱いに6する
    #####:  228:				this->next_code_address = -1;
        -:  229:			}
        2:  230:			if( this->code_size == -1 || this->next_code_address == -1 ){
        -:  231:				//	未確定が発生したので抜ける
        -:  232:				break;
        -:  233:			}
        -:  234:		}
        -:  235:		else{
        -:  236:			//	条件が未確定の場合
        2:  237:			if( p->p_if->get_code_size() == -1 ){
        -:  238:				//	まだコードサイズが定まっていない場合
    #####:  239:				this->code_size = -1;
    #####:  240:				this->next_code_address = -1;
    #####:  241:				break;
        -:  242:			}
        -:  243:			//	コードサイズが定まっている場合
        4:  244:			if( this->code_size == -1 ){
        -:  245:				//	最初のIF文の場合、ここで全てが確定する
        2:  246:				this->code_size = p->p_if->get_code_size();
        2:  247:				this->next_code_address = p->p_if->get_next_code_address();
        2:  248:				continue;
        -:  249:			}
        -:  250:			//	2番目以降のIF文の場合、サイズの違いをチェックする
    #####:  251:			if( this->code_size != p->p_if->get_code_size() ){
        -:  252:				//	1番目と2番目以降でサイズが異なっているので未確定扱いに6する
    #####:  253:				this->code_size = -1;
        -:  254:			}
    #####:  255:			if( this->next_code_address != p->p_if->get_next_code_address() ){
        -:  256:				//	1番目と2番目以降でサイズが異なっているので未確定扱いに6する
    #####:  257:				this->next_code_address = -1;
        -:  258:			}
    #####:  259:			if( this->code_size == -1 || this->next_code_address == -1 ){
        -:  260:				//	未確定が発生したので抜ける
        -:  261:				break;
        -:  262:			}
        -:  263:		}
        -:  264:	}
       58:  265:	if( ((!b_code_size_fixed) && (this->code_size != -1)) || ((!b_next_code_address_fixed) && (this->next_code_address != -1)) ){
       35:  266:		info.is_updated = true;
        -:  267:	}
        -:  268:}
        -:  269:
        -:  270:// --------------------------------------------------------------------
      128:  271:bool CZMA_PARSE_IF_BLOCK::process( CZMA_INFORMATION& info, CZMA_PARSE* p_last_line ) {
        -:  272:
      128:  273:	sub_process( info, p_last_line );
      128:  274:	update_flags( &info, p_last_line );
        -:  275:	update_condition( info, p_last_line );
      128:  276:	update_code_size( info, p_last_line );
      128:  277:	return check_all_fixed();
        -:  278:}
        -:  279:
        -:  280:// --------------------------------------------------------------------
       54:  281:bool CZMA_PARSE_IF_BLOCK::write_output_and_log( CZMA_INFORMATION &info, std::ofstream *f ){
        -:  282:	bool result = true;
        -:  283:
      108:  284:	if( this->m_sub.size() == 0 ){
        -:  285:		return true;
        -:  286:	}
       96:  287:	for( auto &p : this->m_sub ){
       83:  288:		if( p->p_if->is_condition_fixed && p->p_if->is_condition ){
       41:  289:			result = p->p_if->write_output_and_log( info, f );
        -:  290:			break;
        -:  291:		}
        -:  292:	}
        -:  293:	return result;
        -:  294:}
        -:  295:
        -:  296:// --------------------------------------------------------------------
       51:  297:std::vector< std::vector< std::string > > CZMA_PARSE_IF::get_words( void ){
       51:  298:	std::vector< std::vector< std::string > > list, sub_list;
        -:  299:
       51:  300:	list.push_back( this->words );
      121:  301:	for( auto &p_block : this->m_text.m_text ){
      140:  302:		sub_list = p_block->get_words();
       70:  303:		list.insert( list.end(), sub_list.begin(), sub_list.end() );
        -:  304:	}
       51:  305:	return list;
        -:  306:}
        -:  307:
        -:  308:// --------------------------------------------------------------------
      108:  309:bool CZMA_PARSE_IF::process( CZMA_INFORMATION &info, CZMA_PARSE *p_last_line ){
        -:  310:	int index;
        -:  311:	unsigned int success_count;
        -:  312:	CVALUE result;
        -:  313:
        -:  314:	//	条件式を評価する
      108:  315:	this->update_flags( &info, p_last_line );
      108:  316:	if( !this->is_condition_fixed ){
       44:  317:		index = this->expression( info, 1, result );
       88:  318:		if( result.is_unknown() ){
        -:  319:			//	条件式が不定なので、未確定扱いを維持
        2:  320:			this->is_condition_fixed = false;
        -:  321:		}
       42:  322:		else if( result.is_string() ){
        -:  323:			//	条件式が文字列になっているので、エラーにする
    #####:  324:			put_error( CZMA_ERROR::get( CZMA_ERROR_CODE::ILLEGAL_PARAMETER ) );
    #####:  325:			return false;
        -:  326:		}
        -:  327:		else{
        -:  328:			//	条件式が確定したので、結果を保存する
       42:  329:			this->is_condition = ( result.i != 0 );
       42:  330:			this->is_condition_fixed = true;
        -:  331:		}
        -:  332:	}
      108:  333:	if( this->is_condition_fixed && !this->is_condition ){
        -:  334:		//	条件を評価済みで、条件が FALSE だった場合、何も出さない。
        -:  335:		return true;
        -:  336:	}
        -:  337:	//	中身を評価する
       98:  338:	this->m_text.process( info, success_count, p_last_line, !this->is_analyze_phase );
       98:  339:	this->m_text.calc_code_size();
       98:  340:	this->code_size = this->m_text.get_code_size();
       98:  341:	this->is_data_fixed = this->m_text.check_data_fixed();
       98:  342:	if( !this->is_fixed_next_code_address() ){
       47:  343:		this->next_code_address = this->m_text.get_next_code_address();
        -:  344:	}
        -:  345:	return check_all_fixed();
        -:  346:}
        -:  347:
        -:  348:// --------------------------------------------------------------------
      107:  349:void CZMA_PARSE_IF::set_output_mode( void ){
        -:  350:
      107:  351:	this->is_analyze_phase = false;
      242:  352:	for( auto &p : this->m_text.m_text ){
      135:  353:		p->set_output_mode();
        -:  354:	}
      107:  355:}
        -:  356:
        -:  357:// --------------------------------------------------------------------
       43:  358:bool CZMA_PARSE_IF::write_output_and_log( CZMA_INFORMATION &info, std::ofstream *f ){
        -:  359:	bool result = true;
        -:  360:
       43:  361:	if( this->is_condition_fixed && !this->is_condition ){
        -:  362:		//	条件を評価済みで、条件が FALSE だった場合、何も出さない。
        -:  363:		return true;
        -:  364:	}
       90:  365:	for( auto &p : this->m_text.m_text ){
       47:  366:		result = p->write_output_and_log( info, f ) && result;
        -:  367:	}
        -:  368:	return result;
        -:  369:}
        -:  370:
        -:  371:// --------------------------------------------------------------------
       15:  372:bool CZMA_PARSE_ELSEIF::process( CZMA_INFORMATION& info, CZMA_PARSE* p_last_line ) {
        -:  373:	int index;
        -:  374:	unsigned int success_count;
        -:  375:	CVALUE result;
        -:  376:
        -:  377:	//	条件式を評価する
       15:  378:	this->update_flags( &info, p_last_line );
       15:  379:	if( !this->is_condition_fixed ){
        7:  380:		index = this->expression( info, 1, result );
       14:  381:		if( result.is_unknown() ){
        -:  382:			//	条件式が不定なので、未確定扱いを維持
    #####:  383:			this->is_condition_fixed = false;
        -:  384:		}
        7:  385:		else if( result.is_string() ){
        -:  386:			//	条件式が文字列になっているので、エラーにする
    #####:  387:			put_error( CZMA_ERROR::get( CZMA_ERROR_CODE::ILLEGAL_PARAMETER ) );
    #####:  388:			return false;
        -:  389:		}
        -:  390:		else{
        -:  391:			//	条件式が確定したので、結果を保存する
        7:  392:			this->is_condition = ( result.i != 0 );
        7:  393:			this->is_condition_fixed = true;
        -:  394:		}
        -:  395:	}
       15:  396:	if( this->is_condition_fixed && !this->is_condition ){
        -:  397:		//	条件を評価済みで、条件が FALSE だった場合、何も出さない。
        -:  398:		return true;
        -:  399:	}
        -:  400:	//	中身を評価する
       12:  401:	this->m_text.process( info, success_count, p_last_line, !this->is_analyze_phase );
       12:  402:	this->m_text.calc_code_size();
       12:  403:	this->code_size = this->m_text.get_code_size();
       12:  404:	this->is_data_fixed = this->m_text.check_data_fixed();
       12:  405:	if( !this->is_fixed_next_code_address() ){
        4:  406:		this->next_code_address = this->m_text.get_next_code_address();
        -:  407:	}
        -:  408:	return check_all_fixed();
        -:  409:}
        -:  410:
        -:  411:// --------------------------------------------------------------------
       17:  412:bool CZMA_PARSE_ELSE::process( CZMA_INFORMATION& info, CZMA_PARSE* p_last_line ) {
        -:  413:	unsigned int success_count;
        -:  414:
       17:  415:	this->update_flags( &info, p_last_line );
        -:  416:	//	ELSE は、条件式無しで常に成立。
       17:  417:	if( !this->is_condition_fixed ){
        6:  418:		info.is_updated = true;
        -:  419:	}
       17:  420:	this->is_condition_fixed = true;
       17:  421:	this->is_condition = true;
        -:  422:
       17:  423:	this->m_text.process( info, success_count, p_last_line, !this->is_analyze_phase );
       17:  424:	this->m_text.calc_code_size();
       17:  425:	this->code_size = this->m_text.get_code_size();
       17:  426:	this->is_data_fixed = this->m_text.check_data_fixed();
       17:  427:	if( !this->is_fixed_next_code_address() ){
        6:  428:		this->next_code_address = this->m_text.get_next_code_address();
        -:  429:	}
       17:  430:	return this->check_all_fixed();
        -:  431:}
        -:  432:
        -:  433:// --------------------------------------------------------------------
       18:  434:bool CZMA_PARSE_ENDIF::process( CZMA_INFORMATION& info, CZMA_PARSE* p_last_line ) {
        -:  435:	//	本来、これは実行されるべきでないので、常にエラーを返す。
       90:  436:	put_error( CZMA_ERROR::get( CZMA_ERROR_CODE::SYNTAX_ERROR ) );
       18:  437:	return false;
      172:  438:}
